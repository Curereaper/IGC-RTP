
Robotracer_Ryuku_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006934  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006abc  08006abc  00016abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006adc  08006adc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006adc  08006adc  00016adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ae4  08006ae4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ae4  08006ae4  00016ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ae8  08006ae8  00016ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000010  08006af8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08006af8  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ab2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002274  00000000  00000000  00031aee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001218  00000000  00000000  00033d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001128  00000000  00000000  00034f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fd26  00000000  00000000  000360a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d326  00000000  00000000  00055dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c417f  00000000  00000000  000630f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00127273  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eac  00000000  00000000  001272f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006aa4 	.word	0x08006aa4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006aa4 	.word	0x08006aa4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b972 	b.w	8000cb0 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	4688      	mov	r8, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14b      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4615      	mov	r5, r2
 80009f6:	d967      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b14a      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 80009fe:	f1c2 0720 	rsb	r7, r2, #32
 8000a02:	fa01 f302 	lsl.w	r3, r1, r2
 8000a06:	fa20 f707 	lsr.w	r7, r0, r7
 8000a0a:	4095      	lsls	r5, r2
 8000a0c:	ea47 0803 	orr.w	r8, r7, r3
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a1c:	fa1f fc85 	uxth.w	ip, r5
 8000a20:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a24:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a28:	fb07 f10c 	mul.w	r1, r7, ip
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18eb      	adds	r3, r5, r3
 8000a32:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a36:	f080 811b 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8118 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a40:	3f02      	subs	r7, #2
 8000a42:	442b      	add	r3, r5
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a58:	45a4      	cmp	ip, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	192c      	adds	r4, r5, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8107 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a66:	45a4      	cmp	ip, r4
 8000a68:	f240 8104 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	442c      	add	r4, r5
 8000a70:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a74:	eba4 040c 	sub.w	r4, r4, ip
 8000a78:	2700      	movs	r7, #0
 8000a7a:	b11e      	cbz	r6, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c6 4300 	strd	r4, r3, [r6]
 8000a84:	4639      	mov	r1, r7
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d909      	bls.n	8000aa2 <__udivmoddi4+0xbe>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80eb 	beq.w	8000c6a <__udivmoddi4+0x286>
 8000a94:	2700      	movs	r7, #0
 8000a96:	e9c6 0100 	strd	r0, r1, [r6]
 8000a9a:	4638      	mov	r0, r7
 8000a9c:	4639      	mov	r1, r7
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	fab3 f783 	clz	r7, r3
 8000aa6:	2f00      	cmp	r7, #0
 8000aa8:	d147      	bne.n	8000b3a <__udivmoddi4+0x156>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d302      	bcc.n	8000ab4 <__udivmoddi4+0xd0>
 8000aae:	4282      	cmp	r2, r0
 8000ab0:	f200 80fa 	bhi.w	8000ca8 <__udivmoddi4+0x2c4>
 8000ab4:	1a84      	subs	r4, r0, r2
 8000ab6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aba:	2001      	movs	r0, #1
 8000abc:	4698      	mov	r8, r3
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0e0      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000ac2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ac6:	e7dd      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000ac8:	b902      	cbnz	r2, 8000acc <__udivmoddi4+0xe8>
 8000aca:	deff      	udf	#255	; 0xff
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	f040 808f 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad6:	1b49      	subs	r1, r1, r5
 8000ad8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000adc:	fa1f f885 	uxth.w	r8, r5
 8000ae0:	2701      	movs	r7, #1
 8000ae2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ae6:	0c23      	lsrs	r3, r4, #16
 8000ae8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb08 f10c 	mul.w	r1, r8, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1a59      	subs	r1, r3, r1
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b14:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x14c>
 8000b20:	192c      	adds	r4, r5, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x14a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80b6 	bhi.w	8000c9a <__udivmoddi4+0x2b6>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e79f      	b.n	8000a7a <__udivmoddi4+0x96>
 8000b3a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b3e:	40bb      	lsls	r3, r7
 8000b40:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b44:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b48:	fa01 f407 	lsl.w	r4, r1, r7
 8000b4c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b50:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b54:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b58:	4325      	orrs	r5, r4
 8000b5a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b5e:	0c2c      	lsrs	r4, r5, #16
 8000b60:	fb08 3319 	mls	r3, r8, r9, r3
 8000b64:	fa1f fa8e 	uxth.w	sl, lr
 8000b68:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b6c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b70:	429c      	cmp	r4, r3
 8000b72:	fa02 f207 	lsl.w	r2, r2, r7
 8000b76:	fa00 f107 	lsl.w	r1, r0, r7
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b84:	f080 8087 	bcs.w	8000c96 <__udivmoddi4+0x2b2>
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	f240 8084 	bls.w	8000c96 <__udivmoddi4+0x2b2>
 8000b8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b92:	4473      	add	r3, lr
 8000b94:	1b1b      	subs	r3, r3, r4
 8000b96:	b2ad      	uxth	r5, r5
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ba4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ba8:	45a2      	cmp	sl, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1e 0404 	adds.w	r4, lr, r4
 8000bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb4:	d26b      	bcs.n	8000c8e <__udivmoddi4+0x2aa>
 8000bb6:	45a2      	cmp	sl, r4
 8000bb8:	d969      	bls.n	8000c8e <__udivmoddi4+0x2aa>
 8000bba:	3802      	subs	r0, #2
 8000bbc:	4474      	add	r4, lr
 8000bbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bc6:	eba4 040a 	sub.w	r4, r4, sl
 8000bca:	454c      	cmp	r4, r9
 8000bcc:	46c2      	mov	sl, r8
 8000bce:	464b      	mov	r3, r9
 8000bd0:	d354      	bcc.n	8000c7c <__udivmoddi4+0x298>
 8000bd2:	d051      	beq.n	8000c78 <__udivmoddi4+0x294>
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d069      	beq.n	8000cac <__udivmoddi4+0x2c8>
 8000bd8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bdc:	eb64 0403 	sbc.w	r4, r4, r3
 8000be0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000be4:	40fd      	lsrs	r5, r7
 8000be6:	40fc      	lsrs	r4, r7
 8000be8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bec:	e9c6 5400 	strd	r5, r4, [r6]
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e747      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000bf4:	f1c2 0320 	rsb	r3, r2, #32
 8000bf8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bfc:	4095      	lsls	r5, r2
 8000bfe:	fa01 f002 	lsl.w	r0, r1, r2
 8000c02:	fa21 f303 	lsr.w	r3, r1, r3
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	4338      	orrs	r0, r7
 8000c0c:	0c01      	lsrs	r1, r0, #16
 8000c0e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c12:	fa1f f885 	uxth.w	r8, r5
 8000c16:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c1e:	fb07 f308 	mul.w	r3, r7, r8
 8000c22:	428b      	cmp	r3, r1
 8000c24:	fa04 f402 	lsl.w	r4, r4, r2
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x256>
 8000c2a:	1869      	adds	r1, r5, r1
 8000c2c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c30:	d22f      	bcs.n	8000c92 <__udivmoddi4+0x2ae>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d92d      	bls.n	8000c92 <__udivmoddi4+0x2ae>
 8000c36:	3f02      	subs	r7, #2
 8000c38:	4429      	add	r1, r5
 8000c3a:	1acb      	subs	r3, r1, r3
 8000c3c:	b281      	uxth	r1, r0
 8000c3e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c42:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4a:	fb00 f308 	mul.w	r3, r0, r8
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d907      	bls.n	8000c62 <__udivmoddi4+0x27e>
 8000c52:	1869      	adds	r1, r5, r1
 8000c54:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c58:	d217      	bcs.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d915      	bls.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5e:	3802      	subs	r0, #2
 8000c60:	4429      	add	r1, r5
 8000c62:	1ac9      	subs	r1, r1, r3
 8000c64:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c68:	e73b      	b.n	8000ae2 <__udivmoddi4+0xfe>
 8000c6a:	4637      	mov	r7, r6
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	e709      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c70:	4607      	mov	r7, r0
 8000c72:	e6e7      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c74:	4618      	mov	r0, r3
 8000c76:	e6fb      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c78:	4541      	cmp	r1, r8
 8000c7a:	d2ab      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c7c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c80:	eb69 020e 	sbc.w	r2, r9, lr
 8000c84:	3801      	subs	r0, #1
 8000c86:	4613      	mov	r3, r2
 8000c88:	e7a4      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8a:	4660      	mov	r0, ip
 8000c8c:	e7e9      	b.n	8000c62 <__udivmoddi4+0x27e>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	e795      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c92:	4667      	mov	r7, ip
 8000c94:	e7d1      	b.n	8000c3a <__udivmoddi4+0x256>
 8000c96:	4681      	mov	r9, r0
 8000c98:	e77c      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	442c      	add	r4, r5
 8000c9e:	e747      	b.n	8000b30 <__udivmoddi4+0x14c>
 8000ca0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca4:	442b      	add	r3, r5
 8000ca6:	e72f      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca8:	4638      	mov	r0, r7
 8000caa:	e708      	b.n	8000abe <__udivmoddi4+0xda>
 8000cac:	4637      	mov	r7, r6
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0xa0>

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <motorSet>:
static int16_t sen11[10];

uint8_t side_sensor_L, side_sensor_R;
int16_t speed_L, speed_R;

void motorSet() {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
	int16_t motorPwm_L, motorPwm_R;
	int16_t rev_motor_L, rev_motor_R;

	if(motor_L >= MAX_COUNTER_PERIOD) motor_L = MAX_COUNTER_PERIOD;
 8000cba:	4b52      	ldr	r3, [pc, #328]	; (8000e04 <motorSet+0x150>)
 8000cbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cc0:	f240 628d 	movw	r2, #1677	; 0x68d
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	dd04      	ble.n	8000cd2 <motorSet+0x1e>
 8000cc8:	4b4e      	ldr	r3, [pc, #312]	; (8000e04 <motorSet+0x150>)
 8000cca:	f240 628e 	movw	r2, #1678	; 0x68e
 8000cce:	801a      	strh	r2, [r3, #0]
 8000cd0:	e009      	b.n	8000ce6 <motorSet+0x32>
	else if(motor_L <= MIN_COUNTER_PERIOD) motor_L = MIN_COUNTER_PERIOD;
 8000cd2:	4b4c      	ldr	r3, [pc, #304]	; (8000e04 <motorSet+0x150>)
 8000cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd8:	4a4b      	ldr	r2, [pc, #300]	; (8000e08 <motorSet+0x154>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	da03      	bge.n	8000ce6 <motorSet+0x32>
 8000cde:	4b49      	ldr	r3, [pc, #292]	; (8000e04 <motorSet+0x150>)
 8000ce0:	f64f 1272 	movw	r2, #63858	; 0xf972
 8000ce4:	801a      	strh	r2, [r3, #0]

	if(motor_R >= MAX_COUNTER_PERIOD) motor_R = MAX_COUNTER_PERIOD;
 8000ce6:	4b49      	ldr	r3, [pc, #292]	; (8000e0c <motorSet+0x158>)
 8000ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cec:	f240 628d 	movw	r2, #1677	; 0x68d
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	dd04      	ble.n	8000cfe <motorSet+0x4a>
 8000cf4:	4b45      	ldr	r3, [pc, #276]	; (8000e0c <motorSet+0x158>)
 8000cf6:	f240 628e 	movw	r2, #1678	; 0x68e
 8000cfa:	801a      	strh	r2, [r3, #0]
 8000cfc:	e009      	b.n	8000d12 <motorSet+0x5e>
	else if(motor_R <= MIN_COUNTER_PERIOD) motor_R = MIN_COUNTER_PERIOD;
 8000cfe:	4b43      	ldr	r3, [pc, #268]	; (8000e0c <motorSet+0x158>)
 8000d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d04:	4a40      	ldr	r2, [pc, #256]	; (8000e08 <motorSet+0x154>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	da03      	bge.n	8000d12 <motorSet+0x5e>
 8000d0a:	4b40      	ldr	r3, [pc, #256]	; (8000e0c <motorSet+0x158>)
 8000d0c:	f64f 1272 	movw	r2, #63858	; 0xf972
 8000d10:	801a      	strh	r2, [r3, #0]

	if(motor_L >= 0){
 8000d12:	4b3c      	ldr	r3, [pc, #240]	; (8000e04 <motorSet+0x150>)
 8000d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db09      	blt.n	8000d30 <motorSet+0x7c>
		rev_motor_L = MAX_COUNTER_PERIOD - motor_L;
 8000d1c:	4b39      	ldr	r3, [pc, #228]	; (8000e04 <motorSet+0x150>)
 8000d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	f5c3 63d1 	rsb	r3, r3, #1672	; 0x688
 8000d28:	3306      	adds	r3, #6
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	80fb      	strh	r3, [r7, #6]
 8000d2e:	e007      	b.n	8000d40 <motorSet+0x8c>
	}
	else{
		rev_motor_L = MIN_COUNTER_PERIOD - motor_L;
 8000d30:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <motorSet+0x150>)
 8000d32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	4b35      	ldr	r3, [pc, #212]	; (8000e10 <motorSet+0x15c>)
 8000d3a:	1a9b      	subs	r3, r3, r2
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	80fb      	strh	r3, [r7, #6]
	}
	if(motor_R >= 0){
 8000d40:	4b32      	ldr	r3, [pc, #200]	; (8000e0c <motorSet+0x158>)
 8000d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db09      	blt.n	8000d5e <motorSet+0xaa>
		rev_motor_R = MAX_COUNTER_PERIOD - motor_R;
 8000d4a:	4b30      	ldr	r3, [pc, #192]	; (8000e0c <motorSet+0x158>)
 8000d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	f5c3 63d1 	rsb	r3, r3, #1672	; 0x688
 8000d56:	3306      	adds	r3, #6
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	80bb      	strh	r3, [r7, #4]
 8000d5c:	e007      	b.n	8000d6e <motorSet+0xba>
		}
	else{
		rev_motor_R = MIN_COUNTER_PERIOD - motor_R;
 8000d5e:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <motorSet+0x158>)
 8000d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <motorSet+0x15c>)
 8000d68:	1a9b      	subs	r3, r3, r2
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	80bb      	strh	r3, [r7, #4]
	}
	mon_rev_L = rev_motor_L;
 8000d6e:	4a29      	ldr	r2, [pc, #164]	; (8000e14 <motorSet+0x160>)
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	8013      	strh	r3, [r2, #0]
	mon_rev_R = rev_motor_R;
 8000d74:	4a28      	ldr	r2, [pc, #160]	; (8000e18 <motorSet+0x164>)
 8000d76:	88bb      	ldrh	r3, [r7, #4]
 8000d78:	8013      	strh	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, MAX_COUNTER_PERIOD);
		HAL_Delay(100);
	}
	*/

	if(rev_motor_L > 0) {
 8000d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	dd0c      	ble.n	8000d9c <motorSet+0xe8>
		motorPwm_L = rev_motor_L;
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	807b      	strh	r3, [r7, #2]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, MAX_COUNTER_PERIOD);
 8000d86:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <motorSet+0x168>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f240 628e 	movw	r2, #1678	; 0x68e
 8000d8e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, motorPwm_L);
 8000d90:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <motorSet+0x168>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d98:	641a      	str	r2, [r3, #64]	; 0x40
 8000d9a:	e00d      	b.n	8000db8 <motorSet+0x104>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, MAX_COUNTER_PERIOD);
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, MAX_COUNTER_PERIOD);
	}
	*/
	else {
		motorPwm_L = rev_motor_L*(-1) ;
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	425b      	negs	r3, r3
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	807b      	strh	r3, [r7, #2]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motorPwm_L);
 8000da4:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <motorSet+0x168>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000dac:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, MAX_COUNTER_PERIOD);
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <motorSet+0x168>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f240 628e 	movw	r2, #1678	; 0x68e
 8000db6:	641a      	str	r2, [r3, #64]	; 0x40
	}


	if(rev_motor_R > 0) {
 8000db8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	dd0c      	ble.n	8000dda <motorSet+0x126>
		motorPwm_R = rev_motor_R;
 8000dc0:	88bb      	ldrh	r3, [r7, #4]
 8000dc2:	803b      	strh	r3, [r7, #0]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, MAX_COUNTER_PERIOD);
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <motorSet+0x168>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f240 628e 	movw	r2, #1678	; 0x68e
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, motorPwm_R);
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <motorSet+0x168>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000dd6:	639a      	str	r2, [r3, #56]	; 0x38
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motorPwm_R);
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, MAX_COUNTER_PERIOD);
	}

}
 8000dd8:	e00d      	b.n	8000df6 <motorSet+0x142>
		motorPwm_R = rev_motor_R * (-1);
 8000dda:	88bb      	ldrh	r3, [r7, #4]
 8000ddc:	425b      	negs	r3, r3
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	803b      	strh	r3, [r7, #0]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motorPwm_R);
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <motorSet+0x168>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000dea:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, MAX_COUNTER_PERIOD);
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <motorSet+0x168>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f240 628e 	movw	r2, #1678	; 0x68e
 8000df4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200001ae 	.word	0x200001ae
 8000e08:	fffff973 	.word	0xfffff973
 8000e0c:	20000194 	.word	0x20000194
 8000e10:	fffff972 	.word	0xfffff972
 8000e14:	200001b8 	.word	0x200001b8
 8000e18:	200001b6 	.word	0x200001b6
 8000e1c:	20000140 	.word	0x20000140

08000e20 <storeAdBuffer>:

void storeAdBuffer(void) {
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
	static uint8_t index;
	sen0[index] = analog[0];
 8000e24:	4b3e      	ldr	r3, [pc, #248]	; (8000f20 <storeAdBuffer+0x100>)
 8000e26:	8819      	ldrh	r1, [r3, #0]
 8000e28:	4b3e      	ldr	r3, [pc, #248]	; (8000f24 <storeAdBuffer+0x104>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	b209      	sxth	r1, r1
 8000e30:	4b3d      	ldr	r3, [pc, #244]	; (8000f28 <storeAdBuffer+0x108>)
 8000e32:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen1[index] = analog[1];
 8000e36:	4b3a      	ldr	r3, [pc, #232]	; (8000f20 <storeAdBuffer+0x100>)
 8000e38:	8859      	ldrh	r1, [r3, #2]
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <storeAdBuffer+0x104>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	b209      	sxth	r1, r1
 8000e42:	4b3a      	ldr	r3, [pc, #232]	; (8000f2c <storeAdBuffer+0x10c>)
 8000e44:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen2[index] = analog[2];
 8000e48:	4b35      	ldr	r3, [pc, #212]	; (8000f20 <storeAdBuffer+0x100>)
 8000e4a:	8899      	ldrh	r1, [r3, #4]
 8000e4c:	4b35      	ldr	r3, [pc, #212]	; (8000f24 <storeAdBuffer+0x104>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	b209      	sxth	r1, r1
 8000e54:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <storeAdBuffer+0x110>)
 8000e56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen3[index] = analog[3];
 8000e5a:	4b31      	ldr	r3, [pc, #196]	; (8000f20 <storeAdBuffer+0x100>)
 8000e5c:	88d9      	ldrh	r1, [r3, #6]
 8000e5e:	4b31      	ldr	r3, [pc, #196]	; (8000f24 <storeAdBuffer+0x104>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	b209      	sxth	r1, r1
 8000e66:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <storeAdBuffer+0x114>)
 8000e68:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen4[index] = analog[4];
 8000e6c:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <storeAdBuffer+0x100>)
 8000e6e:	8919      	ldrh	r1, [r3, #8]
 8000e70:	4b2c      	ldr	r3, [pc, #176]	; (8000f24 <storeAdBuffer+0x104>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	b209      	sxth	r1, r1
 8000e78:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <storeAdBuffer+0x118>)
 8000e7a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen5[index] = analog[5];
 8000e7e:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <storeAdBuffer+0x100>)
 8000e80:	8959      	ldrh	r1, [r3, #10]
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <storeAdBuffer+0x104>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	b209      	sxth	r1, r1
 8000e8a:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <storeAdBuffer+0x11c>)
 8000e8c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen6[index] = analog[6];
 8000e90:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <storeAdBuffer+0x100>)
 8000e92:	8999      	ldrh	r1, [r3, #12]
 8000e94:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <storeAdBuffer+0x104>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	b209      	sxth	r1, r1
 8000e9c:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <storeAdBuffer+0x120>)
 8000e9e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen7[index] = analog[10];
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <storeAdBuffer+0x100>)
 8000ea4:	8a99      	ldrh	r1, [r3, #20]
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <storeAdBuffer+0x104>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	b209      	sxth	r1, r1
 8000eae:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <storeAdBuffer+0x124>)
 8000eb0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen8[index] = analog[7];
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <storeAdBuffer+0x100>)
 8000eb6:	89d9      	ldrh	r1, [r3, #14]
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <storeAdBuffer+0x104>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	b209      	sxth	r1, r1
 8000ec0:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <storeAdBuffer+0x128>)
 8000ec2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen9[index] = analog[8];
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <storeAdBuffer+0x100>)
 8000ec8:	8a19      	ldrh	r1, [r3, #16]
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <storeAdBuffer+0x104>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	b209      	sxth	r1, r1
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <storeAdBuffer+0x12c>)
 8000ed4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen10[index] = analog[9];
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <storeAdBuffer+0x100>)
 8000eda:	8a59      	ldrh	r1, [r3, #18]
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <storeAdBuffer+0x104>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	b209      	sxth	r1, r1
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <storeAdBuffer+0x130>)
 8000ee6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen11[index] = analog[11];
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <storeAdBuffer+0x100>)
 8000eec:	8ad9      	ldrh	r1, [r3, #22]
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <storeAdBuffer+0x104>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	b209      	sxth	r1, r1
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <storeAdBuffer+0x134>)
 8000ef8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	index++;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <storeAdBuffer+0x104>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <storeAdBuffer+0x104>)
 8000f06:	701a      	strb	r2, [r3, #0]
	if(index == 10) index = 0;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <storeAdBuffer+0x104>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b0a      	cmp	r3, #10
 8000f0e:	d102      	bne.n	8000f16 <storeAdBuffer+0xf6>
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <storeAdBuffer+0x104>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	20000224 	.word	0x20000224
 8000f24:	2000011c 	.word	0x2000011c
 8000f28:	2000002c 	.word	0x2000002c
 8000f2c:	20000040 	.word	0x20000040
 8000f30:	20000054 	.word	0x20000054
 8000f34:	20000068 	.word	0x20000068
 8000f38:	2000007c 	.word	0x2000007c
 8000f3c:	20000090 	.word	0x20000090
 8000f40:	200000a4 	.word	0x200000a4
 8000f44:	200000b8 	.word	0x200000b8
 8000f48:	200000cc 	.word	0x200000cc
 8000f4c:	200000e0 	.word	0x200000e0
 8000f50:	200000f4 	.word	0x200000f4
 8000f54:	20000108 	.word	0x20000108

08000f58 <getAnalogsensor>:

void getAnalogsensor(void) {
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
	sensor0 = ( sen0[0] + sen0[1] + sen0[2] + sen0[3] + sen0[4] + sen0[5] + sen0[6] + sen0[7] + sen0[8] + sen0[9] ) / 10;
 8000f5c:	4bc5      	ldr	r3, [pc, #788]	; (8001274 <getAnalogsensor+0x31c>)
 8000f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f62:	461a      	mov	r2, r3
 8000f64:	4bc3      	ldr	r3, [pc, #780]	; (8001274 <getAnalogsensor+0x31c>)
 8000f66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4ac1      	ldr	r2, [pc, #772]	; (8001274 <getAnalogsensor+0x31c>)
 8000f6e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	4abf      	ldr	r2, [pc, #764]	; (8001274 <getAnalogsensor+0x31c>)
 8000f76:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4abd      	ldr	r2, [pc, #756]	; (8001274 <getAnalogsensor+0x31c>)
 8000f7e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8000f82:	4413      	add	r3, r2
 8000f84:	4abb      	ldr	r2, [pc, #748]	; (8001274 <getAnalogsensor+0x31c>)
 8000f86:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4ab9      	ldr	r2, [pc, #740]	; (8001274 <getAnalogsensor+0x31c>)
 8000f8e:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8000f92:	4413      	add	r3, r2
 8000f94:	4ab7      	ldr	r2, [pc, #732]	; (8001274 <getAnalogsensor+0x31c>)
 8000f96:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4ab5      	ldr	r2, [pc, #724]	; (8001274 <getAnalogsensor+0x31c>)
 8000f9e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4ab3      	ldr	r2, [pc, #716]	; (8001274 <getAnalogsensor+0x31c>)
 8000fa6:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8000faa:	4413      	add	r3, r2
 8000fac:	4ab2      	ldr	r2, [pc, #712]	; (8001278 <getAnalogsensor+0x320>)
 8000fae:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb2:	1092      	asrs	r2, r2, #2
 8000fb4:	17db      	asrs	r3, r3, #31
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	4bb0      	ldr	r3, [pc, #704]	; (800127c <getAnalogsensor+0x324>)
 8000fbc:	801a      	strh	r2, [r3, #0]
	sensor1 = ( sen1[0] + sen1[1] + sen1[2] + sen1[3] + sen1[4] + sen1[5] + sen1[6] + sen1[7] + sen1[8] + sen1[9] ) / 10;
 8000fbe:	4bb0      	ldr	r3, [pc, #704]	; (8001280 <getAnalogsensor+0x328>)
 8000fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4bae      	ldr	r3, [pc, #696]	; (8001280 <getAnalogsensor+0x328>)
 8000fc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fcc:	4413      	add	r3, r2
 8000fce:	4aac      	ldr	r2, [pc, #688]	; (8001280 <getAnalogsensor+0x328>)
 8000fd0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4aaa      	ldr	r2, [pc, #680]	; (8001280 <getAnalogsensor+0x328>)
 8000fd8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4aa8      	ldr	r2, [pc, #672]	; (8001280 <getAnalogsensor+0x328>)
 8000fe0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4aa6      	ldr	r2, [pc, #664]	; (8001280 <getAnalogsensor+0x328>)
 8000fe8:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8000fec:	4413      	add	r3, r2
 8000fee:	4aa4      	ldr	r2, [pc, #656]	; (8001280 <getAnalogsensor+0x328>)
 8000ff0:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4aa2      	ldr	r2, [pc, #648]	; (8001280 <getAnalogsensor+0x328>)
 8000ff8:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	4aa0      	ldr	r2, [pc, #640]	; (8001280 <getAnalogsensor+0x328>)
 8001000:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001004:	4413      	add	r3, r2
 8001006:	4a9e      	ldr	r2, [pc, #632]	; (8001280 <getAnalogsensor+0x328>)
 8001008:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800100c:	4413      	add	r3, r2
 800100e:	4a9a      	ldr	r2, [pc, #616]	; (8001278 <getAnalogsensor+0x320>)
 8001010:	fb82 1203 	smull	r1, r2, r2, r3
 8001014:	1092      	asrs	r2, r2, #2
 8001016:	17db      	asrs	r3, r3, #31
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	b21a      	sxth	r2, r3
 800101c:	4b99      	ldr	r3, [pc, #612]	; (8001284 <getAnalogsensor+0x32c>)
 800101e:	801a      	strh	r2, [r3, #0]
	sensor2 = ( sen2[0] + sen2[1] + sen2[2] + sen2[3] + sen2[4] + sen2[5] + sen2[6] + sen2[7] + sen2[8] + sen2[9] ) / 10;
 8001020:	4b99      	ldr	r3, [pc, #612]	; (8001288 <getAnalogsensor+0x330>)
 8001022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001026:	461a      	mov	r2, r3
 8001028:	4b97      	ldr	r3, [pc, #604]	; (8001288 <getAnalogsensor+0x330>)
 800102a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800102e:	4413      	add	r3, r2
 8001030:	4a95      	ldr	r2, [pc, #596]	; (8001288 <getAnalogsensor+0x330>)
 8001032:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001036:	4413      	add	r3, r2
 8001038:	4a93      	ldr	r2, [pc, #588]	; (8001288 <getAnalogsensor+0x330>)
 800103a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800103e:	4413      	add	r3, r2
 8001040:	4a91      	ldr	r2, [pc, #580]	; (8001288 <getAnalogsensor+0x330>)
 8001042:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001046:	4413      	add	r3, r2
 8001048:	4a8f      	ldr	r2, [pc, #572]	; (8001288 <getAnalogsensor+0x330>)
 800104a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800104e:	4413      	add	r3, r2
 8001050:	4a8d      	ldr	r2, [pc, #564]	; (8001288 <getAnalogsensor+0x330>)
 8001052:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001056:	4413      	add	r3, r2
 8001058:	4a8b      	ldr	r2, [pc, #556]	; (8001288 <getAnalogsensor+0x330>)
 800105a:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800105e:	4413      	add	r3, r2
 8001060:	4a89      	ldr	r2, [pc, #548]	; (8001288 <getAnalogsensor+0x330>)
 8001062:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001066:	4413      	add	r3, r2
 8001068:	4a87      	ldr	r2, [pc, #540]	; (8001288 <getAnalogsensor+0x330>)
 800106a:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800106e:	4413      	add	r3, r2
 8001070:	4a81      	ldr	r2, [pc, #516]	; (8001278 <getAnalogsensor+0x320>)
 8001072:	fb82 1203 	smull	r1, r2, r2, r3
 8001076:	1092      	asrs	r2, r2, #2
 8001078:	17db      	asrs	r3, r3, #31
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	b21a      	sxth	r2, r3
 800107e:	4b83      	ldr	r3, [pc, #524]	; (800128c <getAnalogsensor+0x334>)
 8001080:	801a      	strh	r2, [r3, #0]
	sensor3 = ( sen3[0] + sen3[1] + sen3[2] + sen3[3] + sen3[4] + sen3[5] + sen3[6] + sen3[7] + sen3[8] + sen3[9] ) / 10;
 8001082:	4b83      	ldr	r3, [pc, #524]	; (8001290 <getAnalogsensor+0x338>)
 8001084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001088:	461a      	mov	r2, r3
 800108a:	4b81      	ldr	r3, [pc, #516]	; (8001290 <getAnalogsensor+0x338>)
 800108c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001090:	4413      	add	r3, r2
 8001092:	4a7f      	ldr	r2, [pc, #508]	; (8001290 <getAnalogsensor+0x338>)
 8001094:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a7d      	ldr	r2, [pc, #500]	; (8001290 <getAnalogsensor+0x338>)
 800109c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a7b      	ldr	r2, [pc, #492]	; (8001290 <getAnalogsensor+0x338>)
 80010a4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a79      	ldr	r2, [pc, #484]	; (8001290 <getAnalogsensor+0x338>)
 80010ac:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a77      	ldr	r2, [pc, #476]	; (8001290 <getAnalogsensor+0x338>)
 80010b4:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a75      	ldr	r2, [pc, #468]	; (8001290 <getAnalogsensor+0x338>)
 80010bc:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80010c0:	4413      	add	r3, r2
 80010c2:	4a73      	ldr	r2, [pc, #460]	; (8001290 <getAnalogsensor+0x338>)
 80010c4:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a71      	ldr	r2, [pc, #452]	; (8001290 <getAnalogsensor+0x338>)
 80010cc:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a69      	ldr	r2, [pc, #420]	; (8001278 <getAnalogsensor+0x320>)
 80010d4:	fb82 1203 	smull	r1, r2, r2, r3
 80010d8:	1092      	asrs	r2, r2, #2
 80010da:	17db      	asrs	r3, r3, #31
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	b21a      	sxth	r2, r3
 80010e0:	4b6c      	ldr	r3, [pc, #432]	; (8001294 <getAnalogsensor+0x33c>)
 80010e2:	801a      	strh	r2, [r3, #0]
	sensor4 = ( sen4[0] + sen4[1] + sen4[2] + sen4[3] + sen4[4] + sen4[5] + sen4[6] + sen4[7] + sen4[8] + sen4[9] ) / 10;
 80010e4:	4b6c      	ldr	r3, [pc, #432]	; (8001298 <getAnalogsensor+0x340>)
 80010e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b6a      	ldr	r3, [pc, #424]	; (8001298 <getAnalogsensor+0x340>)
 80010ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a68      	ldr	r2, [pc, #416]	; (8001298 <getAnalogsensor+0x340>)
 80010f6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a66      	ldr	r2, [pc, #408]	; (8001298 <getAnalogsensor+0x340>)
 80010fe:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001102:	4413      	add	r3, r2
 8001104:	4a64      	ldr	r2, [pc, #400]	; (8001298 <getAnalogsensor+0x340>)
 8001106:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800110a:	4413      	add	r3, r2
 800110c:	4a62      	ldr	r2, [pc, #392]	; (8001298 <getAnalogsensor+0x340>)
 800110e:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001112:	4413      	add	r3, r2
 8001114:	4a60      	ldr	r2, [pc, #384]	; (8001298 <getAnalogsensor+0x340>)
 8001116:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800111a:	4413      	add	r3, r2
 800111c:	4a5e      	ldr	r2, [pc, #376]	; (8001298 <getAnalogsensor+0x340>)
 800111e:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001122:	4413      	add	r3, r2
 8001124:	4a5c      	ldr	r2, [pc, #368]	; (8001298 <getAnalogsensor+0x340>)
 8001126:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800112a:	4413      	add	r3, r2
 800112c:	4a5a      	ldr	r2, [pc, #360]	; (8001298 <getAnalogsensor+0x340>)
 800112e:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001132:	4413      	add	r3, r2
 8001134:	4a50      	ldr	r2, [pc, #320]	; (8001278 <getAnalogsensor+0x320>)
 8001136:	fb82 1203 	smull	r1, r2, r2, r3
 800113a:	1092      	asrs	r2, r2, #2
 800113c:	17db      	asrs	r3, r3, #31
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	b21a      	sxth	r2, r3
 8001142:	4b56      	ldr	r3, [pc, #344]	; (800129c <getAnalogsensor+0x344>)
 8001144:	801a      	strh	r2, [r3, #0]
	sensor5 = ( sen5[0] + sen5[1] + sen5[2] + sen5[3] + sen5[4] + sen5[5] + sen5[6] + sen5[7] + sen5[8] + sen5[9] ) / 10;
 8001146:	4b56      	ldr	r3, [pc, #344]	; (80012a0 <getAnalogsensor+0x348>)
 8001148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114c:	461a      	mov	r2, r3
 800114e:	4b54      	ldr	r3, [pc, #336]	; (80012a0 <getAnalogsensor+0x348>)
 8001150:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001154:	4413      	add	r3, r2
 8001156:	4a52      	ldr	r2, [pc, #328]	; (80012a0 <getAnalogsensor+0x348>)
 8001158:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800115c:	4413      	add	r3, r2
 800115e:	4a50      	ldr	r2, [pc, #320]	; (80012a0 <getAnalogsensor+0x348>)
 8001160:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001164:	4413      	add	r3, r2
 8001166:	4a4e      	ldr	r2, [pc, #312]	; (80012a0 <getAnalogsensor+0x348>)
 8001168:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800116c:	4413      	add	r3, r2
 800116e:	4a4c      	ldr	r2, [pc, #304]	; (80012a0 <getAnalogsensor+0x348>)
 8001170:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001174:	4413      	add	r3, r2
 8001176:	4a4a      	ldr	r2, [pc, #296]	; (80012a0 <getAnalogsensor+0x348>)
 8001178:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800117c:	4413      	add	r3, r2
 800117e:	4a48      	ldr	r2, [pc, #288]	; (80012a0 <getAnalogsensor+0x348>)
 8001180:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001184:	4413      	add	r3, r2
 8001186:	4a46      	ldr	r2, [pc, #280]	; (80012a0 <getAnalogsensor+0x348>)
 8001188:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800118c:	4413      	add	r3, r2
 800118e:	4a44      	ldr	r2, [pc, #272]	; (80012a0 <getAnalogsensor+0x348>)
 8001190:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001194:	4413      	add	r3, r2
 8001196:	4a38      	ldr	r2, [pc, #224]	; (8001278 <getAnalogsensor+0x320>)
 8001198:	fb82 1203 	smull	r1, r2, r2, r3
 800119c:	1092      	asrs	r2, r2, #2
 800119e:	17db      	asrs	r3, r3, #31
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <getAnalogsensor+0x34c>)
 80011a6:	801a      	strh	r2, [r3, #0]
	sensor6 = ( sen6[0] + sen6[1] + sen6[2] + sen6[3] + sen6[4] + sen6[5] + sen6[6] + sen6[7] + sen6[8] + sen6[9] ) / 10;
 80011a8:	4b3f      	ldr	r3, [pc, #252]	; (80012a8 <getAnalogsensor+0x350>)
 80011aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <getAnalogsensor+0x350>)
 80011b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a3b      	ldr	r2, [pc, #236]	; (80012a8 <getAnalogsensor+0x350>)
 80011ba:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	4a39      	ldr	r2, [pc, #228]	; (80012a8 <getAnalogsensor+0x350>)
 80011c2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80011c6:	4413      	add	r3, r2
 80011c8:	4a37      	ldr	r2, [pc, #220]	; (80012a8 <getAnalogsensor+0x350>)
 80011ca:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a35      	ldr	r2, [pc, #212]	; (80012a8 <getAnalogsensor+0x350>)
 80011d2:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a33      	ldr	r2, [pc, #204]	; (80012a8 <getAnalogsensor+0x350>)
 80011da:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	4a31      	ldr	r2, [pc, #196]	; (80012a8 <getAnalogsensor+0x350>)
 80011e2:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a2f      	ldr	r2, [pc, #188]	; (80012a8 <getAnalogsensor+0x350>)
 80011ea:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a2d      	ldr	r2, [pc, #180]	; (80012a8 <getAnalogsensor+0x350>)
 80011f2:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a1f      	ldr	r2, [pc, #124]	; (8001278 <getAnalogsensor+0x320>)
 80011fa:	fb82 1203 	smull	r1, r2, r2, r3
 80011fe:	1092      	asrs	r2, r2, #2
 8001200:	17db      	asrs	r3, r3, #31
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	b21a      	sxth	r2, r3
 8001206:	4b29      	ldr	r3, [pc, #164]	; (80012ac <getAnalogsensor+0x354>)
 8001208:	801a      	strh	r2, [r3, #0]
	sensor7 = ( sen7[0] + sen7[1] + sen7[2] + sen7[3] + sen7[4] + sen7[5] + sen7[6] + sen7[7] + sen7[8] + sen7[9] ) / 10;
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <getAnalogsensor+0x358>)
 800120c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001210:	461a      	mov	r2, r3
 8001212:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <getAnalogsensor+0x358>)
 8001214:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001218:	4413      	add	r3, r2
 800121a:	4a25      	ldr	r2, [pc, #148]	; (80012b0 <getAnalogsensor+0x358>)
 800121c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001220:	4413      	add	r3, r2
 8001222:	4a23      	ldr	r2, [pc, #140]	; (80012b0 <getAnalogsensor+0x358>)
 8001224:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001228:	4413      	add	r3, r2
 800122a:	4a21      	ldr	r2, [pc, #132]	; (80012b0 <getAnalogsensor+0x358>)
 800122c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001230:	4413      	add	r3, r2
 8001232:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <getAnalogsensor+0x358>)
 8001234:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001238:	4413      	add	r3, r2
 800123a:	4a1d      	ldr	r2, [pc, #116]	; (80012b0 <getAnalogsensor+0x358>)
 800123c:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001240:	4413      	add	r3, r2
 8001242:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <getAnalogsensor+0x358>)
 8001244:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001248:	4413      	add	r3, r2
 800124a:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <getAnalogsensor+0x358>)
 800124c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001250:	4413      	add	r3, r2
 8001252:	4a17      	ldr	r2, [pc, #92]	; (80012b0 <getAnalogsensor+0x358>)
 8001254:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001258:	4413      	add	r3, r2
 800125a:	4a07      	ldr	r2, [pc, #28]	; (8001278 <getAnalogsensor+0x320>)
 800125c:	fb82 1203 	smull	r1, r2, r2, r3
 8001260:	1092      	asrs	r2, r2, #2
 8001262:	17db      	asrs	r3, r3, #31
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	b21a      	sxth	r2, r3
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <getAnalogsensor+0x35c>)
 800126a:	801a      	strh	r2, [r3, #0]
	sensor8 = ( sen8[0] + sen8[1] + sen8[2] + sen8[3] + sen8[4] + sen8[5] + sen8[6] + sen8[7] + sen8[8] + sen8[9] ) / 10;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <getAnalogsensor+0x360>)
 800126e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001272:	e023      	b.n	80012bc <getAnalogsensor+0x364>
 8001274:	2000002c 	.word	0x2000002c
 8001278:	66666667 	.word	0x66666667
 800127c:	2000013c 	.word	0x2000013c
 8001280:	20000040 	.word	0x20000040
 8001284:	200001b4 	.word	0x200001b4
 8001288:	20000054 	.word	0x20000054
 800128c:	200001be 	.word	0x200001be
 8001290:	20000068 	.word	0x20000068
 8001294:	20000198 	.word	0x20000198
 8001298:	2000007c 	.word	0x2000007c
 800129c:	200001b2 	.word	0x200001b2
 80012a0:	20000090 	.word	0x20000090
 80012a4:	200001b0 	.word	0x200001b0
 80012a8:	200000a4 	.word	0x200000a4
 80012ac:	20000196 	.word	0x20000196
 80012b0:	200000b8 	.word	0x200000b8
 80012b4:	20000190 	.word	0x20000190
 80012b8:	200000cc 	.word	0x200000cc
 80012bc:	461a      	mov	r2, r3
 80012be:	4b62      	ldr	r3, [pc, #392]	; (8001448 <getAnalogsensor+0x4f0>)
 80012c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a60      	ldr	r2, [pc, #384]	; (8001448 <getAnalogsensor+0x4f0>)
 80012c8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	4a5e      	ldr	r2, [pc, #376]	; (8001448 <getAnalogsensor+0x4f0>)
 80012d0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a5c      	ldr	r2, [pc, #368]	; (8001448 <getAnalogsensor+0x4f0>)
 80012d8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80012dc:	4413      	add	r3, r2
 80012de:	4a5a      	ldr	r2, [pc, #360]	; (8001448 <getAnalogsensor+0x4f0>)
 80012e0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80012e4:	4413      	add	r3, r2
 80012e6:	4a58      	ldr	r2, [pc, #352]	; (8001448 <getAnalogsensor+0x4f0>)
 80012e8:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a56      	ldr	r2, [pc, #344]	; (8001448 <getAnalogsensor+0x4f0>)
 80012f0:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80012f4:	4413      	add	r3, r2
 80012f6:	4a54      	ldr	r2, [pc, #336]	; (8001448 <getAnalogsensor+0x4f0>)
 80012f8:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80012fc:	4413      	add	r3, r2
 80012fe:	4a52      	ldr	r2, [pc, #328]	; (8001448 <getAnalogsensor+0x4f0>)
 8001300:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001304:	4413      	add	r3, r2
 8001306:	4a51      	ldr	r2, [pc, #324]	; (800144c <getAnalogsensor+0x4f4>)
 8001308:	fb82 1203 	smull	r1, r2, r2, r3
 800130c:	1092      	asrs	r2, r2, #2
 800130e:	17db      	asrs	r3, r3, #31
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	b21a      	sxth	r2, r3
 8001314:	4b4e      	ldr	r3, [pc, #312]	; (8001450 <getAnalogsensor+0x4f8>)
 8001316:	801a      	strh	r2, [r3, #0]
	sensor9 = ( sen9[0] + sen9[1] + sen9[2] + sen9[3] + sen9[4] + sen9[5] + sen9[6] + sen9[7] + sen9[8] + sen9[9] ) / 10;
 8001318:	4b4e      	ldr	r3, [pc, #312]	; (8001454 <getAnalogsensor+0x4fc>)
 800131a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800131e:	461a      	mov	r2, r3
 8001320:	4b4c      	ldr	r3, [pc, #304]	; (8001454 <getAnalogsensor+0x4fc>)
 8001322:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001326:	4413      	add	r3, r2
 8001328:	4a4a      	ldr	r2, [pc, #296]	; (8001454 <getAnalogsensor+0x4fc>)
 800132a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800132e:	4413      	add	r3, r2
 8001330:	4a48      	ldr	r2, [pc, #288]	; (8001454 <getAnalogsensor+0x4fc>)
 8001332:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001336:	4413      	add	r3, r2
 8001338:	4a46      	ldr	r2, [pc, #280]	; (8001454 <getAnalogsensor+0x4fc>)
 800133a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800133e:	4413      	add	r3, r2
 8001340:	4a44      	ldr	r2, [pc, #272]	; (8001454 <getAnalogsensor+0x4fc>)
 8001342:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001346:	4413      	add	r3, r2
 8001348:	4a42      	ldr	r2, [pc, #264]	; (8001454 <getAnalogsensor+0x4fc>)
 800134a:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800134e:	4413      	add	r3, r2
 8001350:	4a40      	ldr	r2, [pc, #256]	; (8001454 <getAnalogsensor+0x4fc>)
 8001352:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001356:	4413      	add	r3, r2
 8001358:	4a3e      	ldr	r2, [pc, #248]	; (8001454 <getAnalogsensor+0x4fc>)
 800135a:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800135e:	4413      	add	r3, r2
 8001360:	4a3c      	ldr	r2, [pc, #240]	; (8001454 <getAnalogsensor+0x4fc>)
 8001362:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001366:	4413      	add	r3, r2
 8001368:	4a38      	ldr	r2, [pc, #224]	; (800144c <getAnalogsensor+0x4f4>)
 800136a:	fb82 1203 	smull	r1, r2, r2, r3
 800136e:	1092      	asrs	r2, r2, #2
 8001370:	17db      	asrs	r3, r3, #31
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	b21a      	sxth	r2, r3
 8001376:	4b38      	ldr	r3, [pc, #224]	; (8001458 <getAnalogsensor+0x500>)
 8001378:	801a      	strh	r2, [r3, #0]
	sensor10 = ( sen10[0] + sen10[1] + sen10[2] + sen10[3] + sen10[4] + sen10[5] + sen10[6] + sen10[7] + sen10[8] + sen10[9] ) / 10;
 800137a:	4b38      	ldr	r3, [pc, #224]	; (800145c <getAnalogsensor+0x504>)
 800137c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001380:	461a      	mov	r2, r3
 8001382:	4b36      	ldr	r3, [pc, #216]	; (800145c <getAnalogsensor+0x504>)
 8001384:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001388:	4413      	add	r3, r2
 800138a:	4a34      	ldr	r2, [pc, #208]	; (800145c <getAnalogsensor+0x504>)
 800138c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001390:	4413      	add	r3, r2
 8001392:	4a32      	ldr	r2, [pc, #200]	; (800145c <getAnalogsensor+0x504>)
 8001394:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001398:	4413      	add	r3, r2
 800139a:	4a30      	ldr	r2, [pc, #192]	; (800145c <getAnalogsensor+0x504>)
 800139c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80013a0:	4413      	add	r3, r2
 80013a2:	4a2e      	ldr	r2, [pc, #184]	; (800145c <getAnalogsensor+0x504>)
 80013a4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a2c      	ldr	r2, [pc, #176]	; (800145c <getAnalogsensor+0x504>)
 80013ac:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a2a      	ldr	r2, [pc, #168]	; (800145c <getAnalogsensor+0x504>)
 80013b4:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a28      	ldr	r2, [pc, #160]	; (800145c <getAnalogsensor+0x504>)
 80013bc:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a26      	ldr	r2, [pc, #152]	; (800145c <getAnalogsensor+0x504>)
 80013c4:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80013c8:	4413      	add	r3, r2
 80013ca:	4a20      	ldr	r2, [pc, #128]	; (800144c <getAnalogsensor+0x4f4>)
 80013cc:	fb82 1203 	smull	r1, r2, r2, r3
 80013d0:	1092      	asrs	r2, r2, #2
 80013d2:	17db      	asrs	r3, r3, #31
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	4b21      	ldr	r3, [pc, #132]	; (8001460 <getAnalogsensor+0x508>)
 80013da:	801a      	strh	r2, [r3, #0]
	sensor11 = ( sen11[0] + sen11[1] + sen11[2] + sen11[3] + sen11[4] + sen11[5] + sen11[6] + sen11[7] + sen11[8] + sen11[9] ) / 10;
 80013dc:	4b21      	ldr	r3, [pc, #132]	; (8001464 <getAnalogsensor+0x50c>)
 80013de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <getAnalogsensor+0x50c>)
 80013e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <getAnalogsensor+0x50c>)
 80013ee:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a1b      	ldr	r2, [pc, #108]	; (8001464 <getAnalogsensor+0x50c>)
 80013f6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a19      	ldr	r2, [pc, #100]	; (8001464 <getAnalogsensor+0x50c>)
 80013fe:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001402:	4413      	add	r3, r2
 8001404:	4a17      	ldr	r2, [pc, #92]	; (8001464 <getAnalogsensor+0x50c>)
 8001406:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800140a:	4413      	add	r3, r2
 800140c:	4a15      	ldr	r2, [pc, #84]	; (8001464 <getAnalogsensor+0x50c>)
 800140e:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001412:	4413      	add	r3, r2
 8001414:	4a13      	ldr	r2, [pc, #76]	; (8001464 <getAnalogsensor+0x50c>)
 8001416:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800141a:	4413      	add	r3, r2
 800141c:	4a11      	ldr	r2, [pc, #68]	; (8001464 <getAnalogsensor+0x50c>)
 800141e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001422:	4413      	add	r3, r2
 8001424:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <getAnalogsensor+0x50c>)
 8001426:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800142a:	4413      	add	r3, r2
 800142c:	4a07      	ldr	r2, [pc, #28]	; (800144c <getAnalogsensor+0x4f4>)
 800142e:	fb82 1203 	smull	r1, r2, r2, r3
 8001432:	1092      	asrs	r2, r2, #2
 8001434:	17db      	asrs	r3, r3, #31
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	b21a      	sxth	r2, r3
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <getAnalogsensor+0x510>)
 800143c:	801a      	strh	r2, [r3, #0]


}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	200000cc 	.word	0x200000cc
 800144c:	66666667 	.word	0x66666667
 8001450:	200001bc 	.word	0x200001bc
 8001454:	200000e0 	.word	0x200000e0
 8001458:	200001ac 	.word	0x200001ac
 800145c:	200000f4 	.word	0x200000f4
 8001460:	20000192 	.word	0x20000192
 8001464:	20000108 	.word	0x20000108
 8001468:	20000138 	.word	0x20000138
 800146c:	00000000 	.word	0x00000000

08001470 <lineTrace>:

void lineTrace(void){
 8001470:	b5b0      	push	{r4, r5, r7, lr}
 8001472:	b08c      	sub	sp, #48	; 0x30
 8001474:	af00      	add	r7, sp, #0
	double p, d;
	static double i;
	double kp = 1.0, ki = 0., kd = 0.01;
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	4c87      	ldr	r4, [pc, #540]	; (8001698 <lineTrace+0x228>)
 800147c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	f04f 0400 	mov.w	r4, #0
 8001488:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800148c:	a47e      	add	r4, pc, #504	; (adr r4, 8001688 <lineTrace+0x218>)
 800148e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001492:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double def = 0.;
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	f04f 0400 	mov.w	r4, #0
 800149e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	/*if(i_pos_clear_flag == 1){
		i_pos = 0;
		i_pos_clear_flag = 0;
	}*/

	def = ( ( sensor0 + sensor1 + sensor2 + sensor3 + sensor4 + sensor5 ) / 6 ) - ( ( sensor6 + sensor7 + sensor8 + sensor9 + sensor10 + sensor11 ) / 6 );
 80014a2:	4b7e      	ldr	r3, [pc, #504]	; (800169c <lineTrace+0x22c>)
 80014a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b7d      	ldr	r3, [pc, #500]	; (80016a0 <lineTrace+0x230>)
 80014ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b0:	4413      	add	r3, r2
 80014b2:	4a7c      	ldr	r2, [pc, #496]	; (80016a4 <lineTrace+0x234>)
 80014b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a7b      	ldr	r2, [pc, #492]	; (80016a8 <lineTrace+0x238>)
 80014bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a7a      	ldr	r2, [pc, #488]	; (80016ac <lineTrace+0x23c>)
 80014c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014c8:	4413      	add	r3, r2
 80014ca:	4a79      	ldr	r2, [pc, #484]	; (80016b0 <lineTrace+0x240>)
 80014cc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a78      	ldr	r2, [pc, #480]	; (80016b4 <lineTrace+0x244>)
 80014d4:	fb82 1203 	smull	r1, r2, r2, r3
 80014d8:	17db      	asrs	r3, r3, #31
 80014da:	1ad2      	subs	r2, r2, r3
 80014dc:	4b76      	ldr	r3, [pc, #472]	; (80016b8 <lineTrace+0x248>)
 80014de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e2:	4619      	mov	r1, r3
 80014e4:	4b75      	ldr	r3, [pc, #468]	; (80016bc <lineTrace+0x24c>)
 80014e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ea:	440b      	add	r3, r1
 80014ec:	4974      	ldr	r1, [pc, #464]	; (80016c0 <lineTrace+0x250>)
 80014ee:	f9b1 1000 	ldrsh.w	r1, [r1]
 80014f2:	440b      	add	r3, r1
 80014f4:	4973      	ldr	r1, [pc, #460]	; (80016c4 <lineTrace+0x254>)
 80014f6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80014fa:	440b      	add	r3, r1
 80014fc:	4972      	ldr	r1, [pc, #456]	; (80016c8 <lineTrace+0x258>)
 80014fe:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001502:	440b      	add	r3, r1
 8001504:	4971      	ldr	r1, [pc, #452]	; (80016cc <lineTrace+0x25c>)
 8001506:	f9b1 1000 	ldrsh.w	r1, [r1]
 800150a:	440b      	add	r3, r1
 800150c:	4969      	ldr	r1, [pc, #420]	; (80016b4 <lineTrace+0x244>)
 800150e:	fb81 0103 	smull	r0, r1, r1, r3
 8001512:	17db      	asrs	r3, r3, #31
 8001514:	1a5b      	subs	r3, r3, r1
 8001516:	4413      	add	r3, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f7fe ffa7 	bl	800046c <__aeabi_i2d>
 800151e:	4603      	mov	r3, r0
 8001520:	460c      	mov	r4, r1
 8001522:	e9c7 3404 	strd	r3, r4, [r7, #16]

	p = kp * def; //P制御
 8001526:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800152a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800152e:	f7ff f807 	bl	8000540 <__aeabi_dmul>
 8001532:	4603      	mov	r3, r0
 8001534:	460c      	mov	r4, r1
 8001536:	e9c7 3402 	strd	r3, r4, [r7, #8]
	i += ki * def * DELTA_T; //I制御
 800153a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800153e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001542:	f7fe fffd 	bl	8000540 <__aeabi_dmul>
 8001546:	4603      	mov	r3, r0
 8001548:	460c      	mov	r4, r1
 800154a:	4618      	mov	r0, r3
 800154c:	4621      	mov	r1, r4
 800154e:	a350      	add	r3, pc, #320	; (adr r3, 8001690 <lineTrace+0x220>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7fe fff4 	bl	8000540 <__aeabi_dmul>
 8001558:	4603      	mov	r3, r0
 800155a:	460c      	mov	r4, r1
 800155c:	4618      	mov	r0, r3
 800155e:	4621      	mov	r1, r4
 8001560:	4b5b      	ldr	r3, [pc, #364]	; (80016d0 <lineTrace+0x260>)
 8001562:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001566:	461a      	mov	r2, r3
 8001568:	4623      	mov	r3, r4
 800156a:	f7fe fe33 	bl	80001d4 <__adddf3>
 800156e:	4603      	mov	r3, r0
 8001570:	460c      	mov	r4, r1
 8001572:	4a57      	ldr	r2, [pc, #348]	; (80016d0 <lineTrace+0x260>)
 8001574:	e9c2 3400 	strd	r3, r4, [r2]
	d = kd * (def - pre_def) / DELTA_T; //D制御
 8001578:	4b56      	ldr	r3, [pc, #344]	; (80016d4 <lineTrace+0x264>)
 800157a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800157e:	461a      	mov	r2, r3
 8001580:	4623      	mov	r3, r4
 8001582:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001586:	f7fe fe23 	bl	80001d0 <__aeabi_dsub>
 800158a:	4603      	mov	r3, r0
 800158c:	460c      	mov	r4, r1
 800158e:	4618      	mov	r0, r3
 8001590:	4621      	mov	r1, r4
 8001592:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001596:	f7fe ffd3 	bl	8000540 <__aeabi_dmul>
 800159a:	4603      	mov	r3, r0
 800159c:	460c      	mov	r4, r1
 800159e:	4618      	mov	r0, r3
 80015a0:	4621      	mov	r1, r4
 80015a2:	a33b      	add	r3, pc, #236	; (adr r3, 8001690 <lineTrace+0x220>)
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	f7ff f8f4 	bl	8000794 <__aeabi_ddiv>
 80015ac:	4603      	mov	r3, r0
 80015ae:	460c      	mov	r4, r1
 80015b0:	e9c7 3400 	strd	r3, r4, [r7]

	motor_L = speed_L + (int)( p + i + d );
 80015b4:	4b46      	ldr	r3, [pc, #280]	; (80016d0 <lineTrace+0x260>)
 80015b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015be:	f7fe fe09 	bl	80001d4 <__adddf3>
 80015c2:	4603      	mov	r3, r0
 80015c4:	460c      	mov	r4, r1
 80015c6:	4618      	mov	r0, r3
 80015c8:	4621      	mov	r1, r4
 80015ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015ce:	f7fe fe01 	bl	80001d4 <__adddf3>
 80015d2:	4603      	mov	r3, r0
 80015d4:	460c      	mov	r4, r1
 80015d6:	4618      	mov	r0, r3
 80015d8:	4621      	mov	r1, r4
 80015da:	f7ff f9c3 	bl	8000964 <__aeabi_d2iz>
 80015de:	4603      	mov	r3, r0
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <lineTrace+0x268>)
 80015e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4413      	add	r3, r2
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <lineTrace+0x26c>)
 80015f2:	801a      	strh	r2, [r3, #0]
	motor_R = speed_R - ( p + i + d );
 80015f4:	4b3a      	ldr	r3, [pc, #232]	; (80016e0 <lineTrace+0x270>)
 80015f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff36 	bl	800046c <__aeabi_i2d>
 8001600:	4604      	mov	r4, r0
 8001602:	460d      	mov	r5, r1
 8001604:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <lineTrace+0x260>)
 8001606:	e9d3 0100 	ldrd	r0, r1, [r3]
 800160a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800160e:	f7fe fde1 	bl	80001d4 <__adddf3>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800161e:	f7fe fdd9 	bl	80001d4 <__adddf3>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4620      	mov	r0, r4
 8001628:	4629      	mov	r1, r5
 800162a:	f7fe fdd1 	bl	80001d0 <__aeabi_dsub>
 800162e:	4603      	mov	r3, r0
 8001630:	460c      	mov	r4, r1
 8001632:	4618      	mov	r0, r3
 8001634:	4621      	mov	r1, r4
 8001636:	f7ff f995 	bl	8000964 <__aeabi_d2iz>
 800163a:	4603      	mov	r3, r0
 800163c:	b21a      	sxth	r2, r3
 800163e:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <lineTrace+0x274>)
 8001640:	801a      	strh	r2, [r3, #0]

	pre_def = def;
 8001642:	4a24      	ldr	r2, [pc, #144]	; (80016d4 <lineTrace+0x264>)
 8001644:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001648:	e9c2 3400 	strd	r3, r4, [r2]

	mon_def = def;
 800164c:	4a26      	ldr	r2, [pc, #152]	; (80016e8 <lineTrace+0x278>)
 800164e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001652:	e9c2 3400 	strd	r3, r4, [r2]
	mon_pid = p + i + d;
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <lineTrace+0x260>)
 8001658:	e9d3 0100 	ldrd	r0, r1, [r3]
 800165c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001660:	f7fe fdb8 	bl	80001d4 <__adddf3>
 8001664:	4603      	mov	r3, r0
 8001666:	460c      	mov	r4, r1
 8001668:	4618      	mov	r0, r3
 800166a:	4621      	mov	r1, r4
 800166c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001670:	f7fe fdb0 	bl	80001d4 <__adddf3>
 8001674:	4603      	mov	r3, r0
 8001676:	460c      	mov	r4, r1
 8001678:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <lineTrace+0x27c>)
 800167a:	e9c2 3400 	strd	r3, r4, [r2]

}
 800167e:	bf00      	nop
 8001680:	3730      	adds	r7, #48	; 0x30
 8001682:	46bd      	mov	sp, r7
 8001684:	bdb0      	pop	{r4, r5, r7, pc}
 8001686:	bf00      	nop
 8001688:	47ae147b 	.word	0x47ae147b
 800168c:	3f847ae1 	.word	0x3f847ae1
 8001690:	d2f1a9fc 	.word	0xd2f1a9fc
 8001694:	3f50624d 	.word	0x3f50624d
 8001698:	3ff00000 	.word	0x3ff00000
 800169c:	2000013c 	.word	0x2000013c
 80016a0:	200001b4 	.word	0x200001b4
 80016a4:	200001be 	.word	0x200001be
 80016a8:	20000198 	.word	0x20000198
 80016ac:	200001b2 	.word	0x200001b2
 80016b0:	200001b0 	.word	0x200001b0
 80016b4:	2aaaaaab 	.word	0x2aaaaaab
 80016b8:	20000196 	.word	0x20000196
 80016bc:	20000190 	.word	0x20000190
 80016c0:	200001bc 	.word	0x200001bc
 80016c4:	200001ac 	.word	0x200001ac
 80016c8:	20000192 	.word	0x20000192
 80016cc:	20000138 	.word	0x20000138
 80016d0:	20000120 	.word	0x20000120
 80016d4:	20000128 	.word	0x20000128
 80016d8:	200001c0 	.word	0x200001c0
 80016dc:	200001ae 	.word	0x200001ae
 80016e0:	200001c2 	.word	0x200001c2
 80016e4:	20000194 	.word	0x20000194
 80016e8:	20000188 	.word	0x20000188
 80016ec:	200001a0 	.word	0x200001a0

080016f0 <updateSideSensorState>:

void updateSideSensorState()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	static uint16_t cnt_L, cnt_R;

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 0) cnt_L++;
 80016f4:	2104      	movs	r1, #4
 80016f6:	4821      	ldr	r0, [pc, #132]	; (800177c <updateSideSensorState+0x8c>)
 80016f8:	f002 fdd0 	bl	800429c <HAL_GPIO_ReadPin>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d106      	bne.n	8001710 <updateSideSensorState+0x20>
 8001702:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <updateSideSensorState+0x90>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <updateSideSensorState+0x90>)
 800170c:	801a      	strh	r2, [r3, #0]
 800170e:	e002      	b.n	8001716 <updateSideSensorState+0x26>
	else cnt_L = 0;
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <updateSideSensorState+0x90>)
 8001712:	2200      	movs	r2, #0
 8001714:	801a      	strh	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0) cnt_R++;
 8001716:	2108      	movs	r1, #8
 8001718:	4818      	ldr	r0, [pc, #96]	; (800177c <updateSideSensorState+0x8c>)
 800171a:	f002 fdbf 	bl	800429c <HAL_GPIO_ReadPin>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d106      	bne.n	8001732 <updateSideSensorState+0x42>
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <updateSideSensorState+0x94>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	b29a      	uxth	r2, r3
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <updateSideSensorState+0x94>)
 800172e:	801a      	strh	r2, [r3, #0]
 8001730:	e002      	b.n	8001738 <updateSideSensorState+0x48>
	else cnt_R = 0;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <updateSideSensorState+0x94>)
 8001734:	2200      	movs	r2, #0
 8001736:	801a      	strh	r2, [r3, #0]

	if(cnt_L >= 5){
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <updateSideSensorState+0x90>)
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	2b04      	cmp	r3, #4
 800173e:	d903      	bls.n	8001748 <updateSideSensorState+0x58>
		side_sensor_L = 1;
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <updateSideSensorState+0x98>)
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	e002      	b.n	800174e <updateSideSensorState+0x5e>
	}
	else{
		side_sensor_L = 0;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <updateSideSensorState+0x98>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
	}

	if(cnt_R >= 5){
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <updateSideSensorState+0x94>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	2b04      	cmp	r3, #4
 8001754:	d903      	bls.n	800175e <updateSideSensorState+0x6e>
		side_sensor_R = 1;
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <updateSideSensorState+0x9c>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
 800175c:	e002      	b.n	8001764 <updateSideSensorState+0x74>
	}
	else{
		side_sensor_R = 0;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <updateSideSensorState+0x9c>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
	}

	mon_cnt_L = cnt_L;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <updateSideSensorState+0x90>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	b21a      	sxth	r2, r3
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <updateSideSensorState+0xa0>)
 800176c:	801a      	strh	r2, [r3, #0]
	mon_cnt_R = cnt_R;
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <updateSideSensorState+0x94>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	b21a      	sxth	r2, r3
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <updateSideSensorState+0xa4>)
 8001776:	801a      	strh	r2, [r3, #0]

}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40020800 	.word	0x40020800
 8001780:	20000130 	.word	0x20000130
 8001784:	20000132 	.word	0x20000132
 8001788:	200001ba 	.word	0x200001ba
 800178c:	2000013a 	.word	0x2000013a
 8001790:	200001a8 	.word	0x200001a8
 8001794:	200001aa 	.word	0x200001aa

08001798 <read_byte>:
 @brief spi : read 1 byte
 @param uint8_t Register
 @return read 1byte data
*/
uint8_t read_byte( uint8_t reg )
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af02      	add	r7, sp, #8
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  uint8_t rx_data[2];
  uint8_t tx_data[2];

  tx_data[0] = reg | 0x80;
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	723b      	strb	r3, [r7, #8]
  tx_data[1] = 0x00;  // dummy
 80017ac:	2300      	movs	r3, #0
 80017ae:	727b      	strb	r3, [r7, #9]

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2104      	movs	r1, #4
 80017b4:	480b      	ldr	r0, [pc, #44]	; (80017e4 <read_byte+0x4c>)
 80017b6:	f002 fd89 	bl	80042cc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi3, tx_data, rx_data, 2, 1);
 80017ba:	f107 020c 	add.w	r2, r7, #12
 80017be:	f107 0108 	add.w	r1, r7, #8
 80017c2:	2301      	movs	r3, #1
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2302      	movs	r3, #2
 80017c8:	4807      	ldr	r0, [pc, #28]	; (80017e8 <read_byte+0x50>)
 80017ca:	f003 fb71 	bl	8004eb0 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 80017ce:	2201      	movs	r2, #1
 80017d0:	2104      	movs	r1, #4
 80017d2:	4804      	ldr	r0, [pc, #16]	; (80017e4 <read_byte+0x4c>)
 80017d4:	f002 fd7a 	bl	80042cc <HAL_GPIO_WritePin>

  return rx_data[1];
 80017d8:	7b7b      	ldrb	r3, [r7, #13]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40020c00 	.word	0x40020c00
 80017e8:	200001c8 	.word	0x200001c8

080017ec <write_byte>:
 @brief spi : write 1 byte
 @param uint8_t Register
 @param uint8_t Write Data
*/
void write_byte( uint8_t reg, uint8_t val )
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af02      	add	r7, sp, #8
 80017f2:	4603      	mov	r3, r0
 80017f4:	460a      	mov	r2, r1
 80017f6:	71fb      	strb	r3, [r7, #7]
 80017f8:	4613      	mov	r3, r2
 80017fa:	71bb      	strb	r3, [r7, #6]
  uint8_t rx_data[2];
  uint8_t tx_data[2];

  tx_data[0] = reg & 0x7F;
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001802:	b2db      	uxtb	r3, r3
 8001804:	723b      	strb	r3, [r7, #8]
  tx_data[1] = val;  // write data
 8001806:	79bb      	ldrb	r3, [r7, #6]
 8001808:	727b      	strb	r3, [r7, #9]

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	2104      	movs	r1, #4
 800180e:	480b      	ldr	r0, [pc, #44]	; (800183c <write_byte+0x50>)
 8001810:	f002 fd5c 	bl	80042cc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi3, tx_data, rx_data, 2, 1);
 8001814:	f107 020c 	add.w	r2, r7, #12
 8001818:	f107 0108 	add.w	r1, r7, #8
 800181c:	2301      	movs	r3, #1
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2302      	movs	r3, #2
 8001822:	4807      	ldr	r0, [pc, #28]	; (8001840 <write_byte+0x54>)
 8001824:	f003 fb44 	bl	8004eb0 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8001828:	2201      	movs	r2, #1
 800182a:	2104      	movs	r1, #4
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <write_byte+0x50>)
 800182e:	f002 fd4d 	bl	80042cc <HAL_GPIO_WritePin>
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40020c00 	.word	0x40020c00
 8001840:	200001c8 	.word	0x200001c8

08001844 <mpu6500_init>:
/*
 * @breif initialize mpu 6500
*/

void mpu6500_init( void )
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
  uint8_t who_am_i;

  HAL_Delay( 100 ); // wait start up
 800184a:	2064      	movs	r0, #100	; 0x64
 800184c:	f001 fad4 	bl	8002df8 <HAL_Delay>
  who_am_i = read_byte( WHO_AM_I ); // 1. read who am i
 8001850:	2075      	movs	r0, #117	; 0x75
 8001852:	f7ff ffa1 	bl	8001798 <read_byte>
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  mon_who_am_i = who_am_i;
 800185a:	4a13      	ldr	r2, [pc, #76]	; (80018a8 <mpu6500_init+0x64>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	7013      	strb	r3, [r2, #0]
  //printf( "\r\n0x%x\r\n",who_am_i ); // 2. check who am i value

  // 2. error check
  if ( who_am_i != 0x70 ){
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	2b70      	cmp	r3, #112	; 0x70
 8001864:	d003      	beq.n	800186e <mpu6500_init+0x2a>
    while(1){
   //   printf( "gyro_error\r");
    mon_error = 1;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <mpu6500_init+0x68>)
 8001868:	2201      	movs	r2, #1
 800186a:	801a      	strh	r2, [r3, #0]
 800186c:	e7fb      	b.n	8001866 <mpu6500_init+0x22>
    }
  }

  HAL_Delay( 50 ); // wait
 800186e:	2032      	movs	r0, #50	; 0x32
 8001870:	f001 fac2 	bl	8002df8 <HAL_Delay>

  write_byte( PWR_MGMT_1, 0x00 ); // 3. set pwr_might
 8001874:	2100      	movs	r1, #0
 8001876:	206b      	movs	r0, #107	; 0x6b
 8001878:	f7ff ffb8 	bl	80017ec <write_byte>

  HAL_Delay( 50 );
 800187c:	2032      	movs	r0, #50	; 0x32
 800187e:	f001 fabb 	bl	8002df8 <HAL_Delay>

  write_byte( CONFIG, 0x00 ); // 4. set config
 8001882:	2100      	movs	r1, #0
 8001884:	201a      	movs	r0, #26
 8001886:	f7ff ffb1 	bl	80017ec <write_byte>

  HAL_Delay( 50 );
 800188a:	2032      	movs	r0, #50	; 0x32
 800188c:	f001 fab4 	bl	8002df8 <HAL_Delay>

  write_byte( GYRO_CONFIG, 0x18 ); // 5. set gyro config
 8001890:	2118      	movs	r1, #24
 8001892:	201b      	movs	r0, #27
 8001894:	f7ff ffaa 	bl	80017ec <write_byte>

  HAL_Delay( 50 );
 8001898:	2032      	movs	r0, #50	; 0x32
 800189a:	f001 faad 	bl	8002df8 <HAL_Delay>

}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000220 	.word	0x20000220
 80018ac:	20000134 	.word	0x20000134

080018b0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0f      	ldr	r2, [pc, #60]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d10c      	bne.n	80018dc <HAL_TIM_PeriodElapsedCallback+0x2c>
		timer++;
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	3301      	adds	r3, #1
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80018ca:	6013      	str	r3, [r2, #0]
		getAnalogsensor();
 80018cc:	f7ff fb44 	bl	8000f58 <getAnalogsensor>
		lineTrace();
 80018d0:	f7ff fdce 	bl	8001470 <lineTrace>
		updateSideSensorState();
 80018d4:	f7ff ff0c 	bl	80016f0 <updateSideSensorState>


		motorSet();
 80018d8:	f7ff f9ec 	bl	8000cb4 <motorSet>
   }
   if(htim->Instance == TIM7){
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a08      	ldr	r2, [pc, #32]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d106      	bne.n	80018f4 <HAL_TIM_PeriodElapsedCallback+0x44>
       timer1++;
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3301      	adds	r3, #1
 80018ec:	4a06      	ldr	r2, [pc, #24]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80018ee:	6013      	str	r3, [r2, #0]
       storeAdBuffer();
 80018f0:	f7ff fa96 	bl	8000e20 <storeAdBuffer>
   }
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40001000 	.word	0x40001000
 8001900:	2000023c 	.word	0x2000023c
 8001904:	40001400 	.word	0x40001400
 8001908:	20000440 	.word	0x20000440

0800190c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001910:	f001 fa00 	bl	8002d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001914:	f000 f8de 	bl	8001ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001918:	f000 fd58 	bl	80023cc <MX_GPIO_Init>
  MX_DMA_Init();
 800191c:	f000 fd36 	bl	800238c <MX_DMA_Init>
  MX_ADC1_Init();
 8001920:	f000 f942 	bl	8001ba8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001924:	f000 fa2c 	bl	8001d80 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001928:	f000 fa8e 	bl	8001e48 <MX_TIM2_Init>
  MX_TIM3_Init();
 800192c:	f000 fafa 	bl	8001f24 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001930:	f000 fb4c 	bl	8001fcc <MX_TIM4_Init>
  MX_TIM8_Init();
 8001934:	f000 fc08 	bl	8002148 <MX_TIM8_Init>
  MX_SPI3_Init();
 8001938:	f000 fa50 	bl	8001ddc <MX_SPI3_Init>
  MX_TIM12_Init();
 800193c:	f000 fcac 	bl	8002298 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001940:	f000 fcfa 	bl	8002338 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001944:	f000 fb96 	bl	8002074 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001948:	f000 fbca 	bl	80020e0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */


  while(1){
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0) {
 800194c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001950:	4856      	ldr	r0, [pc, #344]	; (8001aac <main+0x1a0>)
 8001952:	f002 fca3 	bl	800429c <HAL_GPIO_ReadPin>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f7      	bne.n	800194c <main+0x40>
		  HAL_Delay(500);
 800195c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001960:	f001 fa4a 	bl	8002df8 <HAL_Delay>
		  break;
 8001964:	bf00      	nop
	  }
  }

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001966:	2100      	movs	r1, #0
 8001968:	4851      	ldr	r0, [pc, #324]	; (8001ab0 <main+0x1a4>)
 800196a:	f003 fe87 	bl	800567c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800196e:	2104      	movs	r1, #4
 8001970:	484f      	ldr	r0, [pc, #316]	; (8001ab0 <main+0x1a4>)
 8001972:	f003 fe83 	bl	800567c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001976:	2108      	movs	r1, #8
 8001978:	484d      	ldr	r0, [pc, #308]	; (8001ab0 <main+0x1a4>)
 800197a:	f003 fe7f 	bl	800567c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800197e:	210c      	movs	r1, #12
 8001980:	484b      	ldr	r0, [pc, #300]	; (8001ab0 <main+0x1a4>)
 8001982:	f003 fe7b 	bl	800567c <HAL_TIM_PWM_Start>

  //motor driver wakeup
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, MAX_COUNTER_PERIOD);
 8001986:	4b4a      	ldr	r3, [pc, #296]	; (8001ab0 <main+0x1a4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f240 628e 	movw	r2, #1678	; 0x68e
 800198e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, MAX_COUNTER_PERIOD);
 8001990:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <main+0x1a4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f240 628e 	movw	r2, #1678	; 0x68e
 8001998:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, MAX_COUNTER_PERIOD);
 800199a:	4b45      	ldr	r3, [pc, #276]	; (8001ab0 <main+0x1a4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f240 628e 	movw	r2, #1678	; 0x68e
 80019a2:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, MAX_COUNTER_PERIOD);
 80019a4:	4b42      	ldr	r3, [pc, #264]	; (8001ab0 <main+0x1a4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f240 628e 	movw	r2, #1678	; 0x68e
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_Delay(500);
 80019ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019b2:	f001 fa21 	bl	8002df8 <HAL_Delay>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, LINESENSOR_ADC_NUM);
 80019b6:	220c      	movs	r2, #12
 80019b8:	493e      	ldr	r1, [pc, #248]	; (8001ab4 <main+0x1a8>)
 80019ba:	483f      	ldr	r0, [pc, #252]	; (8001ab8 <main+0x1ac>)
 80019bc:	f001 fa82 	bl	8002ec4 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim6);
 80019c0:	483e      	ldr	r0, [pc, #248]	; (8001abc <main+0x1b0>)
 80019c2:	f003 fe0c 	bl	80055de <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80019c6:	483e      	ldr	r0, [pc, #248]	; (8001ac0 <main+0x1b4>)
 80019c8:	f003 fe09 	bl	80055de <HAL_TIM_Base_Start_IT>
  mpu6500_init();
 80019cc:	f7ff ff3a 	bl	8001844 <mpu6500_init>

  speed_L = speed_R = 500; //550
 80019d0:	4b3c      	ldr	r3, [pc, #240]	; (8001ac4 <main+0x1b8>)
 80019d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80019d6:	801a      	strh	r2, [r3, #0]
 80019d8:	4b3a      	ldr	r3, [pc, #232]	; (8001ac4 <main+0x1b8>)
 80019da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019de:	4b3a      	ldr	r3, [pc, #232]	; (8001ac8 <main+0x1bc>)
 80019e0:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(pattern){
 80019e2:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <main+0x1c0>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	2b1e      	cmp	r3, #30
 80019e8:	d8fb      	bhi.n	80019e2 <main+0xd6>
 80019ea:	a201      	add	r2, pc, #4	; (adr r2, 80019f0 <main+0xe4>)
 80019ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f0:	08001a6d 	.word	0x08001a6d
 80019f4:	080019e3 	.word	0x080019e3
 80019f8:	080019e3 	.word	0x080019e3
 80019fc:	080019e3 	.word	0x080019e3
 8001a00:	080019e3 	.word	0x080019e3
 8001a04:	080019e3 	.word	0x080019e3
 8001a08:	080019e3 	.word	0x080019e3
 8001a0c:	080019e3 	.word	0x080019e3
 8001a10:	080019e3 	.word	0x080019e3
 8001a14:	080019e3 	.word	0x080019e3
 8001a18:	08001a7d 	.word	0x08001a7d
 8001a1c:	080019e3 	.word	0x080019e3
 8001a20:	080019e3 	.word	0x080019e3
 8001a24:	080019e3 	.word	0x080019e3
 8001a28:	080019e3 	.word	0x080019e3
 8001a2c:	080019e3 	.word	0x080019e3
 8001a30:	080019e3 	.word	0x080019e3
 8001a34:	080019e3 	.word	0x080019e3
 8001a38:	080019e3 	.word	0x080019e3
 8001a3c:	080019e3 	.word	0x080019e3
 8001a40:	08001a8d 	.word	0x08001a8d
 8001a44:	080019e3 	.word	0x080019e3
 8001a48:	080019e3 	.word	0x080019e3
 8001a4c:	080019e3 	.word	0x080019e3
 8001a50:	080019e3 	.word	0x080019e3
 8001a54:	080019e3 	.word	0x080019e3
 8001a58:	080019e3 	.word	0x080019e3
 8001a5c:	080019e3 	.word	0x080019e3
 8001a60:	080019e3 	.word	0x080019e3
 8001a64:	080019e3 	.word	0x080019e3
 8001a68:	080019e3 	.word	0x080019e3
		  case 0:
			  if(side_sensor_R == 1) pattern = 10;
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <main+0x1c4>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d116      	bne.n	8001aa2 <main+0x196>
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <main+0x1c0>)
 8001a76:	220a      	movs	r2, #10
 8001a78:	801a      	strh	r2, [r3, #0]

			  break;
 8001a7a:	e012      	b.n	8001aa2 <main+0x196>

		  case 10:
			  HAL_Delay(9000);
 8001a7c:	f242 3028 	movw	r0, #9000	; 0x2328
 8001a80:	f001 f9ba 	bl	8002df8 <HAL_Delay>
			  pattern = 20;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <main+0x1c0>)
 8001a86:	2214      	movs	r2, #20
 8001a88:	801a      	strh	r2, [r3, #0]

			  break;
 8001a8a:	e00d      	b.n	8001aa8 <main+0x19c>

		  case 20:
			  if(side_sensor_R == 1){
 8001a8c:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <main+0x1c4>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d108      	bne.n	8001aa6 <main+0x19a>
				  HAL_Delay(100);
 8001a94:	2064      	movs	r0, #100	; 0x64
 8001a96:	f001 f9af 	bl	8002df8 <HAL_Delay>
				  pattern = 30;
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <main+0x1c0>)
 8001a9c:	221e      	movs	r2, #30
 8001a9e:	801a      	strh	r2, [r3, #0]
			  }

			  break;
 8001aa0:	e001      	b.n	8001aa6 <main+0x19a>
			  break;
 8001aa2:	bf00      	nop
 8001aa4:	e79d      	b.n	80019e2 <main+0xd6>
			  break;
 8001aa6:	bf00      	nop
	  switch(pattern){
 8001aa8:	e79b      	b.n	80019e2 <main+0xd6>
 8001aaa:	bf00      	nop
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	20000140 	.word	0x20000140
 8001ab4:	20000224 	.word	0x20000224
 8001ab8:	20000318 	.word	0x20000318
 8001abc:	20000400 	.word	0x20000400
 8001ac0:	200004c4 	.word	0x200004c4
 8001ac4:	200001c2 	.word	0x200001c2
 8001ac8:	200001c0 	.word	0x200001c0
 8001acc:	20000314 	.word	0x20000314
 8001ad0:	2000013a 	.word	0x2000013a

08001ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b094      	sub	sp, #80	; 0x50
 8001ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ada:	f107 0320 	add.w	r3, r7, #32
 8001ade:	2230      	movs	r2, #48	; 0x30
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f004 ffd6 	bl	8006a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <SystemClock_Config+0xcc>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	4a27      	ldr	r2, [pc, #156]	; (8001ba0 <SystemClock_Config+0xcc>)
 8001b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b06:	6413      	str	r3, [r2, #64]	; 0x40
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <SystemClock_Config+0xcc>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b14:	2300      	movs	r3, #0
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <SystemClock_Config+0xd0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a21      	ldr	r2, [pc, #132]	; (8001ba4 <SystemClock_Config+0xd0>)
 8001b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <SystemClock_Config+0xd0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b30:	2301      	movs	r3, #1
 8001b32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001b44:	2306      	movs	r3, #6
 8001b46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b48:	23a8      	movs	r3, #168	; 0xa8
 8001b4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b50:	2307      	movs	r3, #7
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b54:	f107 0320 	add.w	r3, r7, #32
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 fd09 	bl	8004570 <HAL_RCC_OscConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b64:	f000 fcd0 	bl	8002508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b68:	230f      	movs	r3, #15
 8001b6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b74:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	2105      	movs	r1, #5
 8001b86:	4618      	mov	r0, r3
 8001b88:	f002 ff62 	bl	8004a50 <HAL_RCC_ClockConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b92:	f000 fcb9 	bl	8002508 <Error_Handler>
  }
}
 8001b96:	bf00      	nop
 8001b98:	3750      	adds	r7, #80	; 0x50
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40007000 	.word	0x40007000

08001ba8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bae:	463b      	mov	r3, r7
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bba:	4b6e      	ldr	r3, [pc, #440]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001bbc:	4a6e      	ldr	r2, [pc, #440]	; (8001d78 <MX_ADC1_Init+0x1d0>)
 8001bbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bc0:	4b6c      	ldr	r3, [pc, #432]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001bc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bc8:	4b6a      	ldr	r3, [pc, #424]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001bce:	4b69      	ldr	r3, [pc, #420]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001bd4:	4b67      	ldr	r3, [pc, #412]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bda:	4b66      	ldr	r3, [pc, #408]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001be2:	4b64      	ldr	r3, [pc, #400]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001be8:	4b62      	ldr	r3, [pc, #392]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001bea:	4a64      	ldr	r2, [pc, #400]	; (8001d7c <MX_ADC1_Init+0x1d4>)
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bee:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 8001bf4:	4b5f      	ldr	r3, [pc, #380]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001bfa:	4b5e      	ldr	r3, [pc, #376]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c02:	4b5c      	ldr	r3, [pc, #368]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c08:	485a      	ldr	r0, [pc, #360]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001c0a:	f001 f917 	bl	8002e3c <HAL_ADC_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c14:	f000 fc78 	bl	8002508 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001c20:	2304      	movs	r3, #4
 8001c22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c24:	463b      	mov	r3, r7
 8001c26:	4619      	mov	r1, r3
 8001c28:	4852      	ldr	r0, [pc, #328]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001c2a:	f001 fa5b 	bl	80030e4 <HAL_ADC_ConfigChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c34:	f000 fc68 	bl	8002508 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c40:	463b      	mov	r3, r7
 8001c42:	4619      	mov	r1, r3
 8001c44:	484b      	ldr	r0, [pc, #300]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001c46:	f001 fa4d 	bl	80030e4 <HAL_ADC_ConfigChannel>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001c50:	f000 fc5a 	bl	8002508 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c54:	2302      	movs	r3, #2
 8001c56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4844      	ldr	r0, [pc, #272]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001c62:	f001 fa3f 	bl	80030e4 <HAL_ADC_ConfigChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001c6c:	f000 fc4c 	bl	8002508 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001c70:	2303      	movs	r3, #3
 8001c72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001c74:	2304      	movs	r3, #4
 8001c76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c78:	463b      	mov	r3, r7
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	483d      	ldr	r0, [pc, #244]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001c7e:	f001 fa31 	bl	80030e4 <HAL_ADC_ConfigChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001c88:	f000 fc3e 	bl	8002508 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001c90:	2305      	movs	r3, #5
 8001c92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c94:	463b      	mov	r3, r7
 8001c96:	4619      	mov	r1, r3
 8001c98:	4836      	ldr	r0, [pc, #216]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001c9a:	f001 fa23 	bl	80030e4 <HAL_ADC_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001ca4:	f000 fc30 	bl	8002508 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001ca8:	2305      	movs	r3, #5
 8001caa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001cac:	2306      	movs	r3, #6
 8001cae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	482f      	ldr	r0, [pc, #188]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001cb6:	f001 fa15 	bl	80030e4 <HAL_ADC_ConfigChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001cc0:	f000 fc22 	bl	8002508 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001cc4:	2306      	movs	r3, #6
 8001cc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001cc8:	2307      	movs	r3, #7
 8001cca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ccc:	463b      	mov	r3, r7
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4828      	ldr	r0, [pc, #160]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001cd2:	f001 fa07 	bl	80030e4 <HAL_ADC_ConfigChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001cdc:	f000 fc14 	bl	8002508 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001ce0:	2307      	movs	r3, #7
 8001ce2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ce8:	463b      	mov	r3, r7
 8001cea:	4619      	mov	r1, r3
 8001cec:	4821      	ldr	r0, [pc, #132]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001cee:	f001 f9f9 	bl	80030e4 <HAL_ADC_ConfigChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001cf8:	f000 fc06 	bl	8002508 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001d00:	2309      	movs	r3, #9
 8001d02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d04:	463b      	mov	r3, r7
 8001d06:	4619      	mov	r1, r3
 8001d08:	481a      	ldr	r0, [pc, #104]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001d0a:	f001 f9eb 	bl	80030e4 <HAL_ADC_ConfigChannel>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001d14:	f000 fbf8 	bl	8002508 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001d18:	2309      	movs	r3, #9
 8001d1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001d1c:	230a      	movs	r3, #10
 8001d1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d20:	463b      	mov	r3, r7
 8001d22:	4619      	mov	r1, r3
 8001d24:	4813      	ldr	r0, [pc, #76]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001d26:	f001 f9dd 	bl	80030e4 <HAL_ADC_ConfigChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001d30:	f000 fbea 	bl	8002508 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001d34:	230e      	movs	r3, #14
 8001d36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001d38:	230b      	movs	r3, #11
 8001d3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d3c:	463b      	mov	r3, r7
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001d42:	f001 f9cf 	bl	80030e4 <HAL_ADC_ConfigChannel>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001d4c:	f000 fbdc 	bl	8002508 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001d50:	230f      	movs	r3, #15
 8001d52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001d54:	230c      	movs	r3, #12
 8001d56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d58:	463b      	mov	r3, r7
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_ADC1_Init+0x1cc>)
 8001d5e:	f001 f9c1 	bl	80030e4 <HAL_ADC_ConfigChannel>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001d68:	f000 fbce 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000318 	.word	0x20000318
 8001d78:	40012000 	.word	0x40012000
 8001d7c:	0f000001 	.word	0x0f000001

08001d80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001d86:	4a13      	ldr	r2, [pc, #76]	; (8001dd4 <MX_I2C1_Init+0x54>)
 8001d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001d8c:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <MX_I2C1_Init+0x58>)
 8001d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001d9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001da2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001da4:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dbc:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <MX_I2C1_Init+0x50>)
 8001dbe:	f002 fa9f 	bl	8004300 <HAL_I2C_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dc8:	f000 fb9e 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000280 	.word	0x20000280
 8001dd4:	40005400 	.word	0x40005400
 8001dd8:	000186a0 	.word	0x000186a0

08001ddc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <MX_SPI3_Init+0x64>)
 8001de2:	4a18      	ldr	r2, [pc, #96]	; (8001e44 <MX_SPI3_Init+0x68>)
 8001de4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <MX_SPI3_Init+0x64>)
 8001de8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <MX_SPI3_Init+0x64>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <MX_SPI3_Init+0x64>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <MX_SPI3_Init+0x64>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <MX_SPI3_Init+0x64>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <MX_SPI3_Init+0x64>)
 8001e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e0c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_SPI3_Init+0x64>)
 8001e10:	2218      	movs	r2, #24
 8001e12:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e14:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <MX_SPI3_Init+0x64>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <MX_SPI3_Init+0x64>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <MX_SPI3_Init+0x64>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <MX_SPI3_Init+0x64>)
 8001e28:	220a      	movs	r2, #10
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e2c:	4804      	ldr	r0, [pc, #16]	; (8001e40 <MX_SPI3_Init+0x64>)
 8001e2e:	f002 ffdb 	bl	8004de8 <HAL_SPI_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001e38:	f000 fb66 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	200001c8 	.word	0x200001c8
 8001e44:	40003c00 	.word	0x40003c00

08001e48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e4e:	f107 0320 	add.w	r3, r7, #32
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
 8001e64:	611a      	str	r2, [r3, #16]
 8001e66:	615a      	str	r2, [r3, #20]
 8001e68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e6a:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <MX_TIM2_Init+0xd8>)
 8001e6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e72:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <MX_TIM2_Init+0xd8>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e78:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <MX_TIM2_Init+0xd8>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <MX_TIM2_Init+0xd8>)
 8001e80:	f04f 32ff 	mov.w	r2, #4294967295
 8001e84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <MX_TIM2_Init+0xd8>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8c:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <MX_TIM2_Init+0xd8>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e92:	4823      	ldr	r0, [pc, #140]	; (8001f20 <MX_TIM2_Init+0xd8>)
 8001e94:	f003 fbc7 	bl	8005626 <HAL_TIM_PWM_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001e9e:	f000 fb33 	bl	8002508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eaa:	f107 0320 	add.w	r3, r7, #32
 8001eae:	4619      	mov	r1, r3
 8001eb0:	481b      	ldr	r0, [pc, #108]	; (8001f20 <MX_TIM2_Init+0xd8>)
 8001eb2:	f004 f91f 	bl	80060f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001ebc:	f000 fb24 	bl	8002508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec0:	2360      	movs	r3, #96	; 0x60
 8001ec2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4812      	ldr	r0, [pc, #72]	; (8001f20 <MX_TIM2_Init+0xd8>)
 8001ed8:	f003 fda8 	bl	8005a2c <HAL_TIM_PWM_ConfigChannel>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001ee2:	f000 fb11 	bl	8002508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	2208      	movs	r2, #8
 8001eea:	4619      	mov	r1, r3
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <MX_TIM2_Init+0xd8>)
 8001eee:	f003 fd9d 	bl	8005a2c <HAL_TIM_PWM_ConfigChannel>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001ef8:	f000 fb06 	bl	8002508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	220c      	movs	r2, #12
 8001f00:	4619      	mov	r1, r3
 8001f02:	4807      	ldr	r0, [pc, #28]	; (8001f20 <MX_TIM2_Init+0xd8>)
 8001f04:	f003 fd92 	bl	8005a2c <HAL_TIM_PWM_ConfigChannel>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001f0e:	f000 fafb 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f12:	4803      	ldr	r0, [pc, #12]	; (8001f20 <MX_TIM2_Init+0xd8>)
 8001f14:	f000 fd7a 	bl	8002a0c <HAL_TIM_MspPostInit>

}
 8001f18:	bf00      	nop
 8001f1a:	3728      	adds	r7, #40	; 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000444 	.word	0x20000444

08001f24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	; 0x30
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	2224      	movs	r2, #36	; 0x24
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f004 fdae 	bl	8006a94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f40:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <MX_TIM3_Init+0xa0>)
 8001f42:	4a21      	ldr	r2, [pc, #132]	; (8001fc8 <MX_TIM3_Init+0xa4>)
 8001f44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f46:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <MX_TIM3_Init+0xa0>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <MX_TIM3_Init+0xa0>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f52:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <MX_TIM3_Init+0xa0>)
 8001f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <MX_TIM3_Init+0xa0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f60:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <MX_TIM3_Init+0xa0>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f8a:	f107 030c 	add.w	r3, r7, #12
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <MX_TIM3_Init+0xa0>)
 8001f92:	f003 fbb1 	bl	80056f8 <HAL_TIM_Encoder_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f9c:	f000 fab4 	bl	8002508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	4619      	mov	r1, r3
 8001fac:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_TIM3_Init+0xa0>)
 8001fae:	f004 f8a1 	bl	80060f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001fb8:	f000 faa6 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	3730      	adds	r7, #48	; 0x30
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	200002d4 	.word	0x200002d4
 8001fc8:	40000400 	.word	0x40000400

08001fcc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08c      	sub	sp, #48	; 0x30
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fd2:	f107 030c 	add.w	r3, r7, #12
 8001fd6:	2224      	movs	r2, #36	; 0x24
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f004 fd5a 	bl	8006a94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fe8:	4b20      	ldr	r3, [pc, #128]	; (800206c <MX_TIM4_Init+0xa0>)
 8001fea:	4a21      	ldr	r2, [pc, #132]	; (8002070 <MX_TIM4_Init+0xa4>)
 8001fec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001fee:	4b1f      	ldr	r3, [pc, #124]	; (800206c <MX_TIM4_Init+0xa0>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	; (800206c <MX_TIM4_Init+0xa0>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	; (800206c <MX_TIM4_Init+0xa0>)
 8001ffc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002000:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002002:	4b1a      	ldr	r3, [pc, #104]	; (800206c <MX_TIM4_Init+0xa0>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <MX_TIM4_Init+0xa0>)
 800200a:	2200      	movs	r2, #0
 800200c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800200e:	2301      	movs	r3, #1
 8002010:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002016:	2301      	movs	r3, #1
 8002018:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002026:	2301      	movs	r3, #1
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800202a:	2300      	movs	r3, #0
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002032:	f107 030c 	add.w	r3, r7, #12
 8002036:	4619      	mov	r1, r3
 8002038:	480c      	ldr	r0, [pc, #48]	; (800206c <MX_TIM4_Init+0xa0>)
 800203a:	f003 fb5d 	bl	80056f8 <HAL_TIM_Encoder_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002044:	f000 fa60 	bl	8002508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002048:	2300      	movs	r3, #0
 800204a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	4619      	mov	r1, r3
 8002054:	4805      	ldr	r0, [pc, #20]	; (800206c <MX_TIM4_Init+0xa0>)
 8002056:	f004 f84d 	bl	80060f4 <HAL_TIMEx_MasterConfigSynchronization>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002060:	f000 fa52 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	3730      	adds	r7, #48	; 0x30
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000240 	.word	0x20000240
 8002070:	40000800 	.word	0x40000800

08002074 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207a:	463b      	mov	r3, r7
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <MX_TIM6_Init+0x64>)
 8002084:	4a15      	ldr	r2, [pc, #84]	; (80020dc <MX_TIM6_Init+0x68>)
 8002086:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 41;
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <MX_TIM6_Init+0x64>)
 800208a:	2229      	movs	r2, #41	; 0x29
 800208c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208e:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <MX_TIM6_Init+0x64>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <MX_TIM6_Init+0x64>)
 8002096:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800209a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209c:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <MX_TIM6_Init+0x64>)
 800209e:	2200      	movs	r2, #0
 80020a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020a2:	480d      	ldr	r0, [pc, #52]	; (80020d8 <MX_TIM6_Init+0x64>)
 80020a4:	f003 fa70 	bl	8005588 <HAL_TIM_Base_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80020ae:	f000 fa2b 	bl	8002508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020ba:	463b      	mov	r3, r7
 80020bc:	4619      	mov	r1, r3
 80020be:	4806      	ldr	r0, [pc, #24]	; (80020d8 <MX_TIM6_Init+0x64>)
 80020c0:	f004 f818 	bl	80060f4 <HAL_TIMEx_MasterConfigSynchronization>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80020ca:	f000 fa1d 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000400 	.word	0x20000400
 80020dc:	40001000 	.word	0x40001000

080020e0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e6:	463b      	mov	r3, r7
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80020ee:	4b14      	ldr	r3, [pc, #80]	; (8002140 <MX_TIM7_Init+0x60>)
 80020f0:	4a14      	ldr	r2, [pc, #80]	; (8002144 <MX_TIM7_Init+0x64>)
 80020f2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 41;
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <MX_TIM7_Init+0x60>)
 80020f6:	2229      	movs	r2, #41	; 0x29
 80020f8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <MX_TIM7_Init+0x60>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 199;
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <MX_TIM7_Init+0x60>)
 8002102:	22c7      	movs	r2, #199	; 0xc7
 8002104:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <MX_TIM7_Init+0x60>)
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800210c:	480c      	ldr	r0, [pc, #48]	; (8002140 <MX_TIM7_Init+0x60>)
 800210e:	f003 fa3b 	bl	8005588 <HAL_TIM_Base_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002118:	f000 f9f6 	bl	8002508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211c:	2300      	movs	r3, #0
 800211e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002124:	463b      	mov	r3, r7
 8002126:	4619      	mov	r1, r3
 8002128:	4805      	ldr	r0, [pc, #20]	; (8002140 <MX_TIM7_Init+0x60>)
 800212a:	f003 ffe3 	bl	80060f4 <HAL_TIMEx_MasterConfigSynchronization>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002134:	f000 f9e8 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	200004c4 	.word	0x200004c4
 8002144:	40001400 	.word	0x40001400

08002148 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b092      	sub	sp, #72	; 0x48
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
 8002168:	615a      	str	r2, [r3, #20]
 800216a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	2220      	movs	r2, #32
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f004 fc8e 	bl	8006a94 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002178:	4b45      	ldr	r3, [pc, #276]	; (8002290 <MX_TIM8_Init+0x148>)
 800217a:	4a46      	ldr	r2, [pc, #280]	; (8002294 <MX_TIM8_Init+0x14c>)
 800217c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800217e:	4b44      	ldr	r3, [pc, #272]	; (8002290 <MX_TIM8_Init+0x148>)
 8002180:	2200      	movs	r2, #0
 8002182:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002184:	4b42      	ldr	r3, [pc, #264]	; (8002290 <MX_TIM8_Init+0x148>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 800218a:	4b41      	ldr	r3, [pc, #260]	; (8002290 <MX_TIM8_Init+0x148>)
 800218c:	f240 628f 	movw	r2, #1679	; 0x68f
 8002190:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002192:	4b3f      	ldr	r3, [pc, #252]	; (8002290 <MX_TIM8_Init+0x148>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002198:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <MX_TIM8_Init+0x148>)
 800219a:	2200      	movs	r2, #0
 800219c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219e:	4b3c      	ldr	r3, [pc, #240]	; (8002290 <MX_TIM8_Init+0x148>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80021a4:	483a      	ldr	r0, [pc, #232]	; (8002290 <MX_TIM8_Init+0x148>)
 80021a6:	f003 fa3e 	bl	8005626 <HAL_TIM_PWM_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80021b0:	f000 f9aa 	bl	8002508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b4:	2300      	movs	r3, #0
 80021b6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021c0:	4619      	mov	r1, r3
 80021c2:	4833      	ldr	r0, [pc, #204]	; (8002290 <MX_TIM8_Init+0x148>)
 80021c4:	f003 ff96 	bl	80060f4 <HAL_TIMEx_MasterConfigSynchronization>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80021ce:	f000 f99b 	bl	8002508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021d2:	2360      	movs	r3, #96	; 0x60
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021da:	2300      	movs	r3, #0
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021de:	2300      	movs	r3, #0
 80021e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021ea:	2300      	movs	r3, #0
 80021ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f2:	2200      	movs	r2, #0
 80021f4:	4619      	mov	r1, r3
 80021f6:	4826      	ldr	r0, [pc, #152]	; (8002290 <MX_TIM8_Init+0x148>)
 80021f8:	f003 fc18 	bl	8005a2c <HAL_TIM_PWM_ConfigChannel>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002202:	f000 f981 	bl	8002508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220a:	2204      	movs	r2, #4
 800220c:	4619      	mov	r1, r3
 800220e:	4820      	ldr	r0, [pc, #128]	; (8002290 <MX_TIM8_Init+0x148>)
 8002210:	f003 fc0c 	bl	8005a2c <HAL_TIM_PWM_ConfigChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800221a:	f000 f975 	bl	8002508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800221e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002222:	2208      	movs	r2, #8
 8002224:	4619      	mov	r1, r3
 8002226:	481a      	ldr	r0, [pc, #104]	; (8002290 <MX_TIM8_Init+0x148>)
 8002228:	f003 fc00 	bl	8005a2c <HAL_TIM_PWM_ConfigChannel>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002232:	f000 f969 	bl	8002508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223a:	220c      	movs	r2, #12
 800223c:	4619      	mov	r1, r3
 800223e:	4814      	ldr	r0, [pc, #80]	; (8002290 <MX_TIM8_Init+0x148>)
 8002240:	f003 fbf4 	bl	8005a2c <HAL_TIM_PWM_ConfigChannel>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 800224a:	f000 f95d 	bl	8002508 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002266:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	4619      	mov	r1, r3
 8002270:	4807      	ldr	r0, [pc, #28]	; (8002290 <MX_TIM8_Init+0x148>)
 8002272:	f003 ffbb 	bl	80061ec <HAL_TIMEx_ConfigBreakDeadTime>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800227c:	f000 f944 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002280:	4803      	ldr	r0, [pc, #12]	; (8002290 <MX_TIM8_Init+0x148>)
 8002282:	f000 fbc3 	bl	8002a0c <HAL_TIM_MspPostInit>

}
 8002286:	bf00      	nop
 8002288:	3748      	adds	r7, #72	; 0x48
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000140 	.word	0x20000140
 8002294:	40010400 	.word	0x40010400

08002298 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
 80022ac:	615a      	str	r2, [r3, #20]
 80022ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80022b0:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <MX_TIM12_Init+0x98>)
 80022b2:	4a20      	ldr	r2, [pc, #128]	; (8002334 <MX_TIM12_Init+0x9c>)
 80022b4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80022b6:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <MX_TIM12_Init+0x98>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022bc:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <MX_TIM12_Init+0x98>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80022c2:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <MX_TIM12_Init+0x98>)
 80022c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022c8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <MX_TIM12_Init+0x98>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d0:	4b17      	ldr	r3, [pc, #92]	; (8002330 <MX_TIM12_Init+0x98>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80022d6:	4816      	ldr	r0, [pc, #88]	; (8002330 <MX_TIM12_Init+0x98>)
 80022d8:	f003 f9a5 	bl	8005626 <HAL_TIM_PWM_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80022e2:	f000 f911 	bl	8002508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022e6:	2360      	movs	r3, #96	; 0x60
 80022e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	2200      	movs	r2, #0
 80022fa:	4619      	mov	r1, r3
 80022fc:	480c      	ldr	r0, [pc, #48]	; (8002330 <MX_TIM12_Init+0x98>)
 80022fe:	f003 fb95 	bl	8005a2c <HAL_TIM_PWM_ConfigChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002308:	f000 f8fe 	bl	8002508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	2204      	movs	r2, #4
 8002310:	4619      	mov	r1, r3
 8002312:	4807      	ldr	r0, [pc, #28]	; (8002330 <MX_TIM12_Init+0x98>)
 8002314:	f003 fb8a 	bl	8005a2c <HAL_TIM_PWM_ConfigChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800231e:	f000 f8f3 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002322:	4803      	ldr	r0, [pc, #12]	; (8002330 <MX_TIM12_Init+0x98>)
 8002324:	f000 fb72 	bl	8002a0c <HAL_TIM_MspPostInit>

}
 8002328:	bf00      	nop
 800232a:	3720      	adds	r7, #32
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000484 	.word	0x20000484
 8002334:	40001800 	.word	0x40001800

08002338 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 800233e:	4a12      	ldr	r2, [pc, #72]	; (8002388 <MX_USART1_UART_Init+0x50>)
 8002340:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002348:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 800235e:	220c      	movs	r2, #12
 8002360:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800236e:	4805      	ldr	r0, [pc, #20]	; (8002384 <MX_USART1_UART_Init+0x4c>)
 8002370:	f003 ffa2 	bl	80062b8 <HAL_UART_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800237a:	f000 f8c5 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000360 	.word	0x20000360
 8002388:	40011000 	.word	0x40011000

0800238c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <MX_DMA_Init+0x3c>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <MX_DMA_Init+0x3c>)
 800239c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <MX_DMA_Init+0x3c>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	2038      	movs	r0, #56	; 0x38
 80023b4:	f001 fa11 	bl	80037da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80023b8:	2038      	movs	r0, #56	; 0x38
 80023ba:	f001 fa2a 	bl	8003812 <HAL_NVIC_EnableIRQ>

}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800

080023cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	60da      	str	r2, [r3, #12]
 80023e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	4b44      	ldr	r3, [pc, #272]	; (80024f8 <MX_GPIO_Init+0x12c>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a43      	ldr	r2, [pc, #268]	; (80024f8 <MX_GPIO_Init+0x12c>)
 80023ec:	f043 0304 	orr.w	r3, r3, #4
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b41      	ldr	r3, [pc, #260]	; (80024f8 <MX_GPIO_Init+0x12c>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	4b3d      	ldr	r3, [pc, #244]	; (80024f8 <MX_GPIO_Init+0x12c>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a3c      	ldr	r2, [pc, #240]	; (80024f8 <MX_GPIO_Init+0x12c>)
 8002408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b3a      	ldr	r3, [pc, #232]	; (80024f8 <MX_GPIO_Init+0x12c>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	4b36      	ldr	r3, [pc, #216]	; (80024f8 <MX_GPIO_Init+0x12c>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a35      	ldr	r2, [pc, #212]	; (80024f8 <MX_GPIO_Init+0x12c>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b33      	ldr	r3, [pc, #204]	; (80024f8 <MX_GPIO_Init+0x12c>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	4b2f      	ldr	r3, [pc, #188]	; (80024f8 <MX_GPIO_Init+0x12c>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a2e      	ldr	r2, [pc, #184]	; (80024f8 <MX_GPIO_Init+0x12c>)
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b2c      	ldr	r3, [pc, #176]	; (80024f8 <MX_GPIO_Init+0x12c>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	4b28      	ldr	r3, [pc, #160]	; (80024f8 <MX_GPIO_Init+0x12c>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a27      	ldr	r2, [pc, #156]	; (80024f8 <MX_GPIO_Init+0x12c>)
 800245c:	f043 0308 	orr.w	r3, r3, #8
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <MX_GPIO_Init+0x12c>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 800246e:	2200      	movs	r2, #0
 8002470:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002474:	4821      	ldr	r0, [pc, #132]	; (80024fc <MX_GPIO_Init+0x130>)
 8002476:	f001 ff29 	bl	80042cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800247a:	2200      	movs	r2, #0
 800247c:	2104      	movs	r1, #4
 800247e:	4820      	ldr	r0, [pc, #128]	; (8002500 <MX_GPIO_Init+0x134>)
 8002480:	f001 ff24 	bl	80042cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8002484:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248a:	2301      	movs	r3, #1
 800248c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4619      	mov	r1, r3
 800249c:	4817      	ldr	r0, [pc, #92]	; (80024fc <MX_GPIO_Init+0x130>)
 800249e:	f001 fd63 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024a2:	230c      	movs	r3, #12
 80024a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	4811      	ldr	r0, [pc, #68]	; (80024fc <MX_GPIO_Init+0x130>)
 80024b6:	f001 fd57 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH2_Pin SWITCH1_Pin */
  GPIO_InitStruct.Pin = SWITCH2_Pin|SWITCH1_Pin;
 80024ba:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80024be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024c4:	2301      	movs	r3, #1
 80024c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	4619      	mov	r1, r3
 80024ce:	480d      	ldr	r0, [pc, #52]	; (8002504 <MX_GPIO_Init+0x138>)
 80024d0:	f001 fd4a 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80024d4:	2304      	movs	r3, #4
 80024d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d8:	2301      	movs	r3, #1
 80024da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e0:	2300      	movs	r3, #0
 80024e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	4619      	mov	r1, r3
 80024ea:	4805      	ldr	r0, [pc, #20]	; (8002500 <MX_GPIO_Init+0x134>)
 80024ec:	f001 fd3c 	bl	8003f68 <HAL_GPIO_Init>

}
 80024f0:	bf00      	nop
 80024f2:	3728      	adds	r7, #40	; 0x28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40020800 	.word	0x40020800
 8002500:	40020c00 	.word	0x40020c00
 8002504:	40020000 	.word	0x40020000

08002508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800250c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800250e:	e7fe      	b.n	800250e <Error_Handler+0x6>

08002510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <HAL_MspInit+0x4c>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	4a0f      	ldr	r2, [pc, #60]	; (800255c <HAL_MspInit+0x4c>)
 8002520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002524:	6453      	str	r3, [r2, #68]	; 0x44
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <HAL_MspInit+0x4c>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <HAL_MspInit+0x4c>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	4a08      	ldr	r2, [pc, #32]	; (800255c <HAL_MspInit+0x4c>)
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002540:	6413      	str	r3, [r2, #64]	; 0x40
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_MspInit+0x4c>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800

08002560 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08c      	sub	sp, #48	; 0x30
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 031c 	add.w	r3, r7, #28
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a49      	ldr	r2, [pc, #292]	; (80026a4 <HAL_ADC_MspInit+0x144>)
 800257e:	4293      	cmp	r3, r2
 8002580:	f040 808c 	bne.w	800269c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002584:	2300      	movs	r3, #0
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	4b47      	ldr	r3, [pc, #284]	; (80026a8 <HAL_ADC_MspInit+0x148>)
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	4a46      	ldr	r2, [pc, #280]	; (80026a8 <HAL_ADC_MspInit+0x148>)
 800258e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002592:	6453      	str	r3, [r2, #68]	; 0x44
 8002594:	4b44      	ldr	r3, [pc, #272]	; (80026a8 <HAL_ADC_MspInit+0x148>)
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	4b40      	ldr	r3, [pc, #256]	; (80026a8 <HAL_ADC_MspInit+0x148>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	4a3f      	ldr	r2, [pc, #252]	; (80026a8 <HAL_ADC_MspInit+0x148>)
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	6313      	str	r3, [r2, #48]	; 0x30
 80025b0:	4b3d      	ldr	r3, [pc, #244]	; (80026a8 <HAL_ADC_MspInit+0x148>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	4b39      	ldr	r3, [pc, #228]	; (80026a8 <HAL_ADC_MspInit+0x148>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	4a38      	ldr	r2, [pc, #224]	; (80026a8 <HAL_ADC_MspInit+0x148>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6313      	str	r3, [r2, #48]	; 0x30
 80025cc:	4b36      	ldr	r3, [pc, #216]	; (80026a8 <HAL_ADC_MspInit+0x148>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	4b32      	ldr	r3, [pc, #200]	; (80026a8 <HAL_ADC_MspInit+0x148>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	4a31      	ldr	r2, [pc, #196]	; (80026a8 <HAL_ADC_MspInit+0x148>)
 80025e2:	f043 0302 	orr.w	r3, r3, #2
 80025e6:	6313      	str	r3, [r2, #48]	; 0x30
 80025e8:	4b2f      	ldr	r3, [pc, #188]	; (80026a8 <HAL_ADC_MspInit+0x148>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin|GPIO_PIN_4|GPIO_PIN_5;
 80025f4:	2332      	movs	r3, #50	; 0x32
 80025f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025f8:	2303      	movs	r3, #3
 80025fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002600:	f107 031c 	add.w	r3, r7, #28
 8002604:	4619      	mov	r1, r3
 8002606:	4829      	ldr	r0, [pc, #164]	; (80026ac <HAL_ADC_MspInit+0x14c>)
 8002608:	f001 fcae 	bl	8003f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800260c:	23ff      	movs	r3, #255	; 0xff
 800260e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002610:	2303      	movs	r3, #3
 8002612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002618:	f107 031c 	add.w	r3, r7, #28
 800261c:	4619      	mov	r1, r3
 800261e:	4824      	ldr	r0, [pc, #144]	; (80026b0 <HAL_ADC_MspInit+0x150>)
 8002620:	f001 fca2 	bl	8003f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002624:	2303      	movs	r3, #3
 8002626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002628:	2303      	movs	r3, #3
 800262a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002630:	f107 031c 	add.w	r3, r7, #28
 8002634:	4619      	mov	r1, r3
 8002636:	481f      	ldr	r0, [pc, #124]	; (80026b4 <HAL_ADC_MspInit+0x154>)
 8002638:	f001 fc96 	bl	8003f68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800263c:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <HAL_ADC_MspInit+0x158>)
 800263e:	4a1f      	ldr	r2, [pc, #124]	; (80026bc <HAL_ADC_MspInit+0x15c>)
 8002640:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_ADC_MspInit+0x158>)
 8002644:	2200      	movs	r2, #0
 8002646:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002648:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <HAL_ADC_MspInit+0x158>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800264e:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <HAL_ADC_MspInit+0x158>)
 8002650:	2200      	movs	r2, #0
 8002652:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002654:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <HAL_ADC_MspInit+0x158>)
 8002656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800265a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800265c:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <HAL_ADC_MspInit+0x158>)
 800265e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002662:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002664:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <HAL_ADC_MspInit+0x158>)
 8002666:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800266a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_ADC_MspInit+0x158>)
 800266e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002672:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002674:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <HAL_ADC_MspInit+0x158>)
 8002676:	2200      	movs	r2, #0
 8002678:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800267a:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <HAL_ADC_MspInit+0x158>)
 800267c:	2200      	movs	r2, #0
 800267e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002680:	480d      	ldr	r0, [pc, #52]	; (80026b8 <HAL_ADC_MspInit+0x158>)
 8002682:	f001 f8e1 	bl	8003848 <HAL_DMA_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800268c:	f7ff ff3c 	bl	8002508 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a09      	ldr	r2, [pc, #36]	; (80026b8 <HAL_ADC_MspInit+0x158>)
 8002694:	639a      	str	r2, [r3, #56]	; 0x38
 8002696:	4a08      	ldr	r2, [pc, #32]	; (80026b8 <HAL_ADC_MspInit+0x158>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800269c:	bf00      	nop
 800269e:	3730      	adds	r7, #48	; 0x30
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40012000 	.word	0x40012000
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40020800 	.word	0x40020800
 80026b0:	40020000 	.word	0x40020000
 80026b4:	40020400 	.word	0x40020400
 80026b8:	200003a0 	.word	0x200003a0
 80026bc:	40026410 	.word	0x40026410

080026c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a19      	ldr	r2, [pc, #100]	; (8002744 <HAL_I2C_MspInit+0x84>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d12c      	bne.n	800273c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	4b18      	ldr	r3, [pc, #96]	; (8002748 <HAL_I2C_MspInit+0x88>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a17      	ldr	r2, [pc, #92]	; (8002748 <HAL_I2C_MspInit+0x88>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_I2C_MspInit+0x88>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002704:	2312      	movs	r3, #18
 8002706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002708:	2301      	movs	r3, #1
 800270a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270c:	2303      	movs	r3, #3
 800270e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002710:	2304      	movs	r3, #4
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	4619      	mov	r1, r3
 800271a:	480c      	ldr	r0, [pc, #48]	; (800274c <HAL_I2C_MspInit+0x8c>)
 800271c:	f001 fc24 	bl	8003f68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <HAL_I2C_MspInit+0x88>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	4a07      	ldr	r2, [pc, #28]	; (8002748 <HAL_I2C_MspInit+0x88>)
 800272a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800272e:	6413      	str	r3, [r2, #64]	; 0x40
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_I2C_MspInit+0x88>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800273c:	bf00      	nop
 800273e:	3728      	adds	r7, #40	; 0x28
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40005400 	.word	0x40005400
 8002748:	40023800 	.word	0x40023800
 800274c:	40020400 	.word	0x40020400

08002750 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	; 0x28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <HAL_SPI_MspInit+0x94>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d134      	bne.n	80027dc <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <HAL_SPI_MspInit+0x98>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	4a1b      	ldr	r2, [pc, #108]	; (80027e8 <HAL_SPI_MspInit+0x98>)
 800277c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002780:	6413      	str	r3, [r2, #64]	; 0x40
 8002782:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <HAL_SPI_MspInit+0x98>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_SPI_MspInit+0x98>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <HAL_SPI_MspInit+0x98>)
 8002798:	f043 0304 	orr.w	r3, r3, #4
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_SPI_MspInit+0x98>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80027aa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80027ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b0:	2302      	movs	r3, #2
 80027b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b8:	2303      	movs	r3, #3
 80027ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027bc:	2306      	movs	r3, #6
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	4619      	mov	r1, r3
 80027c6:	4809      	ldr	r0, [pc, #36]	; (80027ec <HAL_SPI_MspInit+0x9c>)
 80027c8:	f001 fbce 	bl	8003f68 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80027cc:	2200      	movs	r2, #0
 80027ce:	2100      	movs	r1, #0
 80027d0:	2033      	movs	r0, #51	; 0x33
 80027d2:	f001 f802 	bl	80037da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80027d6:	2033      	movs	r0, #51	; 0x33
 80027d8:	f001 f81b 	bl	8003812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80027dc:	bf00      	nop
 80027de:	3728      	adds	r7, #40	; 0x28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40003c00 	.word	0x40003c00
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40020800 	.word	0x40020800

080027f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002800:	d10e      	bne.n	8002820 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	4b1d      	ldr	r3, [pc, #116]	; (800287c <HAL_TIM_PWM_MspInit+0x8c>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a1c      	ldr	r2, [pc, #112]	; (800287c <HAL_TIM_PWM_MspInit+0x8c>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b1a      	ldr	r3, [pc, #104]	; (800287c <HAL_TIM_PWM_MspInit+0x8c>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800281e:	e026      	b.n	800286e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a16      	ldr	r2, [pc, #88]	; (8002880 <HAL_TIM_PWM_MspInit+0x90>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d10e      	bne.n	8002848 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	4b13      	ldr	r3, [pc, #76]	; (800287c <HAL_TIM_PWM_MspInit+0x8c>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	4a12      	ldr	r2, [pc, #72]	; (800287c <HAL_TIM_PWM_MspInit+0x8c>)
 8002834:	f043 0302 	orr.w	r3, r3, #2
 8002838:	6453      	str	r3, [r2, #68]	; 0x44
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <HAL_TIM_PWM_MspInit+0x8c>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	693b      	ldr	r3, [r7, #16]
}
 8002846:	e012      	b.n	800286e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <HAL_TIM_PWM_MspInit+0x94>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d10d      	bne.n	800286e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_TIM_PWM_MspInit+0x8c>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	4a08      	ldr	r2, [pc, #32]	; (800287c <HAL_TIM_PWM_MspInit+0x8c>)
 800285c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002860:	6413      	str	r3, [r2, #64]	; 0x40
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_TIM_PWM_MspInit+0x8c>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
}
 800286e:	bf00      	nop
 8002870:	371c      	adds	r7, #28
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800
 8002880:	40010400 	.word	0x40010400
 8002884:	40001800 	.word	0x40001800

08002888 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	; 0x30
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 031c 	add.w	r3, r7, #28
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a32      	ldr	r2, [pc, #200]	; (8002970 <HAL_TIM_Encoder_MspInit+0xe8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d12c      	bne.n	8002904 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	4b31      	ldr	r3, [pc, #196]	; (8002974 <HAL_TIM_Encoder_MspInit+0xec>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a30      	ldr	r2, [pc, #192]	; (8002974 <HAL_TIM_Encoder_MspInit+0xec>)
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ba:	4b2e      	ldr	r3, [pc, #184]	; (8002974 <HAL_TIM_Encoder_MspInit+0xec>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	61bb      	str	r3, [r7, #24]
 80028c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_TIM_Encoder_MspInit+0xec>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a29      	ldr	r2, [pc, #164]	; (8002974 <HAL_TIM_Encoder_MspInit+0xec>)
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b27      	ldr	r3, [pc, #156]	; (8002974 <HAL_TIM_Encoder_MspInit+0xec>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER1_A_Pin|ENCODER1_B_Pin;
 80028e2:	2330      	movs	r3, #48	; 0x30
 80028e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e6:	2302      	movs	r3, #2
 80028e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ee:	2300      	movs	r3, #0
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028f2:	2302      	movs	r3, #2
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f6:	f107 031c 	add.w	r3, r7, #28
 80028fa:	4619      	mov	r1, r3
 80028fc:	481e      	ldr	r0, [pc, #120]	; (8002978 <HAL_TIM_Encoder_MspInit+0xf0>)
 80028fe:	f001 fb33 	bl	8003f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002902:	e030      	b.n	8002966 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a1c      	ldr	r2, [pc, #112]	; (800297c <HAL_TIM_Encoder_MspInit+0xf4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d12b      	bne.n	8002966 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	4b18      	ldr	r3, [pc, #96]	; (8002974 <HAL_TIM_Encoder_MspInit+0xec>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	4a17      	ldr	r2, [pc, #92]	; (8002974 <HAL_TIM_Encoder_MspInit+0xec>)
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	6413      	str	r3, [r2, #64]	; 0x40
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <HAL_TIM_Encoder_MspInit+0xec>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_TIM_Encoder_MspInit+0xec>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a10      	ldr	r2, [pc, #64]	; (8002974 <HAL_TIM_Encoder_MspInit+0xec>)
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <HAL_TIM_Encoder_MspInit+0xec>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 8002946:	23c0      	movs	r3, #192	; 0xc0
 8002948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294a:	2302      	movs	r3, #2
 800294c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2300      	movs	r3, #0
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002956:	2302      	movs	r3, #2
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295a:	f107 031c 	add.w	r3, r7, #28
 800295e:	4619      	mov	r1, r3
 8002960:	4805      	ldr	r0, [pc, #20]	; (8002978 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002962:	f001 fb01 	bl	8003f68 <HAL_GPIO_Init>
}
 8002966:	bf00      	nop
 8002968:	3730      	adds	r7, #48	; 0x30
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40000400 	.word	0x40000400
 8002974:	40023800 	.word	0x40023800
 8002978:	40020400 	.word	0x40020400
 800297c:	40000800 	.word	0x40000800

08002980 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a1c      	ldr	r2, [pc, #112]	; (8002a00 <HAL_TIM_Base_MspInit+0x80>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d116      	bne.n	80029c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <HAL_TIM_Base_MspInit+0x84>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	4a1a      	ldr	r2, [pc, #104]	; (8002a04 <HAL_TIM_Base_MspInit+0x84>)
 800299c:	f043 0310 	orr.w	r3, r3, #16
 80029a0:	6413      	str	r3, [r2, #64]	; 0x40
 80029a2:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <HAL_TIM_Base_MspInit+0x84>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	2100      	movs	r1, #0
 80029b2:	2036      	movs	r0, #54	; 0x36
 80029b4:	f000 ff11 	bl	80037da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029b8:	2036      	movs	r0, #54	; 0x36
 80029ba:	f000 ff2a 	bl	8003812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80029be:	e01a      	b.n	80029f6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a10      	ldr	r2, [pc, #64]	; (8002a08 <HAL_TIM_Base_MspInit+0x88>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d115      	bne.n	80029f6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <HAL_TIM_Base_MspInit+0x84>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	4a0c      	ldr	r2, [pc, #48]	; (8002a04 <HAL_TIM_Base_MspInit+0x84>)
 80029d4:	f043 0320 	orr.w	r3, r3, #32
 80029d8:	6413      	str	r3, [r2, #64]	; 0x40
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <HAL_TIM_Base_MspInit+0x84>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	2101      	movs	r1, #1
 80029ea:	2037      	movs	r0, #55	; 0x37
 80029ec:	f000 fef5 	bl	80037da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80029f0:	2037      	movs	r0, #55	; 0x37
 80029f2:	f000 ff0e 	bl	8003812 <HAL_NVIC_EnableIRQ>
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40001000 	.word	0x40001000
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40001400 	.word	0x40001400

08002a0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08c      	sub	sp, #48	; 0x30
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 031c 	add.w	r3, r7, #28
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2c:	d13e      	bne.n	8002aac <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	4b45      	ldr	r3, [pc, #276]	; (8002b48 <HAL_TIM_MspPostInit+0x13c>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	4a44      	ldr	r2, [pc, #272]	; (8002b48 <HAL_TIM_MspPostInit+0x13c>)
 8002a38:	f043 0302 	orr.w	r3, r3, #2
 8002a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3e:	4b42      	ldr	r3, [pc, #264]	; (8002b48 <HAL_TIM_MspPostInit+0x13c>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	4b3e      	ldr	r3, [pc, #248]	; (8002b48 <HAL_TIM_MspPostInit+0x13c>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a3d      	ldr	r2, [pc, #244]	; (8002b48 <HAL_TIM_MspPostInit+0x13c>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b3b      	ldr	r3, [pc, #236]	; (8002b48 <HAL_TIM_MspPostInit+0x13c>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = DRONE_MOTOR_PWM1_Pin|DRONE_MOTOR_PWM2_Pin;
 8002a66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a74:	2300      	movs	r3, #0
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	4619      	mov	r1, r3
 8002a82:	4832      	ldr	r0, [pc, #200]	; (8002b4c <HAL_TIM_MspPostInit+0x140>)
 8002a84:	f001 fa70 	bl	8003f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FAN_MOTOR_PWM_Pin;
 8002a88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	2300      	movs	r3, #0
 8002a98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(FAN_MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8002a9e:	f107 031c 	add.w	r3, r7, #28
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	482a      	ldr	r0, [pc, #168]	; (8002b50 <HAL_TIM_MspPostInit+0x144>)
 8002aa6:	f001 fa5f 	bl	8003f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002aaa:	e048      	b.n	8002b3e <HAL_TIM_MspPostInit+0x132>
  else if(htim->Instance==TIM8)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a28      	ldr	r2, [pc, #160]	; (8002b54 <HAL_TIM_MspPostInit+0x148>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d11f      	bne.n	8002af6 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <HAL_TIM_MspPostInit+0x13c>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a22      	ldr	r2, [pc, #136]	; (8002b48 <HAL_TIM_MspPostInit+0x13c>)
 8002ac0:	f043 0304 	orr.w	r3, r3, #4
 8002ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac6:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <HAL_TIM_MspPostInit+0x13c>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DRIVE_MOTOR1_PWM2_Pin|DRIVE_MOTOR1_PWM1_Pin|DRIVE_MOTOR2_PWM2_Pin|DRIVE_MOTOR2_PWM1_Pin;
 8002ad2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ae8:	f107 031c 	add.w	r3, r7, #28
 8002aec:	4619      	mov	r1, r3
 8002aee:	481a      	ldr	r0, [pc, #104]	; (8002b58 <HAL_TIM_MspPostInit+0x14c>)
 8002af0:	f001 fa3a 	bl	8003f68 <HAL_GPIO_Init>
}
 8002af4:	e023      	b.n	8002b3e <HAL_TIM_MspPostInit+0x132>
  else if(htim->Instance==TIM12)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a18      	ldr	r2, [pc, #96]	; (8002b5c <HAL_TIM_MspPostInit+0x150>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d11e      	bne.n	8002b3e <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <HAL_TIM_MspPostInit+0x13c>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	4a0f      	ldr	r2, [pc, #60]	; (8002b48 <HAL_TIM_MspPostInit+0x13c>)
 8002b0a:	f043 0302 	orr.w	r3, r3, #2
 8002b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b10:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <HAL_TIM_MspPostInit+0x13c>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DRONE_MOTOR_PWM4_Pin|DRONE_MOTOR_PWM3_Pin;
 8002b1c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002b2e:	2309      	movs	r3, #9
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b32:	f107 031c 	add.w	r3, r7, #28
 8002b36:	4619      	mov	r1, r3
 8002b38:	4804      	ldr	r0, [pc, #16]	; (8002b4c <HAL_TIM_MspPostInit+0x140>)
 8002b3a:	f001 fa15 	bl	8003f68 <HAL_GPIO_Init>
}
 8002b3e:	bf00      	nop
 8002b40:	3730      	adds	r7, #48	; 0x30
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40020400 	.word	0x40020400
 8002b50:	40020000 	.word	0x40020000
 8002b54:	40010400 	.word	0x40010400
 8002b58:	40020800 	.word	0x40020800
 8002b5c:	40001800 	.word	0x40001800

08002b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	; 0x28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a19      	ldr	r2, [pc, #100]	; (8002be4 <HAL_UART_MspInit+0x84>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d12c      	bne.n	8002bdc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <HAL_UART_MspInit+0x88>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	4a17      	ldr	r2, [pc, #92]	; (8002be8 <HAL_UART_MspInit+0x88>)
 8002b8c:	f043 0310 	orr.w	r3, r3, #16
 8002b90:	6453      	str	r3, [r2, #68]	; 0x44
 8002b92:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <HAL_UART_MspInit+0x88>)
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <HAL_UART_MspInit+0x88>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <HAL_UART_MspInit+0x88>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <HAL_UART_MspInit+0x88>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002bba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bcc:	2307      	movs	r3, #7
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4805      	ldr	r0, [pc, #20]	; (8002bec <HAL_UART_MspInit+0x8c>)
 8002bd8:	f001 f9c6 	bl	8003f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bdc:	bf00      	nop
 8002bde:	3728      	adds	r7, #40	; 0x28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40011000 	.word	0x40011000
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40020000 	.word	0x40020000

08002bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bf4:	e7fe      	b.n	8002bf4 <NMI_Handler+0x4>

08002bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bfa:	e7fe      	b.n	8002bfa <HardFault_Handler+0x4>

08002bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c00:	e7fe      	b.n	8002c00 <MemManage_Handler+0x4>

08002c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c06:	e7fe      	b.n	8002c06 <BusFault_Handler+0x4>

08002c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c0c:	e7fe      	b.n	8002c0c <UsageFault_Handler+0x4>

08002c0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c3c:	f000 f8bc 	bl	8002db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002c48:	4802      	ldr	r0, [pc, #8]	; (8002c54 <SPI3_IRQHandler+0x10>)
 8002c4a:	f002 fad3 	bl	80051f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200001c8 	.word	0x200001c8

08002c58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c5c:	4802      	ldr	r0, [pc, #8]	; (8002c68 <TIM6_DAC_IRQHandler+0x10>)
 8002c5e:	f002 fddd 	bl	800581c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000400 	.word	0x20000400

08002c6c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c70:	4802      	ldr	r0, [pc, #8]	; (8002c7c <TIM7_IRQHandler+0x10>)
 8002c72:	f002 fdd3 	bl	800581c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200004c4 	.word	0x200004c4

08002c80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <DMA2_Stream0_IRQHandler+0x10>)
 8002c86:	f000 ff07 	bl	8003a98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200003a0 	.word	0x200003a0

08002c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <SystemInit+0x28>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	4a07      	ldr	r2, [pc, #28]	; (8002cbc <SystemInit+0x28>)
 8002ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <SystemInit+0x28>)
 8002caa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cae:	609a      	str	r2, [r3, #8]
#endif
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cf8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002cc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002cc6:	e003      	b.n	8002cd0 <LoopCopyDataInit>

08002cc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002cca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ccc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002cce:	3104      	adds	r1, #4

08002cd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002cd0:	480b      	ldr	r0, [pc, #44]	; (8002d00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002cd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002cd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002cd8:	d3f6      	bcc.n	8002cc8 <CopyDataInit>
  ldr  r2, =_sbss
 8002cda:	4a0b      	ldr	r2, [pc, #44]	; (8002d08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002cdc:	e002      	b.n	8002ce4 <LoopFillZerobss>

08002cde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002cde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ce0:	f842 3b04 	str.w	r3, [r2], #4

08002ce4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ce4:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ce6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ce8:	d3f9      	bcc.n	8002cde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cea:	f7ff ffd3 	bl	8002c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cee:	f003 fead 	bl	8006a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cf2:	f7fe fe0b 	bl	800190c <main>
  bx  lr    
 8002cf6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002cf8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002cfc:	08006aec 	.word	0x08006aec
  ldr  r0, =_sdata
 8002d00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d04:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002d08:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002d0c:	20000508 	.word	0x20000508

08002d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d10:	e7fe      	b.n	8002d10 <ADC_IRQHandler>
	...

08002d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d18:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <HAL_Init+0x40>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0d      	ldr	r2, [pc, #52]	; (8002d54 <HAL_Init+0x40>)
 8002d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_Init+0x40>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <HAL_Init+0x40>)
 8002d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d30:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <HAL_Init+0x40>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <HAL_Init+0x40>)
 8002d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d3c:	2003      	movs	r0, #3
 8002d3e:	f000 fd41 	bl	80037c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d42:	2000      	movs	r0, #0
 8002d44:	f000 f808 	bl	8002d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d48:	f7ff fbe2 	bl	8002510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023c00 	.word	0x40023c00

08002d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d60:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_InitTick+0x54>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <HAL_InitTick+0x58>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fd59 	bl	800382e <HAL_SYSTICK_Config>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e00e      	b.n	8002da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b0f      	cmp	r3, #15
 8002d8a:	d80a      	bhi.n	8002da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	f04f 30ff 	mov.w	r0, #4294967295
 8002d94:	f000 fd21 	bl	80037da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d98:	4a06      	ldr	r2, [pc, #24]	; (8002db4 <HAL_InitTick+0x5c>)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	e000      	b.n	8002da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000000 	.word	0x20000000
 8002db0:	20000008 	.word	0x20000008
 8002db4:	20000004 	.word	0x20000004

08002db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_IncTick+0x20>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_IncTick+0x24>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <HAL_IncTick+0x24>)
 8002dca:	6013      	str	r3, [r2, #0]
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20000008 	.word	0x20000008
 8002ddc:	20000504 	.word	0x20000504

08002de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  return uwTick;
 8002de4:	4b03      	ldr	r3, [pc, #12]	; (8002df4 <HAL_GetTick+0x14>)
 8002de6:	681b      	ldr	r3, [r3, #0]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	20000504 	.word	0x20000504

08002df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e00:	f7ff ffee 	bl	8002de0 <HAL_GetTick>
 8002e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d005      	beq.n	8002e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_Delay+0x40>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e1e:	bf00      	nop
 8002e20:	f7ff ffde 	bl	8002de0 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d8f7      	bhi.n	8002e20 <HAL_Delay+0x28>
  {
  }
}
 8002e30:	bf00      	nop
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20000008 	.word	0x20000008

08002e3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e033      	b.n	8002eba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff fb80 	bl	8002560 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d118      	bne.n	8002eac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e82:	f023 0302 	bic.w	r3, r3, #2
 8002e86:	f043 0202 	orr.w	r2, r3, #2
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fa4a 	bl	8003328 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f023 0303 	bic.w	r3, r3, #3
 8002ea2:	f043 0201 	orr.w	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
 8002eaa:	e001      	b.n	8002eb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_ADC_Start_DMA+0x1e>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e0cc      	b.n	800307c <HAL_ADC_Start_DMA+0x1b8>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d018      	beq.n	8002f2a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f08:	4b5e      	ldr	r3, [pc, #376]	; (8003084 <HAL_ADC_Start_DMA+0x1c0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a5e      	ldr	r2, [pc, #376]	; (8003088 <HAL_ADC_Start_DMA+0x1c4>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	0c9a      	lsrs	r2, r3, #18
 8002f14:	4613      	mov	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4413      	add	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f1c:	e002      	b.n	8002f24 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f9      	bne.n	8002f1e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	f040 80a0 	bne.w	800307a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f78:	d106      	bne.n	8002f88 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	f023 0206 	bic.w	r2, r3, #6
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	645a      	str	r2, [r3, #68]	; 0x44
 8002f86:	e002      	b.n	8002f8e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f96:	4b3d      	ldr	r3, [pc, #244]	; (800308c <HAL_ADC_Start_DMA+0x1c8>)
 8002f98:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9e:	4a3c      	ldr	r2, [pc, #240]	; (8003090 <HAL_ADC_Start_DMA+0x1cc>)
 8002fa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	4a3b      	ldr	r2, [pc, #236]	; (8003094 <HAL_ADC_Start_DMA+0x1d0>)
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	4a3a      	ldr	r2, [pc, #232]	; (8003098 <HAL_ADC_Start_DMA+0x1d4>)
 8002fb0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002fba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002fca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fda:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	334c      	adds	r3, #76	; 0x4c
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f000 fcda 	bl	80039a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d12a      	bne.n	8003052 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a26      	ldr	r2, [pc, #152]	; (800309c <HAL_ADC_Start_DMA+0x1d8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d015      	beq.n	8003032 <HAL_ADC_Start_DMA+0x16e>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a25      	ldr	r2, [pc, #148]	; (80030a0 <HAL_ADC_Start_DMA+0x1dc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d105      	bne.n	800301c <HAL_ADC_Start_DMA+0x158>
 8003010:	4b1e      	ldr	r3, [pc, #120]	; (800308c <HAL_ADC_Start_DMA+0x1c8>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a20      	ldr	r2, [pc, #128]	; (80030a4 <HAL_ADC_Start_DMA+0x1e0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d129      	bne.n	800307a <HAL_ADC_Start_DMA+0x1b6>
 8003026:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_ADC_Start_DMA+0x1c8>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	2b0f      	cmp	r3, #15
 8003030:	d823      	bhi.n	800307a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d11c      	bne.n	800307a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	e013      	b.n	800307a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a11      	ldr	r2, [pc, #68]	; (800309c <HAL_ADC_Start_DMA+0x1d8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d10e      	bne.n	800307a <HAL_ADC_Start_DMA+0x1b6>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d107      	bne.n	800307a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003078:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000000 	.word	0x20000000
 8003088:	431bde83 	.word	0x431bde83
 800308c:	40012300 	.word	0x40012300
 8003090:	08003521 	.word	0x08003521
 8003094:	080035db 	.word	0x080035db
 8003098:	080035f7 	.word	0x080035f7
 800309c:	40012000 	.word	0x40012000
 80030a0:	40012100 	.word	0x40012100
 80030a4:	40012200 	.word	0x40012200

080030a8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x1c>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e105      	b.n	800330c <HAL_ADC_ConfigChannel+0x228>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b09      	cmp	r3, #9
 800310e:	d925      	bls.n	800315c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68d9      	ldr	r1, [r3, #12]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	b29b      	uxth	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	4613      	mov	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4413      	add	r3, r2
 8003124:	3b1e      	subs	r3, #30
 8003126:	2207      	movs	r2, #7
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43da      	mvns	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	400a      	ands	r2, r1
 8003134:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68d9      	ldr	r1, [r3, #12]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	b29b      	uxth	r3, r3
 8003146:	4618      	mov	r0, r3
 8003148:	4603      	mov	r3, r0
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4403      	add	r3, r0
 800314e:	3b1e      	subs	r3, #30
 8003150:	409a      	lsls	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	e022      	b.n	80031a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6919      	ldr	r1, [r3, #16]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	b29b      	uxth	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	2207      	movs	r2, #7
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43da      	mvns	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	400a      	ands	r2, r1
 800317e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6919      	ldr	r1, [r3, #16]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	b29b      	uxth	r3, r3
 8003190:	4618      	mov	r0, r3
 8003192:	4603      	mov	r3, r0
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4403      	add	r3, r0
 8003198:	409a      	lsls	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b06      	cmp	r3, #6
 80031a8:	d824      	bhi.n	80031f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	3b05      	subs	r3, #5
 80031bc:	221f      	movs	r2, #31
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43da      	mvns	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	400a      	ands	r2, r1
 80031ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	4618      	mov	r0, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	3b05      	subs	r3, #5
 80031e6:	fa00 f203 	lsl.w	r2, r0, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	635a      	str	r2, [r3, #52]	; 0x34
 80031f2:	e04c      	b.n	800328e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b0c      	cmp	r3, #12
 80031fa:	d824      	bhi.n	8003246 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	3b23      	subs	r3, #35	; 0x23
 800320e:	221f      	movs	r2, #31
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43da      	mvns	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	400a      	ands	r2, r1
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	4618      	mov	r0, r3
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	3b23      	subs	r3, #35	; 0x23
 8003238:	fa00 f203 	lsl.w	r2, r0, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
 8003244:	e023      	b.n	800328e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	3b41      	subs	r3, #65	; 0x41
 8003258:	221f      	movs	r2, #31
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43da      	mvns	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	400a      	ands	r2, r1
 8003266:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	4618      	mov	r0, r3
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	3b41      	subs	r3, #65	; 0x41
 8003282:	fa00 f203 	lsl.w	r2, r0, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800328e:	4b22      	ldr	r3, [pc, #136]	; (8003318 <HAL_ADC_ConfigChannel+0x234>)
 8003290:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a21      	ldr	r2, [pc, #132]	; (800331c <HAL_ADC_ConfigChannel+0x238>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d109      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x1cc>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b12      	cmp	r3, #18
 80032a2:	d105      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a19      	ldr	r2, [pc, #100]	; (800331c <HAL_ADC_ConfigChannel+0x238>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d123      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x21e>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b10      	cmp	r3, #16
 80032c0:	d003      	beq.n	80032ca <HAL_ADC_ConfigChannel+0x1e6>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b11      	cmp	r3, #17
 80032c8:	d11b      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b10      	cmp	r3, #16
 80032dc:	d111      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <HAL_ADC_ConfigChannel+0x23c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a10      	ldr	r2, [pc, #64]	; (8003324 <HAL_ADC_ConfigChannel+0x240>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	0c9a      	lsrs	r2, r3, #18
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032f4:	e002      	b.n	80032fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f9      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	40012300 	.word	0x40012300
 800331c:	40012000 	.word	0x40012000
 8003320:	20000000 	.word	0x20000000
 8003324:	431bde83 	.word	0x431bde83

08003328 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003330:	4b79      	ldr	r3, [pc, #484]	; (8003518 <ADC_Init+0x1f0>)
 8003332:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	431a      	orrs	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800335c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6859      	ldr	r1, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	021a      	lsls	r2, r3, #8
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6899      	ldr	r1, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	4a58      	ldr	r2, [pc, #352]	; (800351c <ADC_Init+0x1f4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d022      	beq.n	8003406 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6899      	ldr	r1, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6899      	ldr	r1, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	e00f      	b.n	8003426 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003424:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0202 	bic.w	r2, r2, #2
 8003434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6899      	ldr	r1, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	7e1b      	ldrb	r3, [r3, #24]
 8003440:	005a      	lsls	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01b      	beq.n	800348c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003462:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003472:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6859      	ldr	r1, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	3b01      	subs	r3, #1
 8003480:	035a      	lsls	r2, r3, #13
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	e007      	b.n	800349c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800349a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	051a      	lsls	r2, r3, #20
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6899      	ldr	r1, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034de:	025a      	lsls	r2, r3, #9
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6899      	ldr	r1, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	029a      	lsls	r2, r3, #10
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	609a      	str	r2, [r3, #8]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	40012300 	.word	0x40012300
 800351c:	0f000001 	.word	0x0f000001

08003520 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003536:	2b00      	cmp	r3, #0
 8003538:	d13c      	bne.n	80035b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d12b      	bne.n	80035ac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003558:	2b00      	cmp	r3, #0
 800355a:	d127      	bne.n	80035ac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003566:	2b00      	cmp	r3, #0
 8003568:	d006      	beq.n	8003578 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003574:	2b00      	cmp	r3, #0
 8003576:	d119      	bne.n	80035ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0220 	bic.w	r2, r2, #32
 8003586:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d105      	bne.n	80035ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	f043 0201 	orr.w	r2, r3, #1
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f7ff fd7b 	bl	80030a8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035b2:	e00e      	b.n	80035d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7ff fd85 	bl	80030d0 <HAL_ADC_ErrorCallback>
}
 80035c6:	e004      	b.n	80035d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	4798      	blx	r3
}
 80035d2:	bf00      	nop
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f7ff fd67 	bl	80030bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035ee:	bf00      	nop
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003602:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2240      	movs	r2, #64	; 0x40
 8003608:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	f043 0204 	orr.w	r2, r3, #4
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f7ff fd5a 	bl	80030d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800361c:	bf00      	nop
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <__NVIC_SetPriorityGrouping+0x44>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003640:	4013      	ands	r3, r2
 8003642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800364c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003656:	4a04      	ldr	r2, [pc, #16]	; (8003668 <__NVIC_SetPriorityGrouping+0x44>)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	60d3      	str	r3, [r2, #12]
}
 800365c:	bf00      	nop
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003670:	4b04      	ldr	r3, [pc, #16]	; (8003684 <__NVIC_GetPriorityGrouping+0x18>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	0a1b      	lsrs	r3, r3, #8
 8003676:	f003 0307 	and.w	r3, r3, #7
}
 800367a:	4618      	mov	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003696:	2b00      	cmp	r3, #0
 8003698:	db0b      	blt.n	80036b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	f003 021f 	and.w	r2, r3, #31
 80036a0:	4907      	ldr	r1, [pc, #28]	; (80036c0 <__NVIC_EnableIRQ+0x38>)
 80036a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	2001      	movs	r0, #1
 80036aa:	fa00 f202 	lsl.w	r2, r0, r2
 80036ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	e000e100 	.word	0xe000e100

080036c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	6039      	str	r1, [r7, #0]
 80036ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	db0a      	blt.n	80036ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	490c      	ldr	r1, [pc, #48]	; (8003710 <__NVIC_SetPriority+0x4c>)
 80036de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e2:	0112      	lsls	r2, r2, #4
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	440b      	add	r3, r1
 80036e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036ec:	e00a      	b.n	8003704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	4908      	ldr	r1, [pc, #32]	; (8003714 <__NVIC_SetPriority+0x50>)
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	3b04      	subs	r3, #4
 80036fc:	0112      	lsls	r2, r2, #4
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	440b      	add	r3, r1
 8003702:	761a      	strb	r2, [r3, #24]
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	e000e100 	.word	0xe000e100
 8003714:	e000ed00 	.word	0xe000ed00

08003718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003718:	b480      	push	{r7}
 800371a:	b089      	sub	sp, #36	; 0x24
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f1c3 0307 	rsb	r3, r3, #7
 8003732:	2b04      	cmp	r3, #4
 8003734:	bf28      	it	cs
 8003736:	2304      	movcs	r3, #4
 8003738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	3304      	adds	r3, #4
 800373e:	2b06      	cmp	r3, #6
 8003740:	d902      	bls.n	8003748 <NVIC_EncodePriority+0x30>
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	3b03      	subs	r3, #3
 8003746:	e000      	b.n	800374a <NVIC_EncodePriority+0x32>
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800374c:	f04f 32ff 	mov.w	r2, #4294967295
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43da      	mvns	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	401a      	ands	r2, r3
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003760:	f04f 31ff 	mov.w	r1, #4294967295
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	fa01 f303 	lsl.w	r3, r1, r3
 800376a:	43d9      	mvns	r1, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003770:	4313      	orrs	r3, r2
         );
}
 8003772:	4618      	mov	r0, r3
 8003774:	3724      	adds	r7, #36	; 0x24
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
	...

08003780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3b01      	subs	r3, #1
 800378c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003790:	d301      	bcc.n	8003796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003792:	2301      	movs	r3, #1
 8003794:	e00f      	b.n	80037b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003796:	4a0a      	ldr	r2, [pc, #40]	; (80037c0 <SysTick_Config+0x40>)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3b01      	subs	r3, #1
 800379c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800379e:	210f      	movs	r1, #15
 80037a0:	f04f 30ff 	mov.w	r0, #4294967295
 80037a4:	f7ff ff8e 	bl	80036c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <SysTick_Config+0x40>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ae:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <SysTick_Config+0x40>)
 80037b0:	2207      	movs	r2, #7
 80037b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	e000e010 	.word	0xe000e010

080037c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff ff29 	bl	8003624 <__NVIC_SetPriorityGrouping>
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037da:	b580      	push	{r7, lr}
 80037dc:	b086      	sub	sp, #24
 80037de:	af00      	add	r7, sp, #0
 80037e0:	4603      	mov	r3, r0
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037ec:	f7ff ff3e 	bl	800366c <__NVIC_GetPriorityGrouping>
 80037f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	6978      	ldr	r0, [r7, #20]
 80037f8:	f7ff ff8e 	bl	8003718 <NVIC_EncodePriority>
 80037fc:	4602      	mov	r2, r0
 80037fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003802:	4611      	mov	r1, r2
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff ff5d 	bl	80036c4 <__NVIC_SetPriority>
}
 800380a:	bf00      	nop
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	4603      	mov	r3, r0
 800381a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800381c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff ff31 	bl	8003688 <__NVIC_EnableIRQ>
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff ffa2 	bl	8003780 <SysTick_Config>
 800383c:	4603      	mov	r3, r0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003854:	f7ff fac4 	bl	8002de0 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e099      	b.n	8003998 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003884:	e00f      	b.n	80038a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003886:	f7ff faab 	bl	8002de0 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b05      	cmp	r3, #5
 8003892:	d908      	bls.n	80038a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2203      	movs	r2, #3
 800389e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e078      	b.n	8003998 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1e8      	bne.n	8003886 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	4b38      	ldr	r3, [pc, #224]	; (80039a0 <HAL_DMA_Init+0x158>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d107      	bne.n	8003910 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	4313      	orrs	r3, r2
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f023 0307 	bic.w	r3, r3, #7
 8003926:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	2b04      	cmp	r3, #4
 8003938:	d117      	bne.n	800396a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00e      	beq.n	800396a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fa91 	bl	8003e74 <DMA_CheckFifoParam>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2240      	movs	r2, #64	; 0x40
 800395c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003966:	2301      	movs	r3, #1
 8003968:	e016      	b.n	8003998 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fa48 	bl	8003e08 <DMA_CalcBaseAndBitshift>
 8003978:	4603      	mov	r3, r0
 800397a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	223f      	movs	r2, #63	; 0x3f
 8003982:	409a      	lsls	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	f010803f 	.word	0xf010803f

080039a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_DMA_Start_IT+0x26>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e040      	b.n	8003a4c <HAL_DMA_Start_IT+0xa8>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d12f      	bne.n	8003a3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2202      	movs	r2, #2
 80039e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f9da 	bl	8003dac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fc:	223f      	movs	r2, #63	; 0x3f
 80039fe:	409a      	lsls	r2, r3
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0216 	orr.w	r2, r2, #22
 8003a12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d007      	beq.n	8003a2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0208 	orr.w	r2, r2, #8
 8003a2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0201 	orr.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	e005      	b.n	8003a4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a46:	2302      	movs	r3, #2
 8003a48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d004      	beq.n	8003a72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2280      	movs	r2, #128	; 0x80
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e00c      	b.n	8003a8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2205      	movs	r2, #5
 8003a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0201 	bic.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003aa4:	4b92      	ldr	r3, [pc, #584]	; (8003cf0 <HAL_DMA_IRQHandler+0x258>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a92      	ldr	r2, [pc, #584]	; (8003cf4 <HAL_DMA_IRQHandler+0x25c>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	0a9b      	lsrs	r3, r3, #10
 8003ab0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac2:	2208      	movs	r2, #8
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d01a      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d013      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0204 	bic.w	r2, r2, #4
 8003aea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af0:	2208      	movs	r2, #8
 8003af2:	409a      	lsls	r2, r3
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afc:	f043 0201 	orr.w	r2, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b08:	2201      	movs	r2, #1
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d012      	beq.n	8003b3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00b      	beq.n	8003b3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b26:	2201      	movs	r2, #1
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b32:	f043 0202 	orr.w	r2, r3, #2
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3e:	2204      	movs	r2, #4
 8003b40:	409a      	lsls	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d012      	beq.n	8003b70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00b      	beq.n	8003b70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b68:	f043 0204 	orr.w	r2, r3, #4
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b74:	2210      	movs	r2, #16
 8003b76:	409a      	lsls	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d043      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d03c      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b92:	2210      	movs	r2, #16
 8003b94:	409a      	lsls	r2, r3
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d018      	beq.n	8003bda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d108      	bne.n	8003bc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d024      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	4798      	blx	r3
 8003bc6:	e01f      	b.n	8003c08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01b      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	4798      	blx	r3
 8003bd8:	e016      	b.n	8003c08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d107      	bne.n	8003bf8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0208 	bic.w	r2, r2, #8
 8003bf6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 808e 	beq.w	8003d36 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 8086 	beq.w	8003d36 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2e:	2220      	movs	r2, #32
 8003c30:	409a      	lsls	r2, r3
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b05      	cmp	r3, #5
 8003c40:	d136      	bne.n	8003cb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0216 	bic.w	r2, r2, #22
 8003c50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695a      	ldr	r2, [r3, #20]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d103      	bne.n	8003c72 <HAL_DMA_IRQHandler+0x1da>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d007      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0208 	bic.w	r2, r2, #8
 8003c80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c86:	223f      	movs	r2, #63	; 0x3f
 8003c88:	409a      	lsls	r2, r3
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d07d      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	4798      	blx	r3
        }
        return;
 8003cae:	e078      	b.n	8003da2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d01c      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d108      	bne.n	8003cde <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d030      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	4798      	blx	r3
 8003cdc:	e02b      	b.n	8003d36 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d027      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	4798      	blx	r3
 8003cee:	e022      	b.n	8003d36 <HAL_DMA_IRQHandler+0x29e>
 8003cf0:	20000000 	.word	0x20000000
 8003cf4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10f      	bne.n	8003d26 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0210 	bic.w	r2, r2, #16
 8003d14:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d032      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d022      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2205      	movs	r2, #5
 8003d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0201 	bic.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	3301      	adds	r3, #1
 8003d66:	60bb      	str	r3, [r7, #8]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d307      	bcc.n	8003d7e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1f2      	bne.n	8003d62 <HAL_DMA_IRQHandler+0x2ca>
 8003d7c:	e000      	b.n	8003d80 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003d7e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	4798      	blx	r3
 8003da0:	e000      	b.n	8003da4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003da2:	bf00      	nop
    }
  }
}
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop

08003dac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b40      	cmp	r3, #64	; 0x40
 8003dd8:	d108      	bne.n	8003dec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003dea:	e007      	b.n	8003dfc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	60da      	str	r2, [r3, #12]
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	3b10      	subs	r3, #16
 8003e18:	4a14      	ldr	r2, [pc, #80]	; (8003e6c <DMA_CalcBaseAndBitshift+0x64>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	091b      	lsrs	r3, r3, #4
 8003e20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e22:	4a13      	ldr	r2, [pc, #76]	; (8003e70 <DMA_CalcBaseAndBitshift+0x68>)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4413      	add	r3, r2
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d909      	bls.n	8003e4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e3e:	f023 0303 	bic.w	r3, r3, #3
 8003e42:	1d1a      	adds	r2, r3, #4
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	659a      	str	r2, [r3, #88]	; 0x58
 8003e48:	e007      	b.n	8003e5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e52:	f023 0303 	bic.w	r3, r3, #3
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	aaaaaaab 	.word	0xaaaaaaab
 8003e70:	08006ad4 	.word	0x08006ad4

08003e74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d11f      	bne.n	8003ece <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d855      	bhi.n	8003f40 <DMA_CheckFifoParam+0xcc>
 8003e94:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <DMA_CheckFifoParam+0x28>)
 8003e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9a:	bf00      	nop
 8003e9c:	08003ead 	.word	0x08003ead
 8003ea0:	08003ebf 	.word	0x08003ebf
 8003ea4:	08003ead 	.word	0x08003ead
 8003ea8:	08003f41 	.word	0x08003f41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d045      	beq.n	8003f44 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ebc:	e042      	b.n	8003f44 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ec6:	d13f      	bne.n	8003f48 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ecc:	e03c      	b.n	8003f48 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed6:	d121      	bne.n	8003f1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d836      	bhi.n	8003f4c <DMA_CheckFifoParam+0xd8>
 8003ede:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <DMA_CheckFifoParam+0x70>)
 8003ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee4:	08003ef5 	.word	0x08003ef5
 8003ee8:	08003efb 	.word	0x08003efb
 8003eec:	08003ef5 	.word	0x08003ef5
 8003ef0:	08003f0d 	.word	0x08003f0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef8:	e02f      	b.n	8003f5a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d024      	beq.n	8003f50 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f0a:	e021      	b.n	8003f50 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f14:	d11e      	bne.n	8003f54 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f1a:	e01b      	b.n	8003f54 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d902      	bls.n	8003f28 <DMA_CheckFifoParam+0xb4>
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d003      	beq.n	8003f2e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f26:	e018      	b.n	8003f5a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f2c:	e015      	b.n	8003f5a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00e      	beq.n	8003f58 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f3e:	e00b      	b.n	8003f58 <DMA_CheckFifoParam+0xe4>
      break;
 8003f40:	bf00      	nop
 8003f42:	e00a      	b.n	8003f5a <DMA_CheckFifoParam+0xe6>
      break;
 8003f44:	bf00      	nop
 8003f46:	e008      	b.n	8003f5a <DMA_CheckFifoParam+0xe6>
      break;
 8003f48:	bf00      	nop
 8003f4a:	e006      	b.n	8003f5a <DMA_CheckFifoParam+0xe6>
      break;
 8003f4c:	bf00      	nop
 8003f4e:	e004      	b.n	8003f5a <DMA_CheckFifoParam+0xe6>
      break;
 8003f50:	bf00      	nop
 8003f52:	e002      	b.n	8003f5a <DMA_CheckFifoParam+0xe6>
      break;   
 8003f54:	bf00      	nop
 8003f56:	e000      	b.n	8003f5a <DMA_CheckFifoParam+0xe6>
      break;
 8003f58:	bf00      	nop
    }
  } 
  
  return status; 
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b089      	sub	sp, #36	; 0x24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	e16b      	b.n	800425c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f84:	2201      	movs	r2, #1
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4013      	ands	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	f040 815a 	bne.w	8004256 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_GPIO_Init+0x5a>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d007      	beq.n	8003fc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fb6:	2b11      	cmp	r3, #17
 8003fb8:	d003      	beq.n	8003fc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b12      	cmp	r3, #18
 8003fc0:	d130      	bne.n	8004024 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	2203      	movs	r2, #3
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4013      	ands	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	091b      	lsrs	r3, r3, #4
 800400e:	f003 0201 	and.w	r2, r3, #1
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4313      	orrs	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	2203      	movs	r2, #3
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4013      	ands	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4313      	orrs	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d003      	beq.n	8004064 <HAL_GPIO_Init+0xfc>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b12      	cmp	r3, #18
 8004062:	d123      	bne.n	80040ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	08da      	lsrs	r2, r3, #3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3208      	adds	r2, #8
 800406c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	220f      	movs	r2, #15
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4013      	ands	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	08da      	lsrs	r2, r3, #3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3208      	adds	r2, #8
 80040a6:	69b9      	ldr	r1, [r7, #24]
 80040a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	2203      	movs	r2, #3
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	43db      	mvns	r3, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0203 	and.w	r2, r3, #3
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 80b4 	beq.w	8004256 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	4b5f      	ldr	r3, [pc, #380]	; (8004270 <HAL_GPIO_Init+0x308>)
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	4a5e      	ldr	r2, [pc, #376]	; (8004270 <HAL_GPIO_Init+0x308>)
 80040f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040fc:	6453      	str	r3, [r2, #68]	; 0x44
 80040fe:	4b5c      	ldr	r3, [pc, #368]	; (8004270 <HAL_GPIO_Init+0x308>)
 8004100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800410a:	4a5a      	ldr	r2, [pc, #360]	; (8004274 <HAL_GPIO_Init+0x30c>)
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	089b      	lsrs	r3, r3, #2
 8004110:	3302      	adds	r3, #2
 8004112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	220f      	movs	r2, #15
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4013      	ands	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a51      	ldr	r2, [pc, #324]	; (8004278 <HAL_GPIO_Init+0x310>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d02b      	beq.n	800418e <HAL_GPIO_Init+0x226>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a50      	ldr	r2, [pc, #320]	; (800427c <HAL_GPIO_Init+0x314>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d025      	beq.n	800418a <HAL_GPIO_Init+0x222>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a4f      	ldr	r2, [pc, #316]	; (8004280 <HAL_GPIO_Init+0x318>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d01f      	beq.n	8004186 <HAL_GPIO_Init+0x21e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a4e      	ldr	r2, [pc, #312]	; (8004284 <HAL_GPIO_Init+0x31c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d019      	beq.n	8004182 <HAL_GPIO_Init+0x21a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a4d      	ldr	r2, [pc, #308]	; (8004288 <HAL_GPIO_Init+0x320>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d013      	beq.n	800417e <HAL_GPIO_Init+0x216>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a4c      	ldr	r2, [pc, #304]	; (800428c <HAL_GPIO_Init+0x324>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00d      	beq.n	800417a <HAL_GPIO_Init+0x212>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a4b      	ldr	r2, [pc, #300]	; (8004290 <HAL_GPIO_Init+0x328>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d007      	beq.n	8004176 <HAL_GPIO_Init+0x20e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a4a      	ldr	r2, [pc, #296]	; (8004294 <HAL_GPIO_Init+0x32c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d101      	bne.n	8004172 <HAL_GPIO_Init+0x20a>
 800416e:	2307      	movs	r3, #7
 8004170:	e00e      	b.n	8004190 <HAL_GPIO_Init+0x228>
 8004172:	2308      	movs	r3, #8
 8004174:	e00c      	b.n	8004190 <HAL_GPIO_Init+0x228>
 8004176:	2306      	movs	r3, #6
 8004178:	e00a      	b.n	8004190 <HAL_GPIO_Init+0x228>
 800417a:	2305      	movs	r3, #5
 800417c:	e008      	b.n	8004190 <HAL_GPIO_Init+0x228>
 800417e:	2304      	movs	r3, #4
 8004180:	e006      	b.n	8004190 <HAL_GPIO_Init+0x228>
 8004182:	2303      	movs	r3, #3
 8004184:	e004      	b.n	8004190 <HAL_GPIO_Init+0x228>
 8004186:	2302      	movs	r3, #2
 8004188:	e002      	b.n	8004190 <HAL_GPIO_Init+0x228>
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <HAL_GPIO_Init+0x228>
 800418e:	2300      	movs	r3, #0
 8004190:	69fa      	ldr	r2, [r7, #28]
 8004192:	f002 0203 	and.w	r2, r2, #3
 8004196:	0092      	lsls	r2, r2, #2
 8004198:	4093      	lsls	r3, r2
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4313      	orrs	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041a0:	4934      	ldr	r1, [pc, #208]	; (8004274 <HAL_GPIO_Init+0x30c>)
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	089b      	lsrs	r3, r3, #2
 80041a6:	3302      	adds	r3, #2
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041ae:	4b3a      	ldr	r3, [pc, #232]	; (8004298 <HAL_GPIO_Init+0x330>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041d2:	4a31      	ldr	r2, [pc, #196]	; (8004298 <HAL_GPIO_Init+0x330>)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80041d8:	4b2f      	ldr	r3, [pc, #188]	; (8004298 <HAL_GPIO_Init+0x330>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	43db      	mvns	r3, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041fc:	4a26      	ldr	r2, [pc, #152]	; (8004298 <HAL_GPIO_Init+0x330>)
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004202:	4b25      	ldr	r3, [pc, #148]	; (8004298 <HAL_GPIO_Init+0x330>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	43db      	mvns	r3, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4013      	ands	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004226:	4a1c      	ldr	r2, [pc, #112]	; (8004298 <HAL_GPIO_Init+0x330>)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800422c:	4b1a      	ldr	r3, [pc, #104]	; (8004298 <HAL_GPIO_Init+0x330>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	43db      	mvns	r3, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4013      	ands	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004250:	4a11      	ldr	r2, [pc, #68]	; (8004298 <HAL_GPIO_Init+0x330>)
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	3301      	adds	r3, #1
 800425a:	61fb      	str	r3, [r7, #28]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	2b0f      	cmp	r3, #15
 8004260:	f67f ae90 	bls.w	8003f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004264:	bf00      	nop
 8004266:	3724      	adds	r7, #36	; 0x24
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	40023800 	.word	0x40023800
 8004274:	40013800 	.word	0x40013800
 8004278:	40020000 	.word	0x40020000
 800427c:	40020400 	.word	0x40020400
 8004280:	40020800 	.word	0x40020800
 8004284:	40020c00 	.word	0x40020c00
 8004288:	40021000 	.word	0x40021000
 800428c:	40021400 	.word	0x40021400
 8004290:	40021800 	.word	0x40021800
 8004294:	40021c00 	.word	0x40021c00
 8004298:	40013c00 	.word	0x40013c00

0800429c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	887b      	ldrh	r3, [r7, #2]
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
 80042b8:	e001      	b.n	80042be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042ba:	2300      	movs	r3, #0
 80042bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042be:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	807b      	strh	r3, [r7, #2]
 80042d8:	4613      	mov	r3, r2
 80042da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042dc:	787b      	ldrb	r3, [r7, #1]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042e2:	887a      	ldrh	r2, [r7, #2]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042e8:	e003      	b.n	80042f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042ea:	887b      	ldrh	r3, [r7, #2]
 80042ec:	041a      	lsls	r2, r3, #16
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	619a      	str	r2, [r3, #24]
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e11f      	b.n	8004552 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fe f9ca 	bl	80026c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2224      	movs	r2, #36	; 0x24
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0201 	bic.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004352:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004362:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004364:	f000 fd18 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8004368:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4a7b      	ldr	r2, [pc, #492]	; (800455c <HAL_I2C_Init+0x25c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d807      	bhi.n	8004384 <HAL_I2C_Init+0x84>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4a7a      	ldr	r2, [pc, #488]	; (8004560 <HAL_I2C_Init+0x260>)
 8004378:	4293      	cmp	r3, r2
 800437a:	bf94      	ite	ls
 800437c:	2301      	movls	r3, #1
 800437e:	2300      	movhi	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	e006      	b.n	8004392 <HAL_I2C_Init+0x92>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4a77      	ldr	r2, [pc, #476]	; (8004564 <HAL_I2C_Init+0x264>)
 8004388:	4293      	cmp	r3, r2
 800438a:	bf94      	ite	ls
 800438c:	2301      	movls	r3, #1
 800438e:	2300      	movhi	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e0db      	b.n	8004552 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4a72      	ldr	r2, [pc, #456]	; (8004568 <HAL_I2C_Init+0x268>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	0c9b      	lsrs	r3, r3, #18
 80043a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	4a64      	ldr	r2, [pc, #400]	; (800455c <HAL_I2C_Init+0x25c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d802      	bhi.n	80043d4 <HAL_I2C_Init+0xd4>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	3301      	adds	r3, #1
 80043d2:	e009      	b.n	80043e8 <HAL_I2C_Init+0xe8>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043da:	fb02 f303 	mul.w	r3, r2, r3
 80043de:	4a63      	ldr	r2, [pc, #396]	; (800456c <HAL_I2C_Init+0x26c>)
 80043e0:	fba2 2303 	umull	r2, r3, r2, r3
 80043e4:	099b      	lsrs	r3, r3, #6
 80043e6:	3301      	adds	r3, #1
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6812      	ldr	r2, [r2, #0]
 80043ec:	430b      	orrs	r3, r1
 80043ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	4956      	ldr	r1, [pc, #344]	; (800455c <HAL_I2C_Init+0x25c>)
 8004404:	428b      	cmp	r3, r1
 8004406:	d80d      	bhi.n	8004424 <HAL_I2C_Init+0x124>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	1e59      	subs	r1, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	fbb1 f3f3 	udiv	r3, r1, r3
 8004416:	3301      	adds	r3, #1
 8004418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441c:	2b04      	cmp	r3, #4
 800441e:	bf38      	it	cc
 8004420:	2304      	movcc	r3, #4
 8004422:	e04f      	b.n	80044c4 <HAL_I2C_Init+0x1c4>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d111      	bne.n	8004450 <HAL_I2C_Init+0x150>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1e58      	subs	r0, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6859      	ldr	r1, [r3, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	440b      	add	r3, r1
 800443a:	fbb0 f3f3 	udiv	r3, r0, r3
 800443e:	3301      	adds	r3, #1
 8004440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf0c      	ite	eq
 8004448:	2301      	moveq	r3, #1
 800444a:	2300      	movne	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	e012      	b.n	8004476 <HAL_I2C_Init+0x176>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	1e58      	subs	r0, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6859      	ldr	r1, [r3, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	0099      	lsls	r1, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	fbb0 f3f3 	udiv	r3, r0, r3
 8004466:	3301      	adds	r3, #1
 8004468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446c:	2b00      	cmp	r3, #0
 800446e:	bf0c      	ite	eq
 8004470:	2301      	moveq	r3, #1
 8004472:	2300      	movne	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_I2C_Init+0x17e>
 800447a:	2301      	movs	r3, #1
 800447c:	e022      	b.n	80044c4 <HAL_I2C_Init+0x1c4>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10e      	bne.n	80044a4 <HAL_I2C_Init+0x1a4>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1e58      	subs	r0, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6859      	ldr	r1, [r3, #4]
 800448e:	460b      	mov	r3, r1
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	440b      	add	r3, r1
 8004494:	fbb0 f3f3 	udiv	r3, r0, r3
 8004498:	3301      	adds	r3, #1
 800449a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800449e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a2:	e00f      	b.n	80044c4 <HAL_I2C_Init+0x1c4>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	1e58      	subs	r0, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6859      	ldr	r1, [r3, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	0099      	lsls	r1, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ba:	3301      	adds	r3, #1
 80044bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	6809      	ldr	r1, [r1, #0]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69da      	ldr	r2, [r3, #28]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6911      	ldr	r1, [r2, #16]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68d2      	ldr	r2, [r2, #12]
 80044fe:	4311      	orrs	r1, r2
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	430b      	orrs	r3, r1
 8004506:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695a      	ldr	r2, [r3, #20]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	000186a0 	.word	0x000186a0
 8004560:	001e847f 	.word	0x001e847f
 8004564:	003d08ff 	.word	0x003d08ff
 8004568:	431bde83 	.word	0x431bde83
 800456c:	10624dd3 	.word	0x10624dd3

08004570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e25b      	b.n	8004a3a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d075      	beq.n	800467a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800458e:	4ba3      	ldr	r3, [pc, #652]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
 8004596:	2b04      	cmp	r3, #4
 8004598:	d00c      	beq.n	80045b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800459a:	4ba0      	ldr	r3, [pc, #640]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d112      	bne.n	80045cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045a6:	4b9d      	ldr	r3, [pc, #628]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b2:	d10b      	bne.n	80045cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b4:	4b99      	ldr	r3, [pc, #612]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d05b      	beq.n	8004678 <HAL_RCC_OscConfig+0x108>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d157      	bne.n	8004678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e236      	b.n	8004a3a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d4:	d106      	bne.n	80045e4 <HAL_RCC_OscConfig+0x74>
 80045d6:	4b91      	ldr	r3, [pc, #580]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a90      	ldr	r2, [pc, #576]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 80045dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	e01d      	b.n	8004620 <HAL_RCC_OscConfig+0xb0>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045ec:	d10c      	bne.n	8004608 <HAL_RCC_OscConfig+0x98>
 80045ee:	4b8b      	ldr	r3, [pc, #556]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a8a      	ldr	r2, [pc, #552]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 80045f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	4b88      	ldr	r3, [pc, #544]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a87      	ldr	r2, [pc, #540]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 8004600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	e00b      	b.n	8004620 <HAL_RCC_OscConfig+0xb0>
 8004608:	4b84      	ldr	r3, [pc, #528]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a83      	ldr	r2, [pc, #524]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 800460e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	4b81      	ldr	r3, [pc, #516]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a80      	ldr	r2, [pc, #512]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 800461a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800461e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d013      	beq.n	8004650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7fe fbda 	bl	8002de0 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004630:	f7fe fbd6 	bl	8002de0 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	; 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e1fb      	b.n	8004a3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004642:	4b76      	ldr	r3, [pc, #472]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0xc0>
 800464e:	e014      	b.n	800467a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004650:	f7fe fbc6 	bl	8002de0 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004658:	f7fe fbc2 	bl	8002de0 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	; 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e1e7      	b.n	8004a3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466a:	4b6c      	ldr	r3, [pc, #432]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0xe8>
 8004676:	e000      	b.n	800467a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d063      	beq.n	800474e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004686:	4b65      	ldr	r3, [pc, #404]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004692:	4b62      	ldr	r3, [pc, #392]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800469a:	2b08      	cmp	r3, #8
 800469c:	d11c      	bne.n	80046d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800469e:	4b5f      	ldr	r3, [pc, #380]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d116      	bne.n	80046d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046aa:	4b5c      	ldr	r3, [pc, #368]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <HAL_RCC_OscConfig+0x152>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d001      	beq.n	80046c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e1bb      	b.n	8004a3a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c2:	4b56      	ldr	r3, [pc, #344]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4952      	ldr	r1, [pc, #328]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046d6:	e03a      	b.n	800474e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d020      	beq.n	8004722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e0:	4b4f      	ldr	r3, [pc, #316]	; (8004820 <HAL_RCC_OscConfig+0x2b0>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e6:	f7fe fb7b 	bl	8002de0 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ee:	f7fe fb77 	bl	8002de0 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e19c      	b.n	8004a3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004700:	4b46      	ldr	r3, [pc, #280]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0f0      	beq.n	80046ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470c:	4b43      	ldr	r3, [pc, #268]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	4940      	ldr	r1, [pc, #256]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 800471c:	4313      	orrs	r3, r2
 800471e:	600b      	str	r3, [r1, #0]
 8004720:	e015      	b.n	800474e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004722:	4b3f      	ldr	r3, [pc, #252]	; (8004820 <HAL_RCC_OscConfig+0x2b0>)
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fe fb5a 	bl	8002de0 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004730:	f7fe fb56 	bl	8002de0 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e17b      	b.n	8004a3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004742:	4b36      	ldr	r3, [pc, #216]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d030      	beq.n	80047bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d016      	beq.n	8004790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004762:	4b30      	ldr	r3, [pc, #192]	; (8004824 <HAL_RCC_OscConfig+0x2b4>)
 8004764:	2201      	movs	r2, #1
 8004766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004768:	f7fe fb3a 	bl	8002de0 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004770:	f7fe fb36 	bl	8002de0 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e15b      	b.n	8004a3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004782:	4b26      	ldr	r3, [pc, #152]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 8004784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0f0      	beq.n	8004770 <HAL_RCC_OscConfig+0x200>
 800478e:	e015      	b.n	80047bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004790:	4b24      	ldr	r3, [pc, #144]	; (8004824 <HAL_RCC_OscConfig+0x2b4>)
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004796:	f7fe fb23 	bl	8002de0 <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800479c:	e008      	b.n	80047b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800479e:	f7fe fb1f 	bl	8002de0 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e144      	b.n	8004a3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b0:	4b1a      	ldr	r3, [pc, #104]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 80047b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1f0      	bne.n	800479e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80a0 	beq.w	800490a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ca:	2300      	movs	r3, #0
 80047cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ce:	4b13      	ldr	r3, [pc, #76]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10f      	bne.n	80047fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	4b0f      	ldr	r3, [pc, #60]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	4a0e      	ldr	r2, [pc, #56]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 80047e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ea:	4b0c      	ldr	r3, [pc, #48]	; (800481c <HAL_RCC_OscConfig+0x2ac>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f6:	2301      	movs	r3, #1
 80047f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047fa:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <HAL_RCC_OscConfig+0x2b8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004802:	2b00      	cmp	r3, #0
 8004804:	d121      	bne.n	800484a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004806:	4b08      	ldr	r3, [pc, #32]	; (8004828 <HAL_RCC_OscConfig+0x2b8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a07      	ldr	r2, [pc, #28]	; (8004828 <HAL_RCC_OscConfig+0x2b8>)
 800480c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004812:	f7fe fae5 	bl	8002de0 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004818:	e011      	b.n	800483e <HAL_RCC_OscConfig+0x2ce>
 800481a:	bf00      	nop
 800481c:	40023800 	.word	0x40023800
 8004820:	42470000 	.word	0x42470000
 8004824:	42470e80 	.word	0x42470e80
 8004828:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482c:	f7fe fad8 	bl	8002de0 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e0fd      	b.n	8004a3a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483e:	4b81      	ldr	r3, [pc, #516]	; (8004a44 <HAL_RCC_OscConfig+0x4d4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d106      	bne.n	8004860 <HAL_RCC_OscConfig+0x2f0>
 8004852:	4b7d      	ldr	r3, [pc, #500]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004856:	4a7c      	ldr	r2, [pc, #496]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	6713      	str	r3, [r2, #112]	; 0x70
 800485e:	e01c      	b.n	800489a <HAL_RCC_OscConfig+0x32a>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2b05      	cmp	r3, #5
 8004866:	d10c      	bne.n	8004882 <HAL_RCC_OscConfig+0x312>
 8004868:	4b77      	ldr	r3, [pc, #476]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486c:	4a76      	ldr	r2, [pc, #472]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 800486e:	f043 0304 	orr.w	r3, r3, #4
 8004872:	6713      	str	r3, [r2, #112]	; 0x70
 8004874:	4b74      	ldr	r3, [pc, #464]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 8004876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004878:	4a73      	ldr	r2, [pc, #460]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 800487a:	f043 0301 	orr.w	r3, r3, #1
 800487e:	6713      	str	r3, [r2, #112]	; 0x70
 8004880:	e00b      	b.n	800489a <HAL_RCC_OscConfig+0x32a>
 8004882:	4b71      	ldr	r3, [pc, #452]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004886:	4a70      	ldr	r2, [pc, #448]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 8004888:	f023 0301 	bic.w	r3, r3, #1
 800488c:	6713      	str	r3, [r2, #112]	; 0x70
 800488e:	4b6e      	ldr	r3, [pc, #440]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	4a6d      	ldr	r2, [pc, #436]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 8004894:	f023 0304 	bic.w	r3, r3, #4
 8004898:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d015      	beq.n	80048ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a2:	f7fe fa9d 	bl	8002de0 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a8:	e00a      	b.n	80048c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048aa:	f7fe fa99 	bl	8002de0 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e0bc      	b.n	8004a3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c0:	4b61      	ldr	r3, [pc, #388]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 80048c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0ee      	beq.n	80048aa <HAL_RCC_OscConfig+0x33a>
 80048cc:	e014      	b.n	80048f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ce:	f7fe fa87 	bl	8002de0 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048d4:	e00a      	b.n	80048ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048d6:	f7fe fa83 	bl	8002de0 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e0a6      	b.n	8004a3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ec:	4b56      	ldr	r3, [pc, #344]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 80048ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1ee      	bne.n	80048d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048f8:	7dfb      	ldrb	r3, [r7, #23]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d105      	bne.n	800490a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048fe:	4b52      	ldr	r3, [pc, #328]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	4a51      	ldr	r2, [pc, #324]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 8004904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004908:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 8092 	beq.w	8004a38 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004914:	4b4c      	ldr	r3, [pc, #304]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 030c 	and.w	r3, r3, #12
 800491c:	2b08      	cmp	r3, #8
 800491e:	d05c      	beq.n	80049da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	2b02      	cmp	r3, #2
 8004926:	d141      	bne.n	80049ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004928:	4b48      	ldr	r3, [pc, #288]	; (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492e:	f7fe fa57 	bl	8002de0 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004936:	f7fe fa53 	bl	8002de0 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e078      	b.n	8004a3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004948:	4b3f      	ldr	r3, [pc, #252]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1f0      	bne.n	8004936 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69da      	ldr	r2, [r3, #28]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	019b      	lsls	r3, r3, #6
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	085b      	lsrs	r3, r3, #1
 800496c:	3b01      	subs	r3, #1
 800496e:	041b      	lsls	r3, r3, #16
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	061b      	lsls	r3, r3, #24
 8004978:	4933      	ldr	r1, [pc, #204]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 800497a:	4313      	orrs	r3, r2
 800497c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800497e:	4b33      	ldr	r3, [pc, #204]	; (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 8004980:	2201      	movs	r2, #1
 8004982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004984:	f7fe fa2c 	bl	8002de0 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800498c:	f7fe fa28 	bl	8002de0 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e04d      	b.n	8004a3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499e:	4b2a      	ldr	r3, [pc, #168]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCC_OscConfig+0x41c>
 80049aa:	e045      	b.n	8004a38 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ac:	4b27      	ldr	r3, [pc, #156]	; (8004a4c <HAL_RCC_OscConfig+0x4dc>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b2:	f7fe fa15 	bl	8002de0 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ba:	f7fe fa11 	bl	8002de0 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e036      	b.n	8004a3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049cc:	4b1e      	ldr	r3, [pc, #120]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1f0      	bne.n	80049ba <HAL_RCC_OscConfig+0x44a>
 80049d8:	e02e      	b.n	8004a38 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e029      	b.n	8004a3a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049e6:	4b18      	ldr	r3, [pc, #96]	; (8004a48 <HAL_RCC_OscConfig+0x4d8>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d11c      	bne.n	8004a34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d115      	bne.n	8004a34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a0e:	4013      	ands	r3, r2
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d10d      	bne.n	8004a34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d106      	bne.n	8004a34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40007000 	.word	0x40007000
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	42470060 	.word	0x42470060

08004a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0cc      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a64:	4b68      	ldr	r3, [pc, #416]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 030f 	and.w	r3, r3, #15
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d90c      	bls.n	8004a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a72:	4b65      	ldr	r3, [pc, #404]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7a:	4b63      	ldr	r3, [pc, #396]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d001      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e0b8      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d020      	beq.n	8004ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004aa4:	4b59      	ldr	r3, [pc, #356]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	4a58      	ldr	r2, [pc, #352]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004aae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004abc:	4b53      	ldr	r3, [pc, #332]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	4a52      	ldr	r2, [pc, #328]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac8:	4b50      	ldr	r3, [pc, #320]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	494d      	ldr	r1, [pc, #308]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d044      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d107      	bne.n	8004afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aee:	4b47      	ldr	r3, [pc, #284]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d119      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e07f      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d003      	beq.n	8004b0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d107      	bne.n	8004b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b0e:	4b3f      	ldr	r3, [pc, #252]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e06f      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b1e:	4b3b      	ldr	r3, [pc, #236]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e067      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b2e:	4b37      	ldr	r3, [pc, #220]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f023 0203 	bic.w	r2, r3, #3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	4934      	ldr	r1, [pc, #208]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b40:	f7fe f94e 	bl	8002de0 <HAL_GetTick>
 8004b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b46:	e00a      	b.n	8004b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b48:	f7fe f94a 	bl	8002de0 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e04f      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b5e:	4b2b      	ldr	r3, [pc, #172]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 020c 	and.w	r2, r3, #12
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d1eb      	bne.n	8004b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b70:	4b25      	ldr	r3, [pc, #148]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d20c      	bcs.n	8004b98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b22      	ldr	r3, [pc, #136]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b86:	4b20      	ldr	r3, [pc, #128]	; (8004c08 <HAL_RCC_ClockConfig+0x1b8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e032      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba4:	4b19      	ldr	r3, [pc, #100]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4916      	ldr	r1, [pc, #88]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d009      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	490e      	ldr	r1, [pc, #56]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bd6:	f000 f821 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8004bda:	4601      	mov	r1, r0
 8004bdc:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <HAL_RCC_ClockConfig+0x1c0>)
 8004be8:	5cd3      	ldrb	r3, [r2, r3]
 8004bea:	fa21 f303 	lsr.w	r3, r1, r3
 8004bee:	4a09      	ldr	r2, [pc, #36]	; (8004c14 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bf2:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <HAL_RCC_ClockConfig+0x1c8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fe f8ae 	bl	8002d58 <HAL_InitTick>

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40023c00 	.word	0x40023c00
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	08006abc 	.word	0x08006abc
 8004c14:	20000000 	.word	0x20000000
 8004c18:	20000004 	.word	0x20000004

08004c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	607b      	str	r3, [r7, #4]
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c32:	4b50      	ldr	r3, [pc, #320]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x158>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 030c 	and.w	r3, r3, #12
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d007      	beq.n	8004c4e <HAL_RCC_GetSysClockFreq+0x32>
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d008      	beq.n	8004c54 <HAL_RCC_GetSysClockFreq+0x38>
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f040 808d 	bne.w	8004d62 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c48:	4b4b      	ldr	r3, [pc, #300]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004c4a:	60bb      	str	r3, [r7, #8]
       break;
 8004c4c:	e08c      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c4e:	4b4b      	ldr	r3, [pc, #300]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x160>)
 8004c50:	60bb      	str	r3, [r7, #8]
      break;
 8004c52:	e089      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c54:	4b47      	ldr	r3, [pc, #284]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x158>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c5c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c5e:	4b45      	ldr	r3, [pc, #276]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x158>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d023      	beq.n	8004cb2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c6a:	4b42      	ldr	r3, [pc, #264]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x158>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	099b      	lsrs	r3, r3, #6
 8004c70:	f04f 0400 	mov.w	r4, #0
 8004c74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	ea03 0501 	and.w	r5, r3, r1
 8004c80:	ea04 0602 	and.w	r6, r4, r2
 8004c84:	4a3d      	ldr	r2, [pc, #244]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x160>)
 8004c86:	fb02 f106 	mul.w	r1, r2, r6
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	fb02 f205 	mul.w	r2, r2, r5
 8004c90:	440a      	add	r2, r1
 8004c92:	493a      	ldr	r1, [pc, #232]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x160>)
 8004c94:	fba5 0101 	umull	r0, r1, r5, r1
 8004c98:	1853      	adds	r3, r2, r1
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f04f 0400 	mov.w	r4, #0
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	4623      	mov	r3, r4
 8004ca6:	f7fb fe85 	bl	80009b4 <__aeabi_uldivmod>
 8004caa:	4603      	mov	r3, r0
 8004cac:	460c      	mov	r4, r1
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	e049      	b.n	8004d46 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb2:	4b30      	ldr	r3, [pc, #192]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x158>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	099b      	lsrs	r3, r3, #6
 8004cb8:	f04f 0400 	mov.w	r4, #0
 8004cbc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	ea03 0501 	and.w	r5, r3, r1
 8004cc8:	ea04 0602 	and.w	r6, r4, r2
 8004ccc:	4629      	mov	r1, r5
 8004cce:	4632      	mov	r2, r6
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	f04f 0400 	mov.w	r4, #0
 8004cd8:	0154      	lsls	r4, r2, #5
 8004cda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004cde:	014b      	lsls	r3, r1, #5
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4622      	mov	r2, r4
 8004ce4:	1b49      	subs	r1, r1, r5
 8004ce6:	eb62 0206 	sbc.w	r2, r2, r6
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	f04f 0400 	mov.w	r4, #0
 8004cf2:	0194      	lsls	r4, r2, #6
 8004cf4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004cf8:	018b      	lsls	r3, r1, #6
 8004cfa:	1a5b      	subs	r3, r3, r1
 8004cfc:	eb64 0402 	sbc.w	r4, r4, r2
 8004d00:	f04f 0100 	mov.w	r1, #0
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	00e2      	lsls	r2, r4, #3
 8004d0a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d0e:	00d9      	lsls	r1, r3, #3
 8004d10:	460b      	mov	r3, r1
 8004d12:	4614      	mov	r4, r2
 8004d14:	195b      	adds	r3, r3, r5
 8004d16:	eb44 0406 	adc.w	r4, r4, r6
 8004d1a:	f04f 0100 	mov.w	r1, #0
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	02a2      	lsls	r2, r4, #10
 8004d24:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004d28:	0299      	lsls	r1, r3, #10
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4614      	mov	r4, r2
 8004d2e:	4618      	mov	r0, r3
 8004d30:	4621      	mov	r1, r4
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f04f 0400 	mov.w	r4, #0
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4623      	mov	r3, r4
 8004d3c:	f7fb fe3a 	bl	80009b4 <__aeabi_uldivmod>
 8004d40:	4603      	mov	r3, r0
 8004d42:	460c      	mov	r4, r1
 8004d44:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d46:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x158>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	0c1b      	lsrs	r3, r3, #16
 8004d4c:	f003 0303 	and.w	r3, r3, #3
 8004d50:	3301      	adds	r3, #1
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	60bb      	str	r3, [r7, #8]
      break;
 8004d60:	e002      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d62:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004d64:	60bb      	str	r3, [r7, #8]
      break;
 8004d66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d68:	68bb      	ldr	r3, [r7, #8]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40023800 	.word	0x40023800
 8004d78:	00f42400 	.word	0x00f42400
 8004d7c:	00b71b00 	.word	0x00b71b00

08004d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d84:	4b03      	ldr	r3, [pc, #12]	; (8004d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d86:	681b      	ldr	r3, [r3, #0]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20000000 	.word	0x20000000

08004d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d9c:	f7ff fff0 	bl	8004d80 <HAL_RCC_GetHCLKFreq>
 8004da0:	4601      	mov	r1, r0
 8004da2:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	0a9b      	lsrs	r3, r3, #10
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	4a03      	ldr	r2, [pc, #12]	; (8004dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dae:	5cd3      	ldrb	r3, [r2, r3]
 8004db0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	08006acc 	.word	0x08006acc

08004dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004dc4:	f7ff ffdc 	bl	8004d80 <HAL_RCC_GetHCLKFreq>
 8004dc8:	4601      	mov	r1, r0
 8004dca:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	0b5b      	lsrs	r3, r3, #13
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	4a03      	ldr	r2, [pc, #12]	; (8004de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dd6:	5cd3      	ldrb	r3, [r2, r3]
 8004dd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40023800 	.word	0x40023800
 8004de4:	08006acc 	.word	0x08006acc

08004de8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e056      	b.n	8004ea8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d106      	bne.n	8004e1a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7fd fc9b 	bl	8002750 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e30:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	ea42 0103 	orr.w	r1, r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	0c1b      	lsrs	r3, r3, #16
 8004e78:	f003 0104 	and.w	r1, r3, #4
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69da      	ldr	r2, [r3, #28]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08c      	sub	sp, #48	; 0x30
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d101      	bne.n	8004ed6 <HAL_SPI_TransmitReceive+0x26>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e18a      	b.n	80051ec <HAL_SPI_TransmitReceive+0x33c>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ede:	f7fd ff7f 	bl	8002de0 <HAL_GetTick>
 8004ee2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ef4:	887b      	ldrh	r3, [r7, #2]
 8004ef6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d00f      	beq.n	8004f20 <HAL_SPI_TransmitReceive+0x70>
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f06:	d107      	bne.n	8004f18 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d103      	bne.n	8004f18 <HAL_SPI_TransmitReceive+0x68>
 8004f10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d003      	beq.n	8004f20 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f18:	2302      	movs	r3, #2
 8004f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f1e:	e15b      	b.n	80051d8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <HAL_SPI_TransmitReceive+0x82>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <HAL_SPI_TransmitReceive+0x82>
 8004f2c:	887b      	ldrh	r3, [r7, #2]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d103      	bne.n	8004f3a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f38:	e14e      	b.n	80051d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d003      	beq.n	8004f4e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2205      	movs	r2, #5
 8004f4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	887a      	ldrh	r2, [r7, #2]
 8004f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	887a      	ldrh	r2, [r7, #2]
 8004f64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	887a      	ldrh	r2, [r7, #2]
 8004f70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	887a      	ldrh	r2, [r7, #2]
 8004f76:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	d007      	beq.n	8004fa2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fa0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004faa:	d178      	bne.n	800509e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <HAL_SPI_TransmitReceive+0x10a>
 8004fb4:	8b7b      	ldrh	r3, [r7, #26]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d166      	bne.n	8005088 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	881a      	ldrh	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	1c9a      	adds	r2, r3, #2
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fde:	e053      	b.n	8005088 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d11b      	bne.n	8005026 <HAL_SPI_TransmitReceive+0x176>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d016      	beq.n	8005026 <HAL_SPI_TransmitReceive+0x176>
 8004ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d113      	bne.n	8005026 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005002:	881a      	ldrh	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	1c9a      	adds	r2, r3, #2
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b01      	cmp	r3, #1
 8005032:	d119      	bne.n	8005068 <HAL_SPI_TransmitReceive+0x1b8>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d014      	beq.n	8005068 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005048:	b292      	uxth	r2, r2
 800504a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	1c9a      	adds	r2, r3, #2
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005064:	2301      	movs	r3, #1
 8005066:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005068:	f7fd feba 	bl	8002de0 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005074:	429a      	cmp	r2, r3
 8005076:	d807      	bhi.n	8005088 <HAL_SPI_TransmitReceive+0x1d8>
 8005078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507e:	d003      	beq.n	8005088 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005086:	e0a7      	b.n	80051d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1a6      	bne.n	8004fe0 <HAL_SPI_TransmitReceive+0x130>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1a1      	bne.n	8004fe0 <HAL_SPI_TransmitReceive+0x130>
 800509c:	e07c      	b.n	8005198 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <HAL_SPI_TransmitReceive+0x1fc>
 80050a6:	8b7b      	ldrh	r3, [r7, #26]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d16b      	bne.n	8005184 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330c      	adds	r3, #12
 80050b6:	7812      	ldrb	r2, [r2, #0]
 80050b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050d2:	e057      	b.n	8005184 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d11c      	bne.n	800511c <HAL_SPI_TransmitReceive+0x26c>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d017      	beq.n	800511c <HAL_SPI_TransmitReceive+0x26c>
 80050ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d114      	bne.n	800511c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	330c      	adds	r3, #12
 80050fc:	7812      	ldrb	r2, [r2, #0]
 80050fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b01      	cmp	r3, #1
 8005128:	d119      	bne.n	800515e <HAL_SPI_TransmitReceive+0x2ae>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d014      	beq.n	800515e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800515a:	2301      	movs	r3, #1
 800515c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800515e:	f7fd fe3f 	bl	8002de0 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800516a:	429a      	cmp	r2, r3
 800516c:	d803      	bhi.n	8005176 <HAL_SPI_TransmitReceive+0x2c6>
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005174:	d102      	bne.n	800517c <HAL_SPI_TransmitReceive+0x2cc>
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005178:	2b00      	cmp	r3, #0
 800517a:	d103      	bne.n	8005184 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005182:	e029      	b.n	80051d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1a2      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x224>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005192:	b29b      	uxth	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d19d      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f9b1 	bl	8005504 <SPI_EndRxTxTransaction>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d006      	beq.n	80051b6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2220      	movs	r2, #32
 80051b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80051b4:	e010      	b.n	80051d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10b      	bne.n	80051d6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	617b      	str	r3, [r7, #20]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	e000      	b.n	80051d8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80051d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3730      	adds	r7, #48	; 0x30
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	099b      	lsrs	r3, r3, #6
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10f      	bne.n	8005238 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	099b      	lsrs	r3, r3, #6
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d004      	beq.n	8005238 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	4798      	blx	r3
    return;
 8005236:	e0d8      	b.n	80053ea <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <HAL_SPI_IRQHandler+0x66>
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	09db      	lsrs	r3, r3, #7
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	d004      	beq.n	800525a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	4798      	blx	r3
    return;
 8005258:	e0c7      	b.n	80053ea <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10c      	bne.n	8005280 <HAL_SPI_IRQHandler+0x8c>
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	099b      	lsrs	r3, r3, #6
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	0a1b      	lsrs	r3, r3, #8
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 80b5 	beq.w	80053ea <HAL_SPI_IRQHandler+0x1f6>
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 80ae 	beq.w	80053ea <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	099b      	lsrs	r3, r3, #6
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d023      	beq.n	80052e2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d011      	beq.n	80052ca <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052aa:	f043 0204 	orr.w	r2, r3, #4
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	617b      	str	r3, [r7, #20]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	e00b      	b.n	80052e2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052ca:	2300      	movs	r3, #0
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	693b      	ldr	r3, [r7, #16]
        return;
 80052e0:	e083      	b.n	80053ea <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	095b      	lsrs	r3, r3, #5
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d014      	beq.n	8005318 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f2:	f043 0201 	orr.w	r2, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80052fa:	2300      	movs	r3, #0
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	0a1b      	lsrs	r3, r3, #8
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00c      	beq.n	800533e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005328:	f043 0208 	orr.w	r2, r3, #8
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005330:	2300      	movs	r3, #0
 8005332:	60bb      	str	r3, [r7, #8]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	60bb      	str	r3, [r7, #8]
 800533c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005342:	2b00      	cmp	r3, #0
 8005344:	d050      	beq.n	80053e8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005354:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d104      	bne.n	8005372 <HAL_SPI_IRQHandler+0x17e>
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d034      	beq.n	80053dc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0203 	bic.w	r2, r2, #3
 8005380:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005386:	2b00      	cmp	r3, #0
 8005388:	d011      	beq.n	80053ae <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538e:	4a18      	ldr	r2, [pc, #96]	; (80053f0 <HAL_SPI_IRQHandler+0x1fc>)
 8005390:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005396:	4618      	mov	r0, r3
 8005398:	f7fe fb5c 	bl	8003a54 <HAL_DMA_Abort_IT>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d016      	beq.n	80053e4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ba:	4a0d      	ldr	r2, [pc, #52]	; (80053f0 <HAL_SPI_IRQHandler+0x1fc>)
 80053bc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fe fb46 	bl	8003a54 <HAL_DMA_Abort_IT>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80053da:	e003      	b.n	80053e4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f809 	bl	80053f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80053e2:	e000      	b.n	80053e6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80053e4:	bf00      	nop
    return;
 80053e6:	bf00      	nop
 80053e8:	bf00      	nop
  }
}
 80053ea:	3720      	adds	r7, #32
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	08005409 	.word	0x08005409

080053f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005414:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f7ff ffe6 	bl	80053f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005428:	bf00      	nop
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	4613      	mov	r3, r2
 800543e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005440:	e04c      	b.n	80054dc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005448:	d048      	beq.n	80054dc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800544a:	f7fd fcc9 	bl	8002de0 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d902      	bls.n	8005460 <SPI_WaitFlagStateUntilTimeout+0x30>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d13d      	bne.n	80054dc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800546e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005478:	d111      	bne.n	800549e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005482:	d004      	beq.n	800548e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548c:	d107      	bne.n	800549e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800549c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054a6:	d10f      	bne.n	80054c8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e00f      	b.n	80054fc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4013      	ands	r3, r2
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	bf0c      	ite	eq
 80054ec:	2301      	moveq	r3, #1
 80054ee:	2300      	movne	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	79fb      	ldrb	r3, [r7, #7]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d1a3      	bne.n	8005442 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af02      	add	r7, sp, #8
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005510:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <SPI_EndRxTxTransaction+0x7c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1b      	ldr	r2, [pc, #108]	; (8005584 <SPI_EndRxTxTransaction+0x80>)
 8005516:	fba2 2303 	umull	r2, r3, r2, r3
 800551a:	0d5b      	lsrs	r3, r3, #21
 800551c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005520:	fb02 f303 	mul.w	r3, r2, r3
 8005524:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800552e:	d112      	bne.n	8005556 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2200      	movs	r2, #0
 8005538:	2180      	movs	r1, #128	; 0x80
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f7ff ff78 	bl	8005430 <SPI_WaitFlagStateUntilTimeout>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d016      	beq.n	8005574 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554a:	f043 0220 	orr.w	r2, r3, #32
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e00f      	b.n	8005576 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	3b01      	subs	r3, #1
 8005560:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556c:	2b80      	cmp	r3, #128	; 0x80
 800556e:	d0f2      	beq.n	8005556 <SPI_EndRxTxTransaction+0x52>
 8005570:	e000      	b.n	8005574 <SPI_EndRxTxTransaction+0x70>
        break;
 8005572:	bf00      	nop
  }

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000000 	.word	0x20000000
 8005584:	165e9f81 	.word	0x165e9f81

08005588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e01d      	b.n	80055d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fd f9e6 	bl	8002980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3304      	adds	r3, #4
 80055c4:	4619      	mov	r1, r3
 80055c6:	4610      	mov	r0, r2
 80055c8:	f000 fb1e 	bl	8005c08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055de:	b480      	push	{r7}
 80055e0:	b085      	sub	sp, #20
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0201 	orr.w	r2, r2, #1
 80055f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b06      	cmp	r3, #6
 8005606:	d007      	beq.n	8005618 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0201 	orr.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b082      	sub	sp, #8
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e01d      	b.n	8005674 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	d106      	bne.n	8005652 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7fd f8cf 	bl	80027f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2202      	movs	r2, #2
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3304      	adds	r3, #4
 8005662:	4619      	mov	r1, r3
 8005664:	4610      	mov	r0, r2
 8005666:	f000 facf 	bl	8005c08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2201      	movs	r2, #1
 800568c:	6839      	ldr	r1, [r7, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fd0a 	bl	80060a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a15      	ldr	r2, [pc, #84]	; (80056f0 <HAL_TIM_PWM_Start+0x74>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d004      	beq.n	80056a8 <HAL_TIM_PWM_Start+0x2c>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a14      	ldr	r2, [pc, #80]	; (80056f4 <HAL_TIM_PWM_Start+0x78>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d101      	bne.n	80056ac <HAL_TIM_PWM_Start+0x30>
 80056a8:	2301      	movs	r3, #1
 80056aa:	e000      	b.n	80056ae <HAL_TIM_PWM_Start+0x32>
 80056ac:	2300      	movs	r3, #0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d007      	beq.n	80056c2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b06      	cmp	r3, #6
 80056d2:	d007      	beq.n	80056e4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0201 	orr.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40010000 	.word	0x40010000
 80056f4:	40010400 	.word	0x40010400

080056f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e083      	b.n	8005814 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d106      	bne.n	8005726 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7fd f8b1 	bl	8002888 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2202      	movs	r2, #2
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6812      	ldr	r2, [r2, #0]
 8005738:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800573c:	f023 0307 	bic.w	r3, r3, #7
 8005740:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3304      	adds	r3, #4
 800574a:	4619      	mov	r1, r3
 800574c:	4610      	mov	r0, r2
 800574e:	f000 fa5b 	bl	8005c08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800577a:	f023 0303 	bic.w	r3, r3, #3
 800577e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	021b      	lsls	r3, r3, #8
 800578a:	4313      	orrs	r3, r2
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005798:	f023 030c 	bic.w	r3, r3, #12
 800579c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	021b      	lsls	r3, r3, #8
 80057b4:	4313      	orrs	r3, r2
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	011a      	lsls	r2, r3, #4
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	031b      	lsls	r3, r3, #12
 80057c8:	4313      	orrs	r3, r2
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80057d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80057de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	4313      	orrs	r3, r2
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b02      	cmp	r3, #2
 8005830:	d122      	bne.n	8005878 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b02      	cmp	r3, #2
 800583e:	d11b      	bne.n	8005878 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0202 	mvn.w	r2, #2
 8005848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f9b4 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 8005864:	e005      	b.n	8005872 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f9a6 	bl	8005bb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f9b7 	bl	8005be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b04      	cmp	r3, #4
 8005884:	d122      	bne.n	80058cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b04      	cmp	r3, #4
 8005892:	d11b      	bne.n	80058cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f06f 0204 	mvn.w	r2, #4
 800589c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2202      	movs	r2, #2
 80058a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f98a 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 80058b8:	e005      	b.n	80058c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f97c 	bl	8005bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f98d 	bl	8005be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b08      	cmp	r3, #8
 80058d8:	d122      	bne.n	8005920 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f003 0308 	and.w	r3, r3, #8
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d11b      	bne.n	8005920 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0208 	mvn.w	r2, #8
 80058f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2204      	movs	r2, #4
 80058f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f960 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 800590c:	e005      	b.n	800591a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f952 	bl	8005bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f963 	bl	8005be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f003 0310 	and.w	r3, r3, #16
 800592a:	2b10      	cmp	r3, #16
 800592c:	d122      	bne.n	8005974 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f003 0310 	and.w	r3, r3, #16
 8005938:	2b10      	cmp	r3, #16
 800593a:	d11b      	bne.n	8005974 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f06f 0210 	mvn.w	r2, #16
 8005944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2208      	movs	r2, #8
 800594a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f936 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 8005960:	e005      	b.n	800596e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f928 	bl	8005bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f939 	bl	8005be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b01      	cmp	r3, #1
 8005980:	d10e      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b01      	cmp	r3, #1
 800598e:	d107      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f06f 0201 	mvn.w	r2, #1
 8005998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7fb ff88 	bl	80018b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059aa:	2b80      	cmp	r3, #128	; 0x80
 80059ac:	d10e      	bne.n	80059cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b8:	2b80      	cmp	r3, #128	; 0x80
 80059ba:	d107      	bne.n	80059cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fc6c 	bl	80062a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d6:	2b40      	cmp	r3, #64	; 0x40
 80059d8:	d10e      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d107      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f8fe 	bl	8005bf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b20      	cmp	r3, #32
 8005a04:	d10e      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d107      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0220 	mvn.w	r2, #32
 8005a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fc36 	bl	8006290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a24:	bf00      	nop
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e0b4      	b.n	8005bb0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2202      	movs	r2, #2
 8005a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b0c      	cmp	r3, #12
 8005a5a:	f200 809f 	bhi.w	8005b9c <HAL_TIM_PWM_ConfigChannel+0x170>
 8005a5e:	a201      	add	r2, pc, #4	; (adr r2, 8005a64 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a64:	08005a99 	.word	0x08005a99
 8005a68:	08005b9d 	.word	0x08005b9d
 8005a6c:	08005b9d 	.word	0x08005b9d
 8005a70:	08005b9d 	.word	0x08005b9d
 8005a74:	08005ad9 	.word	0x08005ad9
 8005a78:	08005b9d 	.word	0x08005b9d
 8005a7c:	08005b9d 	.word	0x08005b9d
 8005a80:	08005b9d 	.word	0x08005b9d
 8005a84:	08005b1b 	.word	0x08005b1b
 8005a88:	08005b9d 	.word	0x08005b9d
 8005a8c:	08005b9d 	.word	0x08005b9d
 8005a90:	08005b9d 	.word	0x08005b9d
 8005a94:	08005b5b 	.word	0x08005b5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 f952 	bl	8005d48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699a      	ldr	r2, [r3, #24]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0208 	orr.w	r2, r2, #8
 8005ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	699a      	ldr	r2, [r3, #24]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0204 	bic.w	r2, r2, #4
 8005ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6999      	ldr	r1, [r3, #24]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	691a      	ldr	r2, [r3, #16]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	619a      	str	r2, [r3, #24]
      break;
 8005ad6:	e062      	b.n	8005b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 f9a2 	bl	8005e28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6999      	ldr	r1, [r3, #24]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	021a      	lsls	r2, r3, #8
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	619a      	str	r2, [r3, #24]
      break;
 8005b18:	e041      	b.n	8005b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68b9      	ldr	r1, [r7, #8]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 f9f7 	bl	8005f14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0208 	orr.w	r2, r2, #8
 8005b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69da      	ldr	r2, [r3, #28]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0204 	bic.w	r2, r2, #4
 8005b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	69d9      	ldr	r1, [r3, #28]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	61da      	str	r2, [r3, #28]
      break;
 8005b58:	e021      	b.n	8005b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68b9      	ldr	r1, [r7, #8]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fa4b 	bl	8005ffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69da      	ldr	r2, [r3, #28]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69d9      	ldr	r1, [r3, #28]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	021a      	lsls	r2, r3, #8
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	61da      	str	r2, [r3, #28]
      break;
 8005b9a:	e000      	b.n	8005b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005b9c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a40      	ldr	r2, [pc, #256]	; (8005d1c <TIM_Base_SetConfig+0x114>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d013      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c26:	d00f      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a3d      	ldr	r2, [pc, #244]	; (8005d20 <TIM_Base_SetConfig+0x118>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00b      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a3c      	ldr	r2, [pc, #240]	; (8005d24 <TIM_Base_SetConfig+0x11c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d007      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a3b      	ldr	r2, [pc, #236]	; (8005d28 <TIM_Base_SetConfig+0x120>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d003      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a3a      	ldr	r2, [pc, #232]	; (8005d2c <TIM_Base_SetConfig+0x124>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d108      	bne.n	8005c5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a2f      	ldr	r2, [pc, #188]	; (8005d1c <TIM_Base_SetConfig+0x114>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d02b      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c68:	d027      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a2c      	ldr	r2, [pc, #176]	; (8005d20 <TIM_Base_SetConfig+0x118>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d023      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a2b      	ldr	r2, [pc, #172]	; (8005d24 <TIM_Base_SetConfig+0x11c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d01f      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a2a      	ldr	r2, [pc, #168]	; (8005d28 <TIM_Base_SetConfig+0x120>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d01b      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a29      	ldr	r2, [pc, #164]	; (8005d2c <TIM_Base_SetConfig+0x124>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d017      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a28      	ldr	r2, [pc, #160]	; (8005d30 <TIM_Base_SetConfig+0x128>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d013      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a27      	ldr	r2, [pc, #156]	; (8005d34 <TIM_Base_SetConfig+0x12c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00f      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a26      	ldr	r2, [pc, #152]	; (8005d38 <TIM_Base_SetConfig+0x130>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d00b      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a25      	ldr	r2, [pc, #148]	; (8005d3c <TIM_Base_SetConfig+0x134>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d007      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a24      	ldr	r2, [pc, #144]	; (8005d40 <TIM_Base_SetConfig+0x138>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d003      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a23      	ldr	r2, [pc, #140]	; (8005d44 <TIM_Base_SetConfig+0x13c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d108      	bne.n	8005ccc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a0a      	ldr	r2, [pc, #40]	; (8005d1c <TIM_Base_SetConfig+0x114>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d003      	beq.n	8005d00 <TIM_Base_SetConfig+0xf8>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a0c      	ldr	r2, [pc, #48]	; (8005d2c <TIM_Base_SetConfig+0x124>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d103      	bne.n	8005d08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	615a      	str	r2, [r3, #20]
}
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40010000 	.word	0x40010000
 8005d20:	40000400 	.word	0x40000400
 8005d24:	40000800 	.word	0x40000800
 8005d28:	40000c00 	.word	0x40000c00
 8005d2c:	40010400 	.word	0x40010400
 8005d30:	40014000 	.word	0x40014000
 8005d34:	40014400 	.word	0x40014400
 8005d38:	40014800 	.word	0x40014800
 8005d3c:	40001800 	.word	0x40001800
 8005d40:	40001c00 	.word	0x40001c00
 8005d44:	40002000 	.word	0x40002000

08005d48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f023 0201 	bic.w	r2, r3, #1
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 0303 	bic.w	r3, r3, #3
 8005d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f023 0302 	bic.w	r3, r3, #2
 8005d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a20      	ldr	r2, [pc, #128]	; (8005e20 <TIM_OC1_SetConfig+0xd8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d003      	beq.n	8005dac <TIM_OC1_SetConfig+0x64>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a1f      	ldr	r2, [pc, #124]	; (8005e24 <TIM_OC1_SetConfig+0xdc>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d10c      	bne.n	8005dc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f023 0308 	bic.w	r3, r3, #8
 8005db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f023 0304 	bic.w	r3, r3, #4
 8005dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a15      	ldr	r2, [pc, #84]	; (8005e20 <TIM_OC1_SetConfig+0xd8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d003      	beq.n	8005dd6 <TIM_OC1_SetConfig+0x8e>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a14      	ldr	r2, [pc, #80]	; (8005e24 <TIM_OC1_SetConfig+0xdc>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d111      	bne.n	8005dfa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	621a      	str	r2, [r3, #32]
}
 8005e14:	bf00      	nop
 8005e16:	371c      	adds	r7, #28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	40010000 	.word	0x40010000
 8005e24:	40010400 	.word	0x40010400

08005e28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	f023 0210 	bic.w	r2, r3, #16
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	021b      	lsls	r3, r3, #8
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f023 0320 	bic.w	r3, r3, #32
 8005e72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	011b      	lsls	r3, r3, #4
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a22      	ldr	r2, [pc, #136]	; (8005f0c <TIM_OC2_SetConfig+0xe4>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d003      	beq.n	8005e90 <TIM_OC2_SetConfig+0x68>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a21      	ldr	r2, [pc, #132]	; (8005f10 <TIM_OC2_SetConfig+0xe8>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d10d      	bne.n	8005eac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a17      	ldr	r2, [pc, #92]	; (8005f0c <TIM_OC2_SetConfig+0xe4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d003      	beq.n	8005ebc <TIM_OC2_SetConfig+0x94>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a16      	ldr	r2, [pc, #88]	; (8005f10 <TIM_OC2_SetConfig+0xe8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d113      	bne.n	8005ee4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ec2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	621a      	str	r2, [r3, #32]
}
 8005efe:	bf00      	nop
 8005f00:	371c      	adds	r7, #28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40010000 	.word	0x40010000
 8005f10:	40010400 	.word	0x40010400

08005f14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0303 	bic.w	r3, r3, #3
 8005f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	021b      	lsls	r3, r3, #8
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a21      	ldr	r2, [pc, #132]	; (8005ff4 <TIM_OC3_SetConfig+0xe0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d003      	beq.n	8005f7a <TIM_OC3_SetConfig+0x66>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a20      	ldr	r2, [pc, #128]	; (8005ff8 <TIM_OC3_SetConfig+0xe4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d10d      	bne.n	8005f96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	021b      	lsls	r3, r3, #8
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a16      	ldr	r2, [pc, #88]	; (8005ff4 <TIM_OC3_SetConfig+0xe0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d003      	beq.n	8005fa6 <TIM_OC3_SetConfig+0x92>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a15      	ldr	r2, [pc, #84]	; (8005ff8 <TIM_OC3_SetConfig+0xe4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d113      	bne.n	8005fce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	621a      	str	r2, [r3, #32]
}
 8005fe8:	bf00      	nop
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	40010000 	.word	0x40010000
 8005ff8:	40010400 	.word	0x40010400

08005ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800602a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	021b      	lsls	r3, r3, #8
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	4313      	orrs	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	031b      	lsls	r3, r3, #12
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a12      	ldr	r2, [pc, #72]	; (80060a0 <TIM_OC4_SetConfig+0xa4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d003      	beq.n	8006064 <TIM_OC4_SetConfig+0x68>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a11      	ldr	r2, [pc, #68]	; (80060a4 <TIM_OC4_SetConfig+0xa8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d109      	bne.n	8006078 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800606a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	019b      	lsls	r3, r3, #6
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	4313      	orrs	r3, r2
 8006076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	621a      	str	r2, [r3, #32]
}
 8006092:	bf00      	nop
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	40010000 	.word	0x40010000
 80060a4:	40010400 	.word	0x40010400

080060a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f003 031f 	and.w	r3, r3, #31
 80060ba:	2201      	movs	r2, #1
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a1a      	ldr	r2, [r3, #32]
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	43db      	mvns	r3, r3
 80060ca:	401a      	ands	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a1a      	ldr	r2, [r3, #32]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f003 031f 	and.w	r3, r3, #31
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	fa01 f303 	lsl.w	r3, r1, r3
 80060e0:	431a      	orrs	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	621a      	str	r2, [r3, #32]
}
 80060e6:	bf00      	nop
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006108:	2302      	movs	r3, #2
 800610a:	e05a      	b.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a21      	ldr	r2, [pc, #132]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d022      	beq.n	8006196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006158:	d01d      	beq.n	8006196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d018      	beq.n	8006196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a1b      	ldr	r2, [pc, #108]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d013      	beq.n	8006196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1a      	ldr	r2, [pc, #104]	; (80061dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d00e      	beq.n	8006196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a18      	ldr	r2, [pc, #96]	; (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d009      	beq.n	8006196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a17      	ldr	r2, [pc, #92]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d004      	beq.n	8006196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a15      	ldr	r2, [pc, #84]	; (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d10c      	bne.n	80061b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800619c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	40010000 	.word	0x40010000
 80061d4:	40000400 	.word	0x40000400
 80061d8:	40000800 	.word	0x40000800
 80061dc:	40000c00 	.word	0x40000c00
 80061e0:	40010400 	.word	0x40010400
 80061e4:	40014000 	.word	0x40014000
 80061e8:	40001800 	.word	0x40001800

080061ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006200:	2b01      	cmp	r3, #1
 8006202:	d101      	bne.n	8006208 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006204:	2302      	movs	r3, #2
 8006206:	e03d      	b.n	8006284 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	4313      	orrs	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	4313      	orrs	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4313      	orrs	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e03f      	b.n	800634a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d106      	bne.n	80062e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7fc fc3e 	bl	8002b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2224      	movs	r2, #36	; 0x24
 80062e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f829 	bl	8006354 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	691a      	ldr	r2, [r3, #16]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695a      	ldr	r2, [r3, #20]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006320:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006330:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
	...

08006354 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	431a      	orrs	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	4313      	orrs	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006396:	f023 030c 	bic.w	r3, r3, #12
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	6812      	ldr	r2, [r2, #0]
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	430b      	orrs	r3, r1
 80063a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	699a      	ldr	r2, [r3, #24]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c2:	f040 818b 	bne.w	80066dc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4ac1      	ldr	r2, [pc, #772]	; (80066d0 <UART_SetConfig+0x37c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d005      	beq.n	80063dc <UART_SetConfig+0x88>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4abf      	ldr	r2, [pc, #764]	; (80066d4 <UART_SetConfig+0x380>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	f040 80bd 	bne.w	8006556 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063dc:	f7fe fcf0 	bl	8004dc0 <HAL_RCC_GetPCLK2Freq>
 80063e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	461d      	mov	r5, r3
 80063e6:	f04f 0600 	mov.w	r6, #0
 80063ea:	46a8      	mov	r8, r5
 80063ec:	46b1      	mov	r9, r6
 80063ee:	eb18 0308 	adds.w	r3, r8, r8
 80063f2:	eb49 0409 	adc.w	r4, r9, r9
 80063f6:	4698      	mov	r8, r3
 80063f8:	46a1      	mov	r9, r4
 80063fa:	eb18 0805 	adds.w	r8, r8, r5
 80063fe:	eb49 0906 	adc.w	r9, r9, r6
 8006402:	f04f 0100 	mov.w	r1, #0
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800640e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006412:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006416:	4688      	mov	r8, r1
 8006418:	4691      	mov	r9, r2
 800641a:	eb18 0005 	adds.w	r0, r8, r5
 800641e:	eb49 0106 	adc.w	r1, r9, r6
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	461d      	mov	r5, r3
 8006428:	f04f 0600 	mov.w	r6, #0
 800642c:	196b      	adds	r3, r5, r5
 800642e:	eb46 0406 	adc.w	r4, r6, r6
 8006432:	461a      	mov	r2, r3
 8006434:	4623      	mov	r3, r4
 8006436:	f7fa fabd 	bl	80009b4 <__aeabi_uldivmod>
 800643a:	4603      	mov	r3, r0
 800643c:	460c      	mov	r4, r1
 800643e:	461a      	mov	r2, r3
 8006440:	4ba5      	ldr	r3, [pc, #660]	; (80066d8 <UART_SetConfig+0x384>)
 8006442:	fba3 2302 	umull	r2, r3, r3, r2
 8006446:	095b      	lsrs	r3, r3, #5
 8006448:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	461d      	mov	r5, r3
 8006450:	f04f 0600 	mov.w	r6, #0
 8006454:	46a9      	mov	r9, r5
 8006456:	46b2      	mov	sl, r6
 8006458:	eb19 0309 	adds.w	r3, r9, r9
 800645c:	eb4a 040a 	adc.w	r4, sl, sl
 8006460:	4699      	mov	r9, r3
 8006462:	46a2      	mov	sl, r4
 8006464:	eb19 0905 	adds.w	r9, r9, r5
 8006468:	eb4a 0a06 	adc.w	sl, sl, r6
 800646c:	f04f 0100 	mov.w	r1, #0
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006478:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800647c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006480:	4689      	mov	r9, r1
 8006482:	4692      	mov	sl, r2
 8006484:	eb19 0005 	adds.w	r0, r9, r5
 8006488:	eb4a 0106 	adc.w	r1, sl, r6
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	461d      	mov	r5, r3
 8006492:	f04f 0600 	mov.w	r6, #0
 8006496:	196b      	adds	r3, r5, r5
 8006498:	eb46 0406 	adc.w	r4, r6, r6
 800649c:	461a      	mov	r2, r3
 800649e:	4623      	mov	r3, r4
 80064a0:	f7fa fa88 	bl	80009b4 <__aeabi_uldivmod>
 80064a4:	4603      	mov	r3, r0
 80064a6:	460c      	mov	r4, r1
 80064a8:	461a      	mov	r2, r3
 80064aa:	4b8b      	ldr	r3, [pc, #556]	; (80066d8 <UART_SetConfig+0x384>)
 80064ac:	fba3 1302 	umull	r1, r3, r3, r2
 80064b0:	095b      	lsrs	r3, r3, #5
 80064b2:	2164      	movs	r1, #100	; 0x64
 80064b4:	fb01 f303 	mul.w	r3, r1, r3
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	3332      	adds	r3, #50	; 0x32
 80064be:	4a86      	ldr	r2, [pc, #536]	; (80066d8 <UART_SetConfig+0x384>)
 80064c0:	fba2 2303 	umull	r2, r3, r2, r3
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064cc:	4498      	add	r8, r3
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	461d      	mov	r5, r3
 80064d2:	f04f 0600 	mov.w	r6, #0
 80064d6:	46a9      	mov	r9, r5
 80064d8:	46b2      	mov	sl, r6
 80064da:	eb19 0309 	adds.w	r3, r9, r9
 80064de:	eb4a 040a 	adc.w	r4, sl, sl
 80064e2:	4699      	mov	r9, r3
 80064e4:	46a2      	mov	sl, r4
 80064e6:	eb19 0905 	adds.w	r9, r9, r5
 80064ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80064ee:	f04f 0100 	mov.w	r1, #0
 80064f2:	f04f 0200 	mov.w	r2, #0
 80064f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006502:	4689      	mov	r9, r1
 8006504:	4692      	mov	sl, r2
 8006506:	eb19 0005 	adds.w	r0, r9, r5
 800650a:	eb4a 0106 	adc.w	r1, sl, r6
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	461d      	mov	r5, r3
 8006514:	f04f 0600 	mov.w	r6, #0
 8006518:	196b      	adds	r3, r5, r5
 800651a:	eb46 0406 	adc.w	r4, r6, r6
 800651e:	461a      	mov	r2, r3
 8006520:	4623      	mov	r3, r4
 8006522:	f7fa fa47 	bl	80009b4 <__aeabi_uldivmod>
 8006526:	4603      	mov	r3, r0
 8006528:	460c      	mov	r4, r1
 800652a:	461a      	mov	r2, r3
 800652c:	4b6a      	ldr	r3, [pc, #424]	; (80066d8 <UART_SetConfig+0x384>)
 800652e:	fba3 1302 	umull	r1, r3, r3, r2
 8006532:	095b      	lsrs	r3, r3, #5
 8006534:	2164      	movs	r1, #100	; 0x64
 8006536:	fb01 f303 	mul.w	r3, r1, r3
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	3332      	adds	r3, #50	; 0x32
 8006540:	4a65      	ldr	r2, [pc, #404]	; (80066d8 <UART_SetConfig+0x384>)
 8006542:	fba2 2303 	umull	r2, r3, r2, r3
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	f003 0207 	and.w	r2, r3, #7
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4442      	add	r2, r8
 8006552:	609a      	str	r2, [r3, #8]
 8006554:	e26f      	b.n	8006a36 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006556:	f7fe fc1f 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 800655a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	461d      	mov	r5, r3
 8006560:	f04f 0600 	mov.w	r6, #0
 8006564:	46a8      	mov	r8, r5
 8006566:	46b1      	mov	r9, r6
 8006568:	eb18 0308 	adds.w	r3, r8, r8
 800656c:	eb49 0409 	adc.w	r4, r9, r9
 8006570:	4698      	mov	r8, r3
 8006572:	46a1      	mov	r9, r4
 8006574:	eb18 0805 	adds.w	r8, r8, r5
 8006578:	eb49 0906 	adc.w	r9, r9, r6
 800657c:	f04f 0100 	mov.w	r1, #0
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006588:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800658c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006590:	4688      	mov	r8, r1
 8006592:	4691      	mov	r9, r2
 8006594:	eb18 0005 	adds.w	r0, r8, r5
 8006598:	eb49 0106 	adc.w	r1, r9, r6
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	461d      	mov	r5, r3
 80065a2:	f04f 0600 	mov.w	r6, #0
 80065a6:	196b      	adds	r3, r5, r5
 80065a8:	eb46 0406 	adc.w	r4, r6, r6
 80065ac:	461a      	mov	r2, r3
 80065ae:	4623      	mov	r3, r4
 80065b0:	f7fa fa00 	bl	80009b4 <__aeabi_uldivmod>
 80065b4:	4603      	mov	r3, r0
 80065b6:	460c      	mov	r4, r1
 80065b8:	461a      	mov	r2, r3
 80065ba:	4b47      	ldr	r3, [pc, #284]	; (80066d8 <UART_SetConfig+0x384>)
 80065bc:	fba3 2302 	umull	r2, r3, r3, r2
 80065c0:	095b      	lsrs	r3, r3, #5
 80065c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	461d      	mov	r5, r3
 80065ca:	f04f 0600 	mov.w	r6, #0
 80065ce:	46a9      	mov	r9, r5
 80065d0:	46b2      	mov	sl, r6
 80065d2:	eb19 0309 	adds.w	r3, r9, r9
 80065d6:	eb4a 040a 	adc.w	r4, sl, sl
 80065da:	4699      	mov	r9, r3
 80065dc:	46a2      	mov	sl, r4
 80065de:	eb19 0905 	adds.w	r9, r9, r5
 80065e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80065e6:	f04f 0100 	mov.w	r1, #0
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065fa:	4689      	mov	r9, r1
 80065fc:	4692      	mov	sl, r2
 80065fe:	eb19 0005 	adds.w	r0, r9, r5
 8006602:	eb4a 0106 	adc.w	r1, sl, r6
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	461d      	mov	r5, r3
 800660c:	f04f 0600 	mov.w	r6, #0
 8006610:	196b      	adds	r3, r5, r5
 8006612:	eb46 0406 	adc.w	r4, r6, r6
 8006616:	461a      	mov	r2, r3
 8006618:	4623      	mov	r3, r4
 800661a:	f7fa f9cb 	bl	80009b4 <__aeabi_uldivmod>
 800661e:	4603      	mov	r3, r0
 8006620:	460c      	mov	r4, r1
 8006622:	461a      	mov	r2, r3
 8006624:	4b2c      	ldr	r3, [pc, #176]	; (80066d8 <UART_SetConfig+0x384>)
 8006626:	fba3 1302 	umull	r1, r3, r3, r2
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	2164      	movs	r1, #100	; 0x64
 800662e:	fb01 f303 	mul.w	r3, r1, r3
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	3332      	adds	r3, #50	; 0x32
 8006638:	4a27      	ldr	r2, [pc, #156]	; (80066d8 <UART_SetConfig+0x384>)
 800663a:	fba2 2303 	umull	r2, r3, r2, r3
 800663e:	095b      	lsrs	r3, r3, #5
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006646:	4498      	add	r8, r3
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	461d      	mov	r5, r3
 800664c:	f04f 0600 	mov.w	r6, #0
 8006650:	46a9      	mov	r9, r5
 8006652:	46b2      	mov	sl, r6
 8006654:	eb19 0309 	adds.w	r3, r9, r9
 8006658:	eb4a 040a 	adc.w	r4, sl, sl
 800665c:	4699      	mov	r9, r3
 800665e:	46a2      	mov	sl, r4
 8006660:	eb19 0905 	adds.w	r9, r9, r5
 8006664:	eb4a 0a06 	adc.w	sl, sl, r6
 8006668:	f04f 0100 	mov.w	r1, #0
 800666c:	f04f 0200 	mov.w	r2, #0
 8006670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006674:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006678:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800667c:	4689      	mov	r9, r1
 800667e:	4692      	mov	sl, r2
 8006680:	eb19 0005 	adds.w	r0, r9, r5
 8006684:	eb4a 0106 	adc.w	r1, sl, r6
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	461d      	mov	r5, r3
 800668e:	f04f 0600 	mov.w	r6, #0
 8006692:	196b      	adds	r3, r5, r5
 8006694:	eb46 0406 	adc.w	r4, r6, r6
 8006698:	461a      	mov	r2, r3
 800669a:	4623      	mov	r3, r4
 800669c:	f7fa f98a 	bl	80009b4 <__aeabi_uldivmod>
 80066a0:	4603      	mov	r3, r0
 80066a2:	460c      	mov	r4, r1
 80066a4:	461a      	mov	r2, r3
 80066a6:	4b0c      	ldr	r3, [pc, #48]	; (80066d8 <UART_SetConfig+0x384>)
 80066a8:	fba3 1302 	umull	r1, r3, r3, r2
 80066ac:	095b      	lsrs	r3, r3, #5
 80066ae:	2164      	movs	r1, #100	; 0x64
 80066b0:	fb01 f303 	mul.w	r3, r1, r3
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	3332      	adds	r3, #50	; 0x32
 80066ba:	4a07      	ldr	r2, [pc, #28]	; (80066d8 <UART_SetConfig+0x384>)
 80066bc:	fba2 2303 	umull	r2, r3, r2, r3
 80066c0:	095b      	lsrs	r3, r3, #5
 80066c2:	f003 0207 	and.w	r2, r3, #7
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4442      	add	r2, r8
 80066cc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80066ce:	e1b2      	b.n	8006a36 <UART_SetConfig+0x6e2>
 80066d0:	40011000 	.word	0x40011000
 80066d4:	40011400 	.word	0x40011400
 80066d8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4ad7      	ldr	r2, [pc, #860]	; (8006a40 <UART_SetConfig+0x6ec>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d005      	beq.n	80066f2 <UART_SetConfig+0x39e>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4ad6      	ldr	r2, [pc, #856]	; (8006a44 <UART_SetConfig+0x6f0>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	f040 80d1 	bne.w	8006894 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80066f2:	f7fe fb65 	bl	8004dc0 <HAL_RCC_GetPCLK2Freq>
 80066f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	469a      	mov	sl, r3
 80066fc:	f04f 0b00 	mov.w	fp, #0
 8006700:	46d0      	mov	r8, sl
 8006702:	46d9      	mov	r9, fp
 8006704:	eb18 0308 	adds.w	r3, r8, r8
 8006708:	eb49 0409 	adc.w	r4, r9, r9
 800670c:	4698      	mov	r8, r3
 800670e:	46a1      	mov	r9, r4
 8006710:	eb18 080a 	adds.w	r8, r8, sl
 8006714:	eb49 090b 	adc.w	r9, r9, fp
 8006718:	f04f 0100 	mov.w	r1, #0
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006724:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006728:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800672c:	4688      	mov	r8, r1
 800672e:	4691      	mov	r9, r2
 8006730:	eb1a 0508 	adds.w	r5, sl, r8
 8006734:	eb4b 0609 	adc.w	r6, fp, r9
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	4619      	mov	r1, r3
 800673e:	f04f 0200 	mov.w	r2, #0
 8006742:	f04f 0300 	mov.w	r3, #0
 8006746:	f04f 0400 	mov.w	r4, #0
 800674a:	0094      	lsls	r4, r2, #2
 800674c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006750:	008b      	lsls	r3, r1, #2
 8006752:	461a      	mov	r2, r3
 8006754:	4623      	mov	r3, r4
 8006756:	4628      	mov	r0, r5
 8006758:	4631      	mov	r1, r6
 800675a:	f7fa f92b 	bl	80009b4 <__aeabi_uldivmod>
 800675e:	4603      	mov	r3, r0
 8006760:	460c      	mov	r4, r1
 8006762:	461a      	mov	r2, r3
 8006764:	4bb8      	ldr	r3, [pc, #736]	; (8006a48 <UART_SetConfig+0x6f4>)
 8006766:	fba3 2302 	umull	r2, r3, r3, r2
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	469b      	mov	fp, r3
 8006774:	f04f 0c00 	mov.w	ip, #0
 8006778:	46d9      	mov	r9, fp
 800677a:	46e2      	mov	sl, ip
 800677c:	eb19 0309 	adds.w	r3, r9, r9
 8006780:	eb4a 040a 	adc.w	r4, sl, sl
 8006784:	4699      	mov	r9, r3
 8006786:	46a2      	mov	sl, r4
 8006788:	eb19 090b 	adds.w	r9, r9, fp
 800678c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006790:	f04f 0100 	mov.w	r1, #0
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800679c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067a4:	4689      	mov	r9, r1
 80067a6:	4692      	mov	sl, r2
 80067a8:	eb1b 0509 	adds.w	r5, fp, r9
 80067ac:	eb4c 060a 	adc.w	r6, ip, sl
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4619      	mov	r1, r3
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	f04f 0400 	mov.w	r4, #0
 80067c2:	0094      	lsls	r4, r2, #2
 80067c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067c8:	008b      	lsls	r3, r1, #2
 80067ca:	461a      	mov	r2, r3
 80067cc:	4623      	mov	r3, r4
 80067ce:	4628      	mov	r0, r5
 80067d0:	4631      	mov	r1, r6
 80067d2:	f7fa f8ef 	bl	80009b4 <__aeabi_uldivmod>
 80067d6:	4603      	mov	r3, r0
 80067d8:	460c      	mov	r4, r1
 80067da:	461a      	mov	r2, r3
 80067dc:	4b9a      	ldr	r3, [pc, #616]	; (8006a48 <UART_SetConfig+0x6f4>)
 80067de:	fba3 1302 	umull	r1, r3, r3, r2
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	2164      	movs	r1, #100	; 0x64
 80067e6:	fb01 f303 	mul.w	r3, r1, r3
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	011b      	lsls	r3, r3, #4
 80067ee:	3332      	adds	r3, #50	; 0x32
 80067f0:	4a95      	ldr	r2, [pc, #596]	; (8006a48 <UART_SetConfig+0x6f4>)
 80067f2:	fba2 2303 	umull	r2, r3, r2, r3
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067fc:	4498      	add	r8, r3
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	469b      	mov	fp, r3
 8006802:	f04f 0c00 	mov.w	ip, #0
 8006806:	46d9      	mov	r9, fp
 8006808:	46e2      	mov	sl, ip
 800680a:	eb19 0309 	adds.w	r3, r9, r9
 800680e:	eb4a 040a 	adc.w	r4, sl, sl
 8006812:	4699      	mov	r9, r3
 8006814:	46a2      	mov	sl, r4
 8006816:	eb19 090b 	adds.w	r9, r9, fp
 800681a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800681e:	f04f 0100 	mov.w	r1, #0
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800682a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800682e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006832:	4689      	mov	r9, r1
 8006834:	4692      	mov	sl, r2
 8006836:	eb1b 0509 	adds.w	r5, fp, r9
 800683a:	eb4c 060a 	adc.w	r6, ip, sl
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	4619      	mov	r1, r3
 8006844:	f04f 0200 	mov.w	r2, #0
 8006848:	f04f 0300 	mov.w	r3, #0
 800684c:	f04f 0400 	mov.w	r4, #0
 8006850:	0094      	lsls	r4, r2, #2
 8006852:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006856:	008b      	lsls	r3, r1, #2
 8006858:	461a      	mov	r2, r3
 800685a:	4623      	mov	r3, r4
 800685c:	4628      	mov	r0, r5
 800685e:	4631      	mov	r1, r6
 8006860:	f7fa f8a8 	bl	80009b4 <__aeabi_uldivmod>
 8006864:	4603      	mov	r3, r0
 8006866:	460c      	mov	r4, r1
 8006868:	461a      	mov	r2, r3
 800686a:	4b77      	ldr	r3, [pc, #476]	; (8006a48 <UART_SetConfig+0x6f4>)
 800686c:	fba3 1302 	umull	r1, r3, r3, r2
 8006870:	095b      	lsrs	r3, r3, #5
 8006872:	2164      	movs	r1, #100	; 0x64
 8006874:	fb01 f303 	mul.w	r3, r1, r3
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	3332      	adds	r3, #50	; 0x32
 800687e:	4a72      	ldr	r2, [pc, #456]	; (8006a48 <UART_SetConfig+0x6f4>)
 8006880:	fba2 2303 	umull	r2, r3, r2, r3
 8006884:	095b      	lsrs	r3, r3, #5
 8006886:	f003 020f 	and.w	r2, r3, #15
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4442      	add	r2, r8
 8006890:	609a      	str	r2, [r3, #8]
 8006892:	e0d0      	b.n	8006a36 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006894:	f7fe fa80 	bl	8004d98 <HAL_RCC_GetPCLK1Freq>
 8006898:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	469a      	mov	sl, r3
 800689e:	f04f 0b00 	mov.w	fp, #0
 80068a2:	46d0      	mov	r8, sl
 80068a4:	46d9      	mov	r9, fp
 80068a6:	eb18 0308 	adds.w	r3, r8, r8
 80068aa:	eb49 0409 	adc.w	r4, r9, r9
 80068ae:	4698      	mov	r8, r3
 80068b0:	46a1      	mov	r9, r4
 80068b2:	eb18 080a 	adds.w	r8, r8, sl
 80068b6:	eb49 090b 	adc.w	r9, r9, fp
 80068ba:	f04f 0100 	mov.w	r1, #0
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068ce:	4688      	mov	r8, r1
 80068d0:	4691      	mov	r9, r2
 80068d2:	eb1a 0508 	adds.w	r5, sl, r8
 80068d6:	eb4b 0609 	adc.w	r6, fp, r9
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	4619      	mov	r1, r3
 80068e0:	f04f 0200 	mov.w	r2, #0
 80068e4:	f04f 0300 	mov.w	r3, #0
 80068e8:	f04f 0400 	mov.w	r4, #0
 80068ec:	0094      	lsls	r4, r2, #2
 80068ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068f2:	008b      	lsls	r3, r1, #2
 80068f4:	461a      	mov	r2, r3
 80068f6:	4623      	mov	r3, r4
 80068f8:	4628      	mov	r0, r5
 80068fa:	4631      	mov	r1, r6
 80068fc:	f7fa f85a 	bl	80009b4 <__aeabi_uldivmod>
 8006900:	4603      	mov	r3, r0
 8006902:	460c      	mov	r4, r1
 8006904:	461a      	mov	r2, r3
 8006906:	4b50      	ldr	r3, [pc, #320]	; (8006a48 <UART_SetConfig+0x6f4>)
 8006908:	fba3 2302 	umull	r2, r3, r3, r2
 800690c:	095b      	lsrs	r3, r3, #5
 800690e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	469b      	mov	fp, r3
 8006916:	f04f 0c00 	mov.w	ip, #0
 800691a:	46d9      	mov	r9, fp
 800691c:	46e2      	mov	sl, ip
 800691e:	eb19 0309 	adds.w	r3, r9, r9
 8006922:	eb4a 040a 	adc.w	r4, sl, sl
 8006926:	4699      	mov	r9, r3
 8006928:	46a2      	mov	sl, r4
 800692a:	eb19 090b 	adds.w	r9, r9, fp
 800692e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006932:	f04f 0100 	mov.w	r1, #0
 8006936:	f04f 0200 	mov.w	r2, #0
 800693a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800693e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006942:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006946:	4689      	mov	r9, r1
 8006948:	4692      	mov	sl, r2
 800694a:	eb1b 0509 	adds.w	r5, fp, r9
 800694e:	eb4c 060a 	adc.w	r6, ip, sl
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	4619      	mov	r1, r3
 8006958:	f04f 0200 	mov.w	r2, #0
 800695c:	f04f 0300 	mov.w	r3, #0
 8006960:	f04f 0400 	mov.w	r4, #0
 8006964:	0094      	lsls	r4, r2, #2
 8006966:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800696a:	008b      	lsls	r3, r1, #2
 800696c:	461a      	mov	r2, r3
 800696e:	4623      	mov	r3, r4
 8006970:	4628      	mov	r0, r5
 8006972:	4631      	mov	r1, r6
 8006974:	f7fa f81e 	bl	80009b4 <__aeabi_uldivmod>
 8006978:	4603      	mov	r3, r0
 800697a:	460c      	mov	r4, r1
 800697c:	461a      	mov	r2, r3
 800697e:	4b32      	ldr	r3, [pc, #200]	; (8006a48 <UART_SetConfig+0x6f4>)
 8006980:	fba3 1302 	umull	r1, r3, r3, r2
 8006984:	095b      	lsrs	r3, r3, #5
 8006986:	2164      	movs	r1, #100	; 0x64
 8006988:	fb01 f303 	mul.w	r3, r1, r3
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	3332      	adds	r3, #50	; 0x32
 8006992:	4a2d      	ldr	r2, [pc, #180]	; (8006a48 <UART_SetConfig+0x6f4>)
 8006994:	fba2 2303 	umull	r2, r3, r2, r3
 8006998:	095b      	lsrs	r3, r3, #5
 800699a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800699e:	4498      	add	r8, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	469b      	mov	fp, r3
 80069a4:	f04f 0c00 	mov.w	ip, #0
 80069a8:	46d9      	mov	r9, fp
 80069aa:	46e2      	mov	sl, ip
 80069ac:	eb19 0309 	adds.w	r3, r9, r9
 80069b0:	eb4a 040a 	adc.w	r4, sl, sl
 80069b4:	4699      	mov	r9, r3
 80069b6:	46a2      	mov	sl, r4
 80069b8:	eb19 090b 	adds.w	r9, r9, fp
 80069bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069c0:	f04f 0100 	mov.w	r1, #0
 80069c4:	f04f 0200 	mov.w	r2, #0
 80069c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069d4:	4689      	mov	r9, r1
 80069d6:	4692      	mov	sl, r2
 80069d8:	eb1b 0509 	adds.w	r5, fp, r9
 80069dc:	eb4c 060a 	adc.w	r6, ip, sl
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	4619      	mov	r1, r3
 80069e6:	f04f 0200 	mov.w	r2, #0
 80069ea:	f04f 0300 	mov.w	r3, #0
 80069ee:	f04f 0400 	mov.w	r4, #0
 80069f2:	0094      	lsls	r4, r2, #2
 80069f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069f8:	008b      	lsls	r3, r1, #2
 80069fa:	461a      	mov	r2, r3
 80069fc:	4623      	mov	r3, r4
 80069fe:	4628      	mov	r0, r5
 8006a00:	4631      	mov	r1, r6
 8006a02:	f7f9 ffd7 	bl	80009b4 <__aeabi_uldivmod>
 8006a06:	4603      	mov	r3, r0
 8006a08:	460c      	mov	r4, r1
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	4b0e      	ldr	r3, [pc, #56]	; (8006a48 <UART_SetConfig+0x6f4>)
 8006a0e:	fba3 1302 	umull	r1, r3, r3, r2
 8006a12:	095b      	lsrs	r3, r3, #5
 8006a14:	2164      	movs	r1, #100	; 0x64
 8006a16:	fb01 f303 	mul.w	r3, r1, r3
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	011b      	lsls	r3, r3, #4
 8006a1e:	3332      	adds	r3, #50	; 0x32
 8006a20:	4a09      	ldr	r2, [pc, #36]	; (8006a48 <UART_SetConfig+0x6f4>)
 8006a22:	fba2 2303 	umull	r2, r3, r2, r3
 8006a26:	095b      	lsrs	r3, r3, #5
 8006a28:	f003 020f 	and.w	r2, r3, #15
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4442      	add	r2, r8
 8006a32:	609a      	str	r2, [r3, #8]
}
 8006a34:	e7ff      	b.n	8006a36 <UART_SetConfig+0x6e2>
 8006a36:	bf00      	nop
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a40:	40011000 	.word	0x40011000
 8006a44:	40011400 	.word	0x40011400
 8006a48:	51eb851f 	.word	0x51eb851f

08006a4c <__libc_init_array>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	4e0d      	ldr	r6, [pc, #52]	; (8006a84 <__libc_init_array+0x38>)
 8006a50:	4c0d      	ldr	r4, [pc, #52]	; (8006a88 <__libc_init_array+0x3c>)
 8006a52:	1ba4      	subs	r4, r4, r6
 8006a54:	10a4      	asrs	r4, r4, #2
 8006a56:	2500      	movs	r5, #0
 8006a58:	42a5      	cmp	r5, r4
 8006a5a:	d109      	bne.n	8006a70 <__libc_init_array+0x24>
 8006a5c:	4e0b      	ldr	r6, [pc, #44]	; (8006a8c <__libc_init_array+0x40>)
 8006a5e:	4c0c      	ldr	r4, [pc, #48]	; (8006a90 <__libc_init_array+0x44>)
 8006a60:	f000 f820 	bl	8006aa4 <_init>
 8006a64:	1ba4      	subs	r4, r4, r6
 8006a66:	10a4      	asrs	r4, r4, #2
 8006a68:	2500      	movs	r5, #0
 8006a6a:	42a5      	cmp	r5, r4
 8006a6c:	d105      	bne.n	8006a7a <__libc_init_array+0x2e>
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
 8006a70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a74:	4798      	blx	r3
 8006a76:	3501      	adds	r5, #1
 8006a78:	e7ee      	b.n	8006a58 <__libc_init_array+0xc>
 8006a7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a7e:	4798      	blx	r3
 8006a80:	3501      	adds	r5, #1
 8006a82:	e7f2      	b.n	8006a6a <__libc_init_array+0x1e>
 8006a84:	08006ae4 	.word	0x08006ae4
 8006a88:	08006ae4 	.word	0x08006ae4
 8006a8c:	08006ae4 	.word	0x08006ae4
 8006a90:	08006ae8 	.word	0x08006ae8

08006a94 <memset>:
 8006a94:	4402      	add	r2, r0
 8006a96:	4603      	mov	r3, r0
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d100      	bne.n	8006a9e <memset+0xa>
 8006a9c:	4770      	bx	lr
 8006a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006aa2:	e7f9      	b.n	8006a98 <memset+0x4>

08006aa4 <_init>:
 8006aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa6:	bf00      	nop
 8006aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aaa:	bc08      	pop	{r3}
 8006aac:	469e      	mov	lr, r3
 8006aae:	4770      	bx	lr

08006ab0 <_fini>:
 8006ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab2:	bf00      	nop
 8006ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ab6:	bc08      	pop	{r3}
 8006ab8:	469e      	mov	lr, r3
 8006aba:	4770      	bx	lr
