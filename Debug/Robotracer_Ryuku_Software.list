
Robotracer_Ryuku_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006270  08006270  00016270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006290  08006290  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006290  08006290  00016290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006298  08006298  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006298  08006298  00016298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800629c  0800629c  0001629c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080062a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000010  080062ac  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  080062ac  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f86  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020b5  00000000  00000000  00030fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d8  00000000  00000000  00033078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f8  00000000  00000000  00034250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fabc  00000000  00000000  00035348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cb6a  00000000  00000000  00054e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c406d  00000000  00000000  0006196e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001259db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dec  00000000  00000000  00125a58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006258 	.word	0x08006258

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006258 	.word	0x08006258

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b972 	b.w	8000cb0 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	4688      	mov	r8, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14b      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4615      	mov	r5, r2
 80009f6:	d967      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b14a      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 80009fe:	f1c2 0720 	rsb	r7, r2, #32
 8000a02:	fa01 f302 	lsl.w	r3, r1, r2
 8000a06:	fa20 f707 	lsr.w	r7, r0, r7
 8000a0a:	4095      	lsls	r5, r2
 8000a0c:	ea47 0803 	orr.w	r8, r7, r3
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a1c:	fa1f fc85 	uxth.w	ip, r5
 8000a20:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a24:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a28:	fb07 f10c 	mul.w	r1, r7, ip
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18eb      	adds	r3, r5, r3
 8000a32:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a36:	f080 811b 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8118 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a40:	3f02      	subs	r7, #2
 8000a42:	442b      	add	r3, r5
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a58:	45a4      	cmp	ip, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	192c      	adds	r4, r5, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8107 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a66:	45a4      	cmp	ip, r4
 8000a68:	f240 8104 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	442c      	add	r4, r5
 8000a70:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a74:	eba4 040c 	sub.w	r4, r4, ip
 8000a78:	2700      	movs	r7, #0
 8000a7a:	b11e      	cbz	r6, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c6 4300 	strd	r4, r3, [r6]
 8000a84:	4639      	mov	r1, r7
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d909      	bls.n	8000aa2 <__udivmoddi4+0xbe>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80eb 	beq.w	8000c6a <__udivmoddi4+0x286>
 8000a94:	2700      	movs	r7, #0
 8000a96:	e9c6 0100 	strd	r0, r1, [r6]
 8000a9a:	4638      	mov	r0, r7
 8000a9c:	4639      	mov	r1, r7
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	fab3 f783 	clz	r7, r3
 8000aa6:	2f00      	cmp	r7, #0
 8000aa8:	d147      	bne.n	8000b3a <__udivmoddi4+0x156>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d302      	bcc.n	8000ab4 <__udivmoddi4+0xd0>
 8000aae:	4282      	cmp	r2, r0
 8000ab0:	f200 80fa 	bhi.w	8000ca8 <__udivmoddi4+0x2c4>
 8000ab4:	1a84      	subs	r4, r0, r2
 8000ab6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aba:	2001      	movs	r0, #1
 8000abc:	4698      	mov	r8, r3
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0e0      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000ac2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ac6:	e7dd      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000ac8:	b902      	cbnz	r2, 8000acc <__udivmoddi4+0xe8>
 8000aca:	deff      	udf	#255	; 0xff
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	f040 808f 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad6:	1b49      	subs	r1, r1, r5
 8000ad8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000adc:	fa1f f885 	uxth.w	r8, r5
 8000ae0:	2701      	movs	r7, #1
 8000ae2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ae6:	0c23      	lsrs	r3, r4, #16
 8000ae8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb08 f10c 	mul.w	r1, r8, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1a59      	subs	r1, r3, r1
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b14:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x14c>
 8000b20:	192c      	adds	r4, r5, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x14a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80b6 	bhi.w	8000c9a <__udivmoddi4+0x2b6>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e79f      	b.n	8000a7a <__udivmoddi4+0x96>
 8000b3a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b3e:	40bb      	lsls	r3, r7
 8000b40:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b44:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b48:	fa01 f407 	lsl.w	r4, r1, r7
 8000b4c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b50:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b54:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b58:	4325      	orrs	r5, r4
 8000b5a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b5e:	0c2c      	lsrs	r4, r5, #16
 8000b60:	fb08 3319 	mls	r3, r8, r9, r3
 8000b64:	fa1f fa8e 	uxth.w	sl, lr
 8000b68:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b6c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b70:	429c      	cmp	r4, r3
 8000b72:	fa02 f207 	lsl.w	r2, r2, r7
 8000b76:	fa00 f107 	lsl.w	r1, r0, r7
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b84:	f080 8087 	bcs.w	8000c96 <__udivmoddi4+0x2b2>
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	f240 8084 	bls.w	8000c96 <__udivmoddi4+0x2b2>
 8000b8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b92:	4473      	add	r3, lr
 8000b94:	1b1b      	subs	r3, r3, r4
 8000b96:	b2ad      	uxth	r5, r5
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ba4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ba8:	45a2      	cmp	sl, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1e 0404 	adds.w	r4, lr, r4
 8000bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb4:	d26b      	bcs.n	8000c8e <__udivmoddi4+0x2aa>
 8000bb6:	45a2      	cmp	sl, r4
 8000bb8:	d969      	bls.n	8000c8e <__udivmoddi4+0x2aa>
 8000bba:	3802      	subs	r0, #2
 8000bbc:	4474      	add	r4, lr
 8000bbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bc6:	eba4 040a 	sub.w	r4, r4, sl
 8000bca:	454c      	cmp	r4, r9
 8000bcc:	46c2      	mov	sl, r8
 8000bce:	464b      	mov	r3, r9
 8000bd0:	d354      	bcc.n	8000c7c <__udivmoddi4+0x298>
 8000bd2:	d051      	beq.n	8000c78 <__udivmoddi4+0x294>
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d069      	beq.n	8000cac <__udivmoddi4+0x2c8>
 8000bd8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bdc:	eb64 0403 	sbc.w	r4, r4, r3
 8000be0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000be4:	40fd      	lsrs	r5, r7
 8000be6:	40fc      	lsrs	r4, r7
 8000be8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bec:	e9c6 5400 	strd	r5, r4, [r6]
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e747      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000bf4:	f1c2 0320 	rsb	r3, r2, #32
 8000bf8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bfc:	4095      	lsls	r5, r2
 8000bfe:	fa01 f002 	lsl.w	r0, r1, r2
 8000c02:	fa21 f303 	lsr.w	r3, r1, r3
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	4338      	orrs	r0, r7
 8000c0c:	0c01      	lsrs	r1, r0, #16
 8000c0e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c12:	fa1f f885 	uxth.w	r8, r5
 8000c16:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c1e:	fb07 f308 	mul.w	r3, r7, r8
 8000c22:	428b      	cmp	r3, r1
 8000c24:	fa04 f402 	lsl.w	r4, r4, r2
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x256>
 8000c2a:	1869      	adds	r1, r5, r1
 8000c2c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c30:	d22f      	bcs.n	8000c92 <__udivmoddi4+0x2ae>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d92d      	bls.n	8000c92 <__udivmoddi4+0x2ae>
 8000c36:	3f02      	subs	r7, #2
 8000c38:	4429      	add	r1, r5
 8000c3a:	1acb      	subs	r3, r1, r3
 8000c3c:	b281      	uxth	r1, r0
 8000c3e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c42:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4a:	fb00 f308 	mul.w	r3, r0, r8
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d907      	bls.n	8000c62 <__udivmoddi4+0x27e>
 8000c52:	1869      	adds	r1, r5, r1
 8000c54:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c58:	d217      	bcs.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d915      	bls.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5e:	3802      	subs	r0, #2
 8000c60:	4429      	add	r1, r5
 8000c62:	1ac9      	subs	r1, r1, r3
 8000c64:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c68:	e73b      	b.n	8000ae2 <__udivmoddi4+0xfe>
 8000c6a:	4637      	mov	r7, r6
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	e709      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c70:	4607      	mov	r7, r0
 8000c72:	e6e7      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c74:	4618      	mov	r0, r3
 8000c76:	e6fb      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c78:	4541      	cmp	r1, r8
 8000c7a:	d2ab      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c7c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c80:	eb69 020e 	sbc.w	r2, r9, lr
 8000c84:	3801      	subs	r0, #1
 8000c86:	4613      	mov	r3, r2
 8000c88:	e7a4      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8a:	4660      	mov	r0, ip
 8000c8c:	e7e9      	b.n	8000c62 <__udivmoddi4+0x27e>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	e795      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c92:	4667      	mov	r7, ip
 8000c94:	e7d1      	b.n	8000c3a <__udivmoddi4+0x256>
 8000c96:	4681      	mov	r9, r0
 8000c98:	e77c      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	442c      	add	r4, r5
 8000c9e:	e747      	b.n	8000b30 <__udivmoddi4+0x14c>
 8000ca0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca4:	442b      	add	r3, r5
 8000ca6:	e72f      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca8:	4638      	mov	r0, r7
 8000caa:	e708      	b.n	8000abe <__udivmoddi4+0xda>
 8000cac:	4637      	mov	r7, r6
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0xa0>

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <motorSet>:
static int16_t sen11[10];

uint8_t side_sensor_L, side_sensor_R;
int16_t speed_L, speed_R;

void motorSet() {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
	int16_t motorPwm_L, motorPwm_R;
	int16_t rev_motor_L, rev_motor_R;

	if(motor_L >= MAX_COUNTER_PERIOD) motor_L = MAX_COUNTER_PERIOD;
 8000cba:	4b52      	ldr	r3, [pc, #328]	; (8000e04 <motorSet+0x150>)
 8000cbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cc0:	f240 628d 	movw	r2, #1677	; 0x68d
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	dd04      	ble.n	8000cd2 <motorSet+0x1e>
 8000cc8:	4b4e      	ldr	r3, [pc, #312]	; (8000e04 <motorSet+0x150>)
 8000cca:	f240 628e 	movw	r2, #1678	; 0x68e
 8000cce:	801a      	strh	r2, [r3, #0]
 8000cd0:	e009      	b.n	8000ce6 <motorSet+0x32>
	else if(motor_L <= MIN_COUNTER_PERIOD) motor_L = MIN_COUNTER_PERIOD;
 8000cd2:	4b4c      	ldr	r3, [pc, #304]	; (8000e04 <motorSet+0x150>)
 8000cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd8:	4a4b      	ldr	r2, [pc, #300]	; (8000e08 <motorSet+0x154>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	da03      	bge.n	8000ce6 <motorSet+0x32>
 8000cde:	4b49      	ldr	r3, [pc, #292]	; (8000e04 <motorSet+0x150>)
 8000ce0:	f64f 1272 	movw	r2, #63858	; 0xf972
 8000ce4:	801a      	strh	r2, [r3, #0]

	if(motor_R >= MAX_COUNTER_PERIOD) motor_R = MAX_COUNTER_PERIOD;
 8000ce6:	4b49      	ldr	r3, [pc, #292]	; (8000e0c <motorSet+0x158>)
 8000ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cec:	f240 628d 	movw	r2, #1677	; 0x68d
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	dd04      	ble.n	8000cfe <motorSet+0x4a>
 8000cf4:	4b45      	ldr	r3, [pc, #276]	; (8000e0c <motorSet+0x158>)
 8000cf6:	f240 628e 	movw	r2, #1678	; 0x68e
 8000cfa:	801a      	strh	r2, [r3, #0]
 8000cfc:	e009      	b.n	8000d12 <motorSet+0x5e>
	else if(motor_R <= MIN_COUNTER_PERIOD) motor_R = MIN_COUNTER_PERIOD;
 8000cfe:	4b43      	ldr	r3, [pc, #268]	; (8000e0c <motorSet+0x158>)
 8000d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d04:	4a40      	ldr	r2, [pc, #256]	; (8000e08 <motorSet+0x154>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	da03      	bge.n	8000d12 <motorSet+0x5e>
 8000d0a:	4b40      	ldr	r3, [pc, #256]	; (8000e0c <motorSet+0x158>)
 8000d0c:	f64f 1272 	movw	r2, #63858	; 0xf972
 8000d10:	801a      	strh	r2, [r3, #0]

	if(motor_L >= 0){
 8000d12:	4b3c      	ldr	r3, [pc, #240]	; (8000e04 <motorSet+0x150>)
 8000d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db09      	blt.n	8000d30 <motorSet+0x7c>
		rev_motor_L = MAX_COUNTER_PERIOD - motor_L;
 8000d1c:	4b39      	ldr	r3, [pc, #228]	; (8000e04 <motorSet+0x150>)
 8000d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	f5c3 63d1 	rsb	r3, r3, #1672	; 0x688
 8000d28:	3306      	adds	r3, #6
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	80fb      	strh	r3, [r7, #6]
 8000d2e:	e007      	b.n	8000d40 <motorSet+0x8c>
	}
	else{
		rev_motor_L = MIN_COUNTER_PERIOD - motor_L;
 8000d30:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <motorSet+0x150>)
 8000d32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	4b35      	ldr	r3, [pc, #212]	; (8000e10 <motorSet+0x15c>)
 8000d3a:	1a9b      	subs	r3, r3, r2
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	80fb      	strh	r3, [r7, #6]
	}
	if(motor_R >= 0){
 8000d40:	4b32      	ldr	r3, [pc, #200]	; (8000e0c <motorSet+0x158>)
 8000d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db09      	blt.n	8000d5e <motorSet+0xaa>
		rev_motor_R = MAX_COUNTER_PERIOD - motor_R;
 8000d4a:	4b30      	ldr	r3, [pc, #192]	; (8000e0c <motorSet+0x158>)
 8000d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	f5c3 63d1 	rsb	r3, r3, #1672	; 0x688
 8000d56:	3306      	adds	r3, #6
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	80bb      	strh	r3, [r7, #4]
 8000d5c:	e007      	b.n	8000d6e <motorSet+0xba>
		}
	else{
		rev_motor_R = MIN_COUNTER_PERIOD - motor_R;
 8000d5e:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <motorSet+0x158>)
 8000d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <motorSet+0x15c>)
 8000d68:	1a9b      	subs	r3, r3, r2
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	80bb      	strh	r3, [r7, #4]
	}
	mon_rev_L = rev_motor_L;
 8000d6e:	4a29      	ldr	r2, [pc, #164]	; (8000e14 <motorSet+0x160>)
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	8013      	strh	r3, [r2, #0]
	mon_rev_R = rev_motor_R;
 8000d74:	4a28      	ldr	r2, [pc, #160]	; (8000e18 <motorSet+0x164>)
 8000d76:	88bb      	ldrh	r3, [r7, #4]
 8000d78:	8013      	strh	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, MAX_COUNTER_PERIOD);
		HAL_Delay(100);
	}
	*/

	if(rev_motor_L > 0) {
 8000d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	dd0c      	ble.n	8000d9c <motorSet+0xe8>
		motorPwm_L = rev_motor_L;
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	807b      	strh	r3, [r7, #2]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, MAX_COUNTER_PERIOD);
 8000d86:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <motorSet+0x168>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f240 628e 	movw	r2, #1678	; 0x68e
 8000d8e:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, motorPwm_L);
 8000d90:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <motorSet+0x168>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d98:	641a      	str	r2, [r3, #64]	; 0x40
 8000d9a:	e00d      	b.n	8000db8 <motorSet+0x104>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, MAX_COUNTER_PERIOD);
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, MAX_COUNTER_PERIOD);
	}
	*/
	else {
		motorPwm_L = rev_motor_L*(-1) ;
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	425b      	negs	r3, r3
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	807b      	strh	r3, [r7, #2]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motorPwm_L);
 8000da4:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <motorSet+0x168>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000dac:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, MAX_COUNTER_PERIOD);
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <motorSet+0x168>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f240 628e 	movw	r2, #1678	; 0x68e
 8000db6:	641a      	str	r2, [r3, #64]	; 0x40
	}


	if(rev_motor_R > 0) {
 8000db8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	dd0c      	ble.n	8000dda <motorSet+0x126>
		motorPwm_R = rev_motor_R;
 8000dc0:	88bb      	ldrh	r3, [r7, #4]
 8000dc2:	803b      	strh	r3, [r7, #0]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, MAX_COUNTER_PERIOD);
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <motorSet+0x168>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f240 628e 	movw	r2, #1678	; 0x68e
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, motorPwm_R);
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <motorSet+0x168>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000dd6:	639a      	str	r2, [r3, #56]	; 0x38
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motorPwm_R);
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, MAX_COUNTER_PERIOD);
	}

}
 8000dd8:	e00d      	b.n	8000df6 <motorSet+0x142>
		motorPwm_R = rev_motor_R * (-1);
 8000dda:	88bb      	ldrh	r3, [r7, #4]
 8000ddc:	425b      	negs	r3, r3
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	803b      	strh	r3, [r7, #0]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motorPwm_R);
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <motorSet+0x168>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000dea:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, MAX_COUNTER_PERIOD);
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <motorSet+0x168>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f240 628e 	movw	r2, #1678	; 0x68e
 8000df4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200001ae 	.word	0x200001ae
 8000e08:	fffff973 	.word	0xfffff973
 8000e0c:	20000194 	.word	0x20000194
 8000e10:	fffff972 	.word	0xfffff972
 8000e14:	200001b8 	.word	0x200001b8
 8000e18:	200001b6 	.word	0x200001b6
 8000e1c:	20000140 	.word	0x20000140

08000e20 <storeAdBuffer>:

void storeAdBuffer(void) {
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
	static uint8_t index;
	sen0[index] = analog[0];
 8000e24:	4b3e      	ldr	r3, [pc, #248]	; (8000f20 <storeAdBuffer+0x100>)
 8000e26:	8819      	ldrh	r1, [r3, #0]
 8000e28:	4b3e      	ldr	r3, [pc, #248]	; (8000f24 <storeAdBuffer+0x104>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	b209      	sxth	r1, r1
 8000e30:	4b3d      	ldr	r3, [pc, #244]	; (8000f28 <storeAdBuffer+0x108>)
 8000e32:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen1[index] = analog[1];
 8000e36:	4b3a      	ldr	r3, [pc, #232]	; (8000f20 <storeAdBuffer+0x100>)
 8000e38:	8859      	ldrh	r1, [r3, #2]
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <storeAdBuffer+0x104>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	b209      	sxth	r1, r1
 8000e42:	4b3a      	ldr	r3, [pc, #232]	; (8000f2c <storeAdBuffer+0x10c>)
 8000e44:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen2[index] = analog[2];
 8000e48:	4b35      	ldr	r3, [pc, #212]	; (8000f20 <storeAdBuffer+0x100>)
 8000e4a:	8899      	ldrh	r1, [r3, #4]
 8000e4c:	4b35      	ldr	r3, [pc, #212]	; (8000f24 <storeAdBuffer+0x104>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	b209      	sxth	r1, r1
 8000e54:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <storeAdBuffer+0x110>)
 8000e56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen3[index] = analog[3];
 8000e5a:	4b31      	ldr	r3, [pc, #196]	; (8000f20 <storeAdBuffer+0x100>)
 8000e5c:	88d9      	ldrh	r1, [r3, #6]
 8000e5e:	4b31      	ldr	r3, [pc, #196]	; (8000f24 <storeAdBuffer+0x104>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	b209      	sxth	r1, r1
 8000e66:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <storeAdBuffer+0x114>)
 8000e68:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen4[index] = analog[4];
 8000e6c:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <storeAdBuffer+0x100>)
 8000e6e:	8919      	ldrh	r1, [r3, #8]
 8000e70:	4b2c      	ldr	r3, [pc, #176]	; (8000f24 <storeAdBuffer+0x104>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	b209      	sxth	r1, r1
 8000e78:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <storeAdBuffer+0x118>)
 8000e7a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen5[index] = analog[5];
 8000e7e:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <storeAdBuffer+0x100>)
 8000e80:	8959      	ldrh	r1, [r3, #10]
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <storeAdBuffer+0x104>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	b209      	sxth	r1, r1
 8000e8a:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <storeAdBuffer+0x11c>)
 8000e8c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen6[index] = analog[6];
 8000e90:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <storeAdBuffer+0x100>)
 8000e92:	8999      	ldrh	r1, [r3, #12]
 8000e94:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <storeAdBuffer+0x104>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	b209      	sxth	r1, r1
 8000e9c:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <storeAdBuffer+0x120>)
 8000e9e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen7[index] = analog[10];
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <storeAdBuffer+0x100>)
 8000ea4:	8a99      	ldrh	r1, [r3, #20]
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <storeAdBuffer+0x104>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	b209      	sxth	r1, r1
 8000eae:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <storeAdBuffer+0x124>)
 8000eb0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen8[index] = analog[7];
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <storeAdBuffer+0x100>)
 8000eb6:	89d9      	ldrh	r1, [r3, #14]
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <storeAdBuffer+0x104>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	b209      	sxth	r1, r1
 8000ec0:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <storeAdBuffer+0x128>)
 8000ec2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen9[index] = analog[8];
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <storeAdBuffer+0x100>)
 8000ec8:	8a19      	ldrh	r1, [r3, #16]
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <storeAdBuffer+0x104>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	b209      	sxth	r1, r1
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <storeAdBuffer+0x12c>)
 8000ed4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen10[index] = analog[9];
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <storeAdBuffer+0x100>)
 8000eda:	8a59      	ldrh	r1, [r3, #18]
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <storeAdBuffer+0x104>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	b209      	sxth	r1, r1
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <storeAdBuffer+0x130>)
 8000ee6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sen11[index] = analog[11];
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <storeAdBuffer+0x100>)
 8000eec:	8ad9      	ldrh	r1, [r3, #22]
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <storeAdBuffer+0x104>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	b209      	sxth	r1, r1
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <storeAdBuffer+0x134>)
 8000ef8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	index++;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <storeAdBuffer+0x104>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <storeAdBuffer+0x104>)
 8000f06:	701a      	strb	r2, [r3, #0]
	if(index == 10) index = 0;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <storeAdBuffer+0x104>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b0a      	cmp	r3, #10
 8000f0e:	d102      	bne.n	8000f16 <storeAdBuffer+0xf6>
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <storeAdBuffer+0x104>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	200001c4 	.word	0x200001c4
 8000f24:	2000011c 	.word	0x2000011c
 8000f28:	2000002c 	.word	0x2000002c
 8000f2c:	20000040 	.word	0x20000040
 8000f30:	20000054 	.word	0x20000054
 8000f34:	20000068 	.word	0x20000068
 8000f38:	2000007c 	.word	0x2000007c
 8000f3c:	20000090 	.word	0x20000090
 8000f40:	200000a4 	.word	0x200000a4
 8000f44:	200000b8 	.word	0x200000b8
 8000f48:	200000cc 	.word	0x200000cc
 8000f4c:	200000e0 	.word	0x200000e0
 8000f50:	200000f4 	.word	0x200000f4
 8000f54:	20000108 	.word	0x20000108

08000f58 <getAnalogsensor>:

void getAnalogsensor(void) {
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
	sensor0 = ( sen0[0] + sen0[1] + sen0[2] + sen0[3] + sen0[4] + sen0[5] + sen0[6] + sen0[7] + sen0[8] + sen0[9] ) / 10;
 8000f5c:	4bc5      	ldr	r3, [pc, #788]	; (8001274 <getAnalogsensor+0x31c>)
 8000f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f62:	461a      	mov	r2, r3
 8000f64:	4bc3      	ldr	r3, [pc, #780]	; (8001274 <getAnalogsensor+0x31c>)
 8000f66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4ac1      	ldr	r2, [pc, #772]	; (8001274 <getAnalogsensor+0x31c>)
 8000f6e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	4abf      	ldr	r2, [pc, #764]	; (8001274 <getAnalogsensor+0x31c>)
 8000f76:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4abd      	ldr	r2, [pc, #756]	; (8001274 <getAnalogsensor+0x31c>)
 8000f7e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8000f82:	4413      	add	r3, r2
 8000f84:	4abb      	ldr	r2, [pc, #748]	; (8001274 <getAnalogsensor+0x31c>)
 8000f86:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4ab9      	ldr	r2, [pc, #740]	; (8001274 <getAnalogsensor+0x31c>)
 8000f8e:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8000f92:	4413      	add	r3, r2
 8000f94:	4ab7      	ldr	r2, [pc, #732]	; (8001274 <getAnalogsensor+0x31c>)
 8000f96:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4ab5      	ldr	r2, [pc, #724]	; (8001274 <getAnalogsensor+0x31c>)
 8000f9e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4ab3      	ldr	r2, [pc, #716]	; (8001274 <getAnalogsensor+0x31c>)
 8000fa6:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8000faa:	4413      	add	r3, r2
 8000fac:	4ab2      	ldr	r2, [pc, #712]	; (8001278 <getAnalogsensor+0x320>)
 8000fae:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb2:	1092      	asrs	r2, r2, #2
 8000fb4:	17db      	asrs	r3, r3, #31
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	4bb0      	ldr	r3, [pc, #704]	; (800127c <getAnalogsensor+0x324>)
 8000fbc:	801a      	strh	r2, [r3, #0]
	sensor1 = ( sen1[0] + sen1[1] + sen1[2] + sen1[3] + sen1[4] + sen1[5] + sen1[6] + sen1[7] + sen1[8] + sen1[9] ) / 10;
 8000fbe:	4bb0      	ldr	r3, [pc, #704]	; (8001280 <getAnalogsensor+0x328>)
 8000fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4bae      	ldr	r3, [pc, #696]	; (8001280 <getAnalogsensor+0x328>)
 8000fc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fcc:	4413      	add	r3, r2
 8000fce:	4aac      	ldr	r2, [pc, #688]	; (8001280 <getAnalogsensor+0x328>)
 8000fd0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4aaa      	ldr	r2, [pc, #680]	; (8001280 <getAnalogsensor+0x328>)
 8000fd8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4aa8      	ldr	r2, [pc, #672]	; (8001280 <getAnalogsensor+0x328>)
 8000fe0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4aa6      	ldr	r2, [pc, #664]	; (8001280 <getAnalogsensor+0x328>)
 8000fe8:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8000fec:	4413      	add	r3, r2
 8000fee:	4aa4      	ldr	r2, [pc, #656]	; (8001280 <getAnalogsensor+0x328>)
 8000ff0:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4aa2      	ldr	r2, [pc, #648]	; (8001280 <getAnalogsensor+0x328>)
 8000ff8:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	4aa0      	ldr	r2, [pc, #640]	; (8001280 <getAnalogsensor+0x328>)
 8001000:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001004:	4413      	add	r3, r2
 8001006:	4a9e      	ldr	r2, [pc, #632]	; (8001280 <getAnalogsensor+0x328>)
 8001008:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800100c:	4413      	add	r3, r2
 800100e:	4a9a      	ldr	r2, [pc, #616]	; (8001278 <getAnalogsensor+0x320>)
 8001010:	fb82 1203 	smull	r1, r2, r2, r3
 8001014:	1092      	asrs	r2, r2, #2
 8001016:	17db      	asrs	r3, r3, #31
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	b21a      	sxth	r2, r3
 800101c:	4b99      	ldr	r3, [pc, #612]	; (8001284 <getAnalogsensor+0x32c>)
 800101e:	801a      	strh	r2, [r3, #0]
	sensor2 = ( sen2[0] + sen2[1] + sen2[2] + sen2[3] + sen2[4] + sen2[5] + sen2[6] + sen2[7] + sen2[8] + sen2[9] ) / 10;
 8001020:	4b99      	ldr	r3, [pc, #612]	; (8001288 <getAnalogsensor+0x330>)
 8001022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001026:	461a      	mov	r2, r3
 8001028:	4b97      	ldr	r3, [pc, #604]	; (8001288 <getAnalogsensor+0x330>)
 800102a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800102e:	4413      	add	r3, r2
 8001030:	4a95      	ldr	r2, [pc, #596]	; (8001288 <getAnalogsensor+0x330>)
 8001032:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001036:	4413      	add	r3, r2
 8001038:	4a93      	ldr	r2, [pc, #588]	; (8001288 <getAnalogsensor+0x330>)
 800103a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800103e:	4413      	add	r3, r2
 8001040:	4a91      	ldr	r2, [pc, #580]	; (8001288 <getAnalogsensor+0x330>)
 8001042:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001046:	4413      	add	r3, r2
 8001048:	4a8f      	ldr	r2, [pc, #572]	; (8001288 <getAnalogsensor+0x330>)
 800104a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800104e:	4413      	add	r3, r2
 8001050:	4a8d      	ldr	r2, [pc, #564]	; (8001288 <getAnalogsensor+0x330>)
 8001052:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001056:	4413      	add	r3, r2
 8001058:	4a8b      	ldr	r2, [pc, #556]	; (8001288 <getAnalogsensor+0x330>)
 800105a:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800105e:	4413      	add	r3, r2
 8001060:	4a89      	ldr	r2, [pc, #548]	; (8001288 <getAnalogsensor+0x330>)
 8001062:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001066:	4413      	add	r3, r2
 8001068:	4a87      	ldr	r2, [pc, #540]	; (8001288 <getAnalogsensor+0x330>)
 800106a:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800106e:	4413      	add	r3, r2
 8001070:	4a81      	ldr	r2, [pc, #516]	; (8001278 <getAnalogsensor+0x320>)
 8001072:	fb82 1203 	smull	r1, r2, r2, r3
 8001076:	1092      	asrs	r2, r2, #2
 8001078:	17db      	asrs	r3, r3, #31
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	b21a      	sxth	r2, r3
 800107e:	4b83      	ldr	r3, [pc, #524]	; (800128c <getAnalogsensor+0x334>)
 8001080:	801a      	strh	r2, [r3, #0]
	sensor3 = ( sen3[0] + sen3[1] + sen3[2] + sen3[3] + sen3[4] + sen3[5] + sen3[6] + sen3[7] + sen3[8] + sen3[9] ) / 10;
 8001082:	4b83      	ldr	r3, [pc, #524]	; (8001290 <getAnalogsensor+0x338>)
 8001084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001088:	461a      	mov	r2, r3
 800108a:	4b81      	ldr	r3, [pc, #516]	; (8001290 <getAnalogsensor+0x338>)
 800108c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001090:	4413      	add	r3, r2
 8001092:	4a7f      	ldr	r2, [pc, #508]	; (8001290 <getAnalogsensor+0x338>)
 8001094:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a7d      	ldr	r2, [pc, #500]	; (8001290 <getAnalogsensor+0x338>)
 800109c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a7b      	ldr	r2, [pc, #492]	; (8001290 <getAnalogsensor+0x338>)
 80010a4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a79      	ldr	r2, [pc, #484]	; (8001290 <getAnalogsensor+0x338>)
 80010ac:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a77      	ldr	r2, [pc, #476]	; (8001290 <getAnalogsensor+0x338>)
 80010b4:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a75      	ldr	r2, [pc, #468]	; (8001290 <getAnalogsensor+0x338>)
 80010bc:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80010c0:	4413      	add	r3, r2
 80010c2:	4a73      	ldr	r2, [pc, #460]	; (8001290 <getAnalogsensor+0x338>)
 80010c4:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a71      	ldr	r2, [pc, #452]	; (8001290 <getAnalogsensor+0x338>)
 80010cc:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a69      	ldr	r2, [pc, #420]	; (8001278 <getAnalogsensor+0x320>)
 80010d4:	fb82 1203 	smull	r1, r2, r2, r3
 80010d8:	1092      	asrs	r2, r2, #2
 80010da:	17db      	asrs	r3, r3, #31
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	b21a      	sxth	r2, r3
 80010e0:	4b6c      	ldr	r3, [pc, #432]	; (8001294 <getAnalogsensor+0x33c>)
 80010e2:	801a      	strh	r2, [r3, #0]
	sensor4 = ( sen4[0] + sen4[1] + sen4[2] + sen4[3] + sen4[4] + sen4[5] + sen4[6] + sen4[7] + sen4[8] + sen4[9] ) / 10;
 80010e4:	4b6c      	ldr	r3, [pc, #432]	; (8001298 <getAnalogsensor+0x340>)
 80010e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b6a      	ldr	r3, [pc, #424]	; (8001298 <getAnalogsensor+0x340>)
 80010ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a68      	ldr	r2, [pc, #416]	; (8001298 <getAnalogsensor+0x340>)
 80010f6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a66      	ldr	r2, [pc, #408]	; (8001298 <getAnalogsensor+0x340>)
 80010fe:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001102:	4413      	add	r3, r2
 8001104:	4a64      	ldr	r2, [pc, #400]	; (8001298 <getAnalogsensor+0x340>)
 8001106:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800110a:	4413      	add	r3, r2
 800110c:	4a62      	ldr	r2, [pc, #392]	; (8001298 <getAnalogsensor+0x340>)
 800110e:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001112:	4413      	add	r3, r2
 8001114:	4a60      	ldr	r2, [pc, #384]	; (8001298 <getAnalogsensor+0x340>)
 8001116:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800111a:	4413      	add	r3, r2
 800111c:	4a5e      	ldr	r2, [pc, #376]	; (8001298 <getAnalogsensor+0x340>)
 800111e:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001122:	4413      	add	r3, r2
 8001124:	4a5c      	ldr	r2, [pc, #368]	; (8001298 <getAnalogsensor+0x340>)
 8001126:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800112a:	4413      	add	r3, r2
 800112c:	4a5a      	ldr	r2, [pc, #360]	; (8001298 <getAnalogsensor+0x340>)
 800112e:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001132:	4413      	add	r3, r2
 8001134:	4a50      	ldr	r2, [pc, #320]	; (8001278 <getAnalogsensor+0x320>)
 8001136:	fb82 1203 	smull	r1, r2, r2, r3
 800113a:	1092      	asrs	r2, r2, #2
 800113c:	17db      	asrs	r3, r3, #31
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	b21a      	sxth	r2, r3
 8001142:	4b56      	ldr	r3, [pc, #344]	; (800129c <getAnalogsensor+0x344>)
 8001144:	801a      	strh	r2, [r3, #0]
	sensor5 = ( sen5[0] + sen5[1] + sen5[2] + sen5[3] + sen5[4] + sen5[5] + sen5[6] + sen5[7] + sen5[8] + sen5[9] ) / 10;
 8001146:	4b56      	ldr	r3, [pc, #344]	; (80012a0 <getAnalogsensor+0x348>)
 8001148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114c:	461a      	mov	r2, r3
 800114e:	4b54      	ldr	r3, [pc, #336]	; (80012a0 <getAnalogsensor+0x348>)
 8001150:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001154:	4413      	add	r3, r2
 8001156:	4a52      	ldr	r2, [pc, #328]	; (80012a0 <getAnalogsensor+0x348>)
 8001158:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800115c:	4413      	add	r3, r2
 800115e:	4a50      	ldr	r2, [pc, #320]	; (80012a0 <getAnalogsensor+0x348>)
 8001160:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001164:	4413      	add	r3, r2
 8001166:	4a4e      	ldr	r2, [pc, #312]	; (80012a0 <getAnalogsensor+0x348>)
 8001168:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800116c:	4413      	add	r3, r2
 800116e:	4a4c      	ldr	r2, [pc, #304]	; (80012a0 <getAnalogsensor+0x348>)
 8001170:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001174:	4413      	add	r3, r2
 8001176:	4a4a      	ldr	r2, [pc, #296]	; (80012a0 <getAnalogsensor+0x348>)
 8001178:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800117c:	4413      	add	r3, r2
 800117e:	4a48      	ldr	r2, [pc, #288]	; (80012a0 <getAnalogsensor+0x348>)
 8001180:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001184:	4413      	add	r3, r2
 8001186:	4a46      	ldr	r2, [pc, #280]	; (80012a0 <getAnalogsensor+0x348>)
 8001188:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800118c:	4413      	add	r3, r2
 800118e:	4a44      	ldr	r2, [pc, #272]	; (80012a0 <getAnalogsensor+0x348>)
 8001190:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001194:	4413      	add	r3, r2
 8001196:	4a38      	ldr	r2, [pc, #224]	; (8001278 <getAnalogsensor+0x320>)
 8001198:	fb82 1203 	smull	r1, r2, r2, r3
 800119c:	1092      	asrs	r2, r2, #2
 800119e:	17db      	asrs	r3, r3, #31
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <getAnalogsensor+0x34c>)
 80011a6:	801a      	strh	r2, [r3, #0]
	sensor6 = ( sen6[0] + sen6[1] + sen6[2] + sen6[3] + sen6[4] + sen6[5] + sen6[6] + sen6[7] + sen6[8] + sen6[9] ) / 10;
 80011a8:	4b3f      	ldr	r3, [pc, #252]	; (80012a8 <getAnalogsensor+0x350>)
 80011aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <getAnalogsensor+0x350>)
 80011b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a3b      	ldr	r2, [pc, #236]	; (80012a8 <getAnalogsensor+0x350>)
 80011ba:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	4a39      	ldr	r2, [pc, #228]	; (80012a8 <getAnalogsensor+0x350>)
 80011c2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80011c6:	4413      	add	r3, r2
 80011c8:	4a37      	ldr	r2, [pc, #220]	; (80012a8 <getAnalogsensor+0x350>)
 80011ca:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a35      	ldr	r2, [pc, #212]	; (80012a8 <getAnalogsensor+0x350>)
 80011d2:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a33      	ldr	r2, [pc, #204]	; (80012a8 <getAnalogsensor+0x350>)
 80011da:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	4a31      	ldr	r2, [pc, #196]	; (80012a8 <getAnalogsensor+0x350>)
 80011e2:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a2f      	ldr	r2, [pc, #188]	; (80012a8 <getAnalogsensor+0x350>)
 80011ea:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a2d      	ldr	r2, [pc, #180]	; (80012a8 <getAnalogsensor+0x350>)
 80011f2:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a1f      	ldr	r2, [pc, #124]	; (8001278 <getAnalogsensor+0x320>)
 80011fa:	fb82 1203 	smull	r1, r2, r2, r3
 80011fe:	1092      	asrs	r2, r2, #2
 8001200:	17db      	asrs	r3, r3, #31
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	b21a      	sxth	r2, r3
 8001206:	4b29      	ldr	r3, [pc, #164]	; (80012ac <getAnalogsensor+0x354>)
 8001208:	801a      	strh	r2, [r3, #0]
	sensor7 = ( sen7[0] + sen7[1] + sen7[2] + sen7[3] + sen7[4] + sen7[5] + sen7[6] + sen7[7] + sen7[8] + sen7[9] ) / 10;
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <getAnalogsensor+0x358>)
 800120c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001210:	461a      	mov	r2, r3
 8001212:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <getAnalogsensor+0x358>)
 8001214:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001218:	4413      	add	r3, r2
 800121a:	4a25      	ldr	r2, [pc, #148]	; (80012b0 <getAnalogsensor+0x358>)
 800121c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001220:	4413      	add	r3, r2
 8001222:	4a23      	ldr	r2, [pc, #140]	; (80012b0 <getAnalogsensor+0x358>)
 8001224:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001228:	4413      	add	r3, r2
 800122a:	4a21      	ldr	r2, [pc, #132]	; (80012b0 <getAnalogsensor+0x358>)
 800122c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001230:	4413      	add	r3, r2
 8001232:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <getAnalogsensor+0x358>)
 8001234:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001238:	4413      	add	r3, r2
 800123a:	4a1d      	ldr	r2, [pc, #116]	; (80012b0 <getAnalogsensor+0x358>)
 800123c:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001240:	4413      	add	r3, r2
 8001242:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <getAnalogsensor+0x358>)
 8001244:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001248:	4413      	add	r3, r2
 800124a:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <getAnalogsensor+0x358>)
 800124c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001250:	4413      	add	r3, r2
 8001252:	4a17      	ldr	r2, [pc, #92]	; (80012b0 <getAnalogsensor+0x358>)
 8001254:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001258:	4413      	add	r3, r2
 800125a:	4a07      	ldr	r2, [pc, #28]	; (8001278 <getAnalogsensor+0x320>)
 800125c:	fb82 1203 	smull	r1, r2, r2, r3
 8001260:	1092      	asrs	r2, r2, #2
 8001262:	17db      	asrs	r3, r3, #31
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	b21a      	sxth	r2, r3
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <getAnalogsensor+0x35c>)
 800126a:	801a      	strh	r2, [r3, #0]
	sensor8 = ( sen8[0] + sen8[1] + sen8[2] + sen8[3] + sen8[4] + sen8[5] + sen8[6] + sen8[7] + sen8[8] + sen8[9] ) / 10;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <getAnalogsensor+0x360>)
 800126e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001272:	e023      	b.n	80012bc <getAnalogsensor+0x364>
 8001274:	2000002c 	.word	0x2000002c
 8001278:	66666667 	.word	0x66666667
 800127c:	2000013c 	.word	0x2000013c
 8001280:	20000040 	.word	0x20000040
 8001284:	200001b4 	.word	0x200001b4
 8001288:	20000054 	.word	0x20000054
 800128c:	200001be 	.word	0x200001be
 8001290:	20000068 	.word	0x20000068
 8001294:	20000198 	.word	0x20000198
 8001298:	2000007c 	.word	0x2000007c
 800129c:	200001b2 	.word	0x200001b2
 80012a0:	20000090 	.word	0x20000090
 80012a4:	200001b0 	.word	0x200001b0
 80012a8:	200000a4 	.word	0x200000a4
 80012ac:	20000196 	.word	0x20000196
 80012b0:	200000b8 	.word	0x200000b8
 80012b4:	20000190 	.word	0x20000190
 80012b8:	200000cc 	.word	0x200000cc
 80012bc:	461a      	mov	r2, r3
 80012be:	4b62      	ldr	r3, [pc, #392]	; (8001448 <getAnalogsensor+0x4f0>)
 80012c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a60      	ldr	r2, [pc, #384]	; (8001448 <getAnalogsensor+0x4f0>)
 80012c8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	4a5e      	ldr	r2, [pc, #376]	; (8001448 <getAnalogsensor+0x4f0>)
 80012d0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a5c      	ldr	r2, [pc, #368]	; (8001448 <getAnalogsensor+0x4f0>)
 80012d8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80012dc:	4413      	add	r3, r2
 80012de:	4a5a      	ldr	r2, [pc, #360]	; (8001448 <getAnalogsensor+0x4f0>)
 80012e0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80012e4:	4413      	add	r3, r2
 80012e6:	4a58      	ldr	r2, [pc, #352]	; (8001448 <getAnalogsensor+0x4f0>)
 80012e8:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a56      	ldr	r2, [pc, #344]	; (8001448 <getAnalogsensor+0x4f0>)
 80012f0:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80012f4:	4413      	add	r3, r2
 80012f6:	4a54      	ldr	r2, [pc, #336]	; (8001448 <getAnalogsensor+0x4f0>)
 80012f8:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80012fc:	4413      	add	r3, r2
 80012fe:	4a52      	ldr	r2, [pc, #328]	; (8001448 <getAnalogsensor+0x4f0>)
 8001300:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001304:	4413      	add	r3, r2
 8001306:	4a51      	ldr	r2, [pc, #324]	; (800144c <getAnalogsensor+0x4f4>)
 8001308:	fb82 1203 	smull	r1, r2, r2, r3
 800130c:	1092      	asrs	r2, r2, #2
 800130e:	17db      	asrs	r3, r3, #31
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	b21a      	sxth	r2, r3
 8001314:	4b4e      	ldr	r3, [pc, #312]	; (8001450 <getAnalogsensor+0x4f8>)
 8001316:	801a      	strh	r2, [r3, #0]
	sensor9 = ( sen9[0] + sen9[1] + sen9[2] + sen9[3] + sen9[4] + sen9[5] + sen9[6] + sen9[7] + sen9[8] + sen9[9] ) / 10;
 8001318:	4b4e      	ldr	r3, [pc, #312]	; (8001454 <getAnalogsensor+0x4fc>)
 800131a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800131e:	461a      	mov	r2, r3
 8001320:	4b4c      	ldr	r3, [pc, #304]	; (8001454 <getAnalogsensor+0x4fc>)
 8001322:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001326:	4413      	add	r3, r2
 8001328:	4a4a      	ldr	r2, [pc, #296]	; (8001454 <getAnalogsensor+0x4fc>)
 800132a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800132e:	4413      	add	r3, r2
 8001330:	4a48      	ldr	r2, [pc, #288]	; (8001454 <getAnalogsensor+0x4fc>)
 8001332:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001336:	4413      	add	r3, r2
 8001338:	4a46      	ldr	r2, [pc, #280]	; (8001454 <getAnalogsensor+0x4fc>)
 800133a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800133e:	4413      	add	r3, r2
 8001340:	4a44      	ldr	r2, [pc, #272]	; (8001454 <getAnalogsensor+0x4fc>)
 8001342:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001346:	4413      	add	r3, r2
 8001348:	4a42      	ldr	r2, [pc, #264]	; (8001454 <getAnalogsensor+0x4fc>)
 800134a:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800134e:	4413      	add	r3, r2
 8001350:	4a40      	ldr	r2, [pc, #256]	; (8001454 <getAnalogsensor+0x4fc>)
 8001352:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001356:	4413      	add	r3, r2
 8001358:	4a3e      	ldr	r2, [pc, #248]	; (8001454 <getAnalogsensor+0x4fc>)
 800135a:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800135e:	4413      	add	r3, r2
 8001360:	4a3c      	ldr	r2, [pc, #240]	; (8001454 <getAnalogsensor+0x4fc>)
 8001362:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001366:	4413      	add	r3, r2
 8001368:	4a38      	ldr	r2, [pc, #224]	; (800144c <getAnalogsensor+0x4f4>)
 800136a:	fb82 1203 	smull	r1, r2, r2, r3
 800136e:	1092      	asrs	r2, r2, #2
 8001370:	17db      	asrs	r3, r3, #31
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	b21a      	sxth	r2, r3
 8001376:	4b38      	ldr	r3, [pc, #224]	; (8001458 <getAnalogsensor+0x500>)
 8001378:	801a      	strh	r2, [r3, #0]
	sensor10 = ( sen10[0] + sen10[1] + sen10[2] + sen10[3] + sen10[4] + sen10[5] + sen10[6] + sen10[7] + sen10[8] + sen10[9] ) / 10;
 800137a:	4b38      	ldr	r3, [pc, #224]	; (800145c <getAnalogsensor+0x504>)
 800137c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001380:	461a      	mov	r2, r3
 8001382:	4b36      	ldr	r3, [pc, #216]	; (800145c <getAnalogsensor+0x504>)
 8001384:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001388:	4413      	add	r3, r2
 800138a:	4a34      	ldr	r2, [pc, #208]	; (800145c <getAnalogsensor+0x504>)
 800138c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001390:	4413      	add	r3, r2
 8001392:	4a32      	ldr	r2, [pc, #200]	; (800145c <getAnalogsensor+0x504>)
 8001394:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001398:	4413      	add	r3, r2
 800139a:	4a30      	ldr	r2, [pc, #192]	; (800145c <getAnalogsensor+0x504>)
 800139c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80013a0:	4413      	add	r3, r2
 80013a2:	4a2e      	ldr	r2, [pc, #184]	; (800145c <getAnalogsensor+0x504>)
 80013a4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a2c      	ldr	r2, [pc, #176]	; (800145c <getAnalogsensor+0x504>)
 80013ac:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a2a      	ldr	r2, [pc, #168]	; (800145c <getAnalogsensor+0x504>)
 80013b4:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a28      	ldr	r2, [pc, #160]	; (800145c <getAnalogsensor+0x504>)
 80013bc:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a26      	ldr	r2, [pc, #152]	; (800145c <getAnalogsensor+0x504>)
 80013c4:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80013c8:	4413      	add	r3, r2
 80013ca:	4a20      	ldr	r2, [pc, #128]	; (800144c <getAnalogsensor+0x4f4>)
 80013cc:	fb82 1203 	smull	r1, r2, r2, r3
 80013d0:	1092      	asrs	r2, r2, #2
 80013d2:	17db      	asrs	r3, r3, #31
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	4b21      	ldr	r3, [pc, #132]	; (8001460 <getAnalogsensor+0x508>)
 80013da:	801a      	strh	r2, [r3, #0]
	sensor11 = ( sen11[0] + sen11[1] + sen11[2] + sen11[3] + sen11[4] + sen11[5] + sen11[6] + sen11[7] + sen11[8] + sen11[9] ) / 10;
 80013dc:	4b21      	ldr	r3, [pc, #132]	; (8001464 <getAnalogsensor+0x50c>)
 80013de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <getAnalogsensor+0x50c>)
 80013e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <getAnalogsensor+0x50c>)
 80013ee:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a1b      	ldr	r2, [pc, #108]	; (8001464 <getAnalogsensor+0x50c>)
 80013f6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a19      	ldr	r2, [pc, #100]	; (8001464 <getAnalogsensor+0x50c>)
 80013fe:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001402:	4413      	add	r3, r2
 8001404:	4a17      	ldr	r2, [pc, #92]	; (8001464 <getAnalogsensor+0x50c>)
 8001406:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800140a:	4413      	add	r3, r2
 800140c:	4a15      	ldr	r2, [pc, #84]	; (8001464 <getAnalogsensor+0x50c>)
 800140e:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001412:	4413      	add	r3, r2
 8001414:	4a13      	ldr	r2, [pc, #76]	; (8001464 <getAnalogsensor+0x50c>)
 8001416:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800141a:	4413      	add	r3, r2
 800141c:	4a11      	ldr	r2, [pc, #68]	; (8001464 <getAnalogsensor+0x50c>)
 800141e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001422:	4413      	add	r3, r2
 8001424:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <getAnalogsensor+0x50c>)
 8001426:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800142a:	4413      	add	r3, r2
 800142c:	4a07      	ldr	r2, [pc, #28]	; (800144c <getAnalogsensor+0x4f4>)
 800142e:	fb82 1203 	smull	r1, r2, r2, r3
 8001432:	1092      	asrs	r2, r2, #2
 8001434:	17db      	asrs	r3, r3, #31
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	b21a      	sxth	r2, r3
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <getAnalogsensor+0x510>)
 800143c:	801a      	strh	r2, [r3, #0]


}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	200000cc 	.word	0x200000cc
 800144c:	66666667 	.word	0x66666667
 8001450:	200001bc 	.word	0x200001bc
 8001454:	200000e0 	.word	0x200000e0
 8001458:	200001ac 	.word	0x200001ac
 800145c:	200000f4 	.word	0x200000f4
 8001460:	20000192 	.word	0x20000192
 8001464:	20000108 	.word	0x20000108
 8001468:	20000138 	.word	0x20000138
 800146c:	00000000 	.word	0x00000000

08001470 <lineTrace>:

void lineTrace(void){
 8001470:	b5b0      	push	{r4, r5, r7, lr}
 8001472:	b08c      	sub	sp, #48	; 0x30
 8001474:	af00      	add	r7, sp, #0
	double p, d;
	static double i;
	double kp = 1.0, ki = 0., kd = 0.01;
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	4c87      	ldr	r4, [pc, #540]	; (8001698 <lineTrace+0x228>)
 800147c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	f04f 0400 	mov.w	r4, #0
 8001488:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800148c:	a47e      	add	r4, pc, #504	; (adr r4, 8001688 <lineTrace+0x218>)
 800148e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001492:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double def = 0.;
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	f04f 0400 	mov.w	r4, #0
 800149e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	/*if(i_pos_clear_flag == 1){
		i_pos = 0;
		i_pos_clear_flag = 0;
	}*/

	def = ( ( sensor0 + sensor1 + sensor2 + sensor3 + sensor4 + sensor5 ) / 6 ) - ( ( sensor6 + sensor7 + sensor8 + sensor9 + sensor10 + sensor11 ) / 6 );
 80014a2:	4b7e      	ldr	r3, [pc, #504]	; (800169c <lineTrace+0x22c>)
 80014a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b7d      	ldr	r3, [pc, #500]	; (80016a0 <lineTrace+0x230>)
 80014ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b0:	4413      	add	r3, r2
 80014b2:	4a7c      	ldr	r2, [pc, #496]	; (80016a4 <lineTrace+0x234>)
 80014b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a7b      	ldr	r2, [pc, #492]	; (80016a8 <lineTrace+0x238>)
 80014bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a7a      	ldr	r2, [pc, #488]	; (80016ac <lineTrace+0x23c>)
 80014c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014c8:	4413      	add	r3, r2
 80014ca:	4a79      	ldr	r2, [pc, #484]	; (80016b0 <lineTrace+0x240>)
 80014cc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a78      	ldr	r2, [pc, #480]	; (80016b4 <lineTrace+0x244>)
 80014d4:	fb82 1203 	smull	r1, r2, r2, r3
 80014d8:	17db      	asrs	r3, r3, #31
 80014da:	1ad2      	subs	r2, r2, r3
 80014dc:	4b76      	ldr	r3, [pc, #472]	; (80016b8 <lineTrace+0x248>)
 80014de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e2:	4619      	mov	r1, r3
 80014e4:	4b75      	ldr	r3, [pc, #468]	; (80016bc <lineTrace+0x24c>)
 80014e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ea:	440b      	add	r3, r1
 80014ec:	4974      	ldr	r1, [pc, #464]	; (80016c0 <lineTrace+0x250>)
 80014ee:	f9b1 1000 	ldrsh.w	r1, [r1]
 80014f2:	440b      	add	r3, r1
 80014f4:	4973      	ldr	r1, [pc, #460]	; (80016c4 <lineTrace+0x254>)
 80014f6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80014fa:	440b      	add	r3, r1
 80014fc:	4972      	ldr	r1, [pc, #456]	; (80016c8 <lineTrace+0x258>)
 80014fe:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001502:	440b      	add	r3, r1
 8001504:	4971      	ldr	r1, [pc, #452]	; (80016cc <lineTrace+0x25c>)
 8001506:	f9b1 1000 	ldrsh.w	r1, [r1]
 800150a:	440b      	add	r3, r1
 800150c:	4969      	ldr	r1, [pc, #420]	; (80016b4 <lineTrace+0x244>)
 800150e:	fb81 0103 	smull	r0, r1, r1, r3
 8001512:	17db      	asrs	r3, r3, #31
 8001514:	1a5b      	subs	r3, r3, r1
 8001516:	4413      	add	r3, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f7fe ffa7 	bl	800046c <__aeabi_i2d>
 800151e:	4603      	mov	r3, r0
 8001520:	460c      	mov	r4, r1
 8001522:	e9c7 3404 	strd	r3, r4, [r7, #16]

	p = kp * def; //P制御
 8001526:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800152a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800152e:	f7ff f807 	bl	8000540 <__aeabi_dmul>
 8001532:	4603      	mov	r3, r0
 8001534:	460c      	mov	r4, r1
 8001536:	e9c7 3402 	strd	r3, r4, [r7, #8]
	i += ki * def * DELTA_T; //I制御
 800153a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800153e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001542:	f7fe fffd 	bl	8000540 <__aeabi_dmul>
 8001546:	4603      	mov	r3, r0
 8001548:	460c      	mov	r4, r1
 800154a:	4618      	mov	r0, r3
 800154c:	4621      	mov	r1, r4
 800154e:	a350      	add	r3, pc, #320	; (adr r3, 8001690 <lineTrace+0x220>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7fe fff4 	bl	8000540 <__aeabi_dmul>
 8001558:	4603      	mov	r3, r0
 800155a:	460c      	mov	r4, r1
 800155c:	4618      	mov	r0, r3
 800155e:	4621      	mov	r1, r4
 8001560:	4b5b      	ldr	r3, [pc, #364]	; (80016d0 <lineTrace+0x260>)
 8001562:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001566:	461a      	mov	r2, r3
 8001568:	4623      	mov	r3, r4
 800156a:	f7fe fe33 	bl	80001d4 <__adddf3>
 800156e:	4603      	mov	r3, r0
 8001570:	460c      	mov	r4, r1
 8001572:	4a57      	ldr	r2, [pc, #348]	; (80016d0 <lineTrace+0x260>)
 8001574:	e9c2 3400 	strd	r3, r4, [r2]
	d = kd * (def - pre_def) / DELTA_T; //D制御
 8001578:	4b56      	ldr	r3, [pc, #344]	; (80016d4 <lineTrace+0x264>)
 800157a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800157e:	461a      	mov	r2, r3
 8001580:	4623      	mov	r3, r4
 8001582:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001586:	f7fe fe23 	bl	80001d0 <__aeabi_dsub>
 800158a:	4603      	mov	r3, r0
 800158c:	460c      	mov	r4, r1
 800158e:	4618      	mov	r0, r3
 8001590:	4621      	mov	r1, r4
 8001592:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001596:	f7fe ffd3 	bl	8000540 <__aeabi_dmul>
 800159a:	4603      	mov	r3, r0
 800159c:	460c      	mov	r4, r1
 800159e:	4618      	mov	r0, r3
 80015a0:	4621      	mov	r1, r4
 80015a2:	a33b      	add	r3, pc, #236	; (adr r3, 8001690 <lineTrace+0x220>)
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	f7ff f8f4 	bl	8000794 <__aeabi_ddiv>
 80015ac:	4603      	mov	r3, r0
 80015ae:	460c      	mov	r4, r1
 80015b0:	e9c7 3400 	strd	r3, r4, [r7]

	motor_L = speed_L + (int)( p + i + d );
 80015b4:	4b46      	ldr	r3, [pc, #280]	; (80016d0 <lineTrace+0x260>)
 80015b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015be:	f7fe fe09 	bl	80001d4 <__adddf3>
 80015c2:	4603      	mov	r3, r0
 80015c4:	460c      	mov	r4, r1
 80015c6:	4618      	mov	r0, r3
 80015c8:	4621      	mov	r1, r4
 80015ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015ce:	f7fe fe01 	bl	80001d4 <__adddf3>
 80015d2:	4603      	mov	r3, r0
 80015d4:	460c      	mov	r4, r1
 80015d6:	4618      	mov	r0, r3
 80015d8:	4621      	mov	r1, r4
 80015da:	f7ff f9c3 	bl	8000964 <__aeabi_d2iz>
 80015de:	4603      	mov	r3, r0
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <lineTrace+0x268>)
 80015e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4413      	add	r3, r2
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <lineTrace+0x26c>)
 80015f2:	801a      	strh	r2, [r3, #0]
	motor_R = speed_R - ( p + i + d );
 80015f4:	4b3a      	ldr	r3, [pc, #232]	; (80016e0 <lineTrace+0x270>)
 80015f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff36 	bl	800046c <__aeabi_i2d>
 8001600:	4604      	mov	r4, r0
 8001602:	460d      	mov	r5, r1
 8001604:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <lineTrace+0x260>)
 8001606:	e9d3 0100 	ldrd	r0, r1, [r3]
 800160a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800160e:	f7fe fde1 	bl	80001d4 <__adddf3>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800161e:	f7fe fdd9 	bl	80001d4 <__adddf3>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4620      	mov	r0, r4
 8001628:	4629      	mov	r1, r5
 800162a:	f7fe fdd1 	bl	80001d0 <__aeabi_dsub>
 800162e:	4603      	mov	r3, r0
 8001630:	460c      	mov	r4, r1
 8001632:	4618      	mov	r0, r3
 8001634:	4621      	mov	r1, r4
 8001636:	f7ff f995 	bl	8000964 <__aeabi_d2iz>
 800163a:	4603      	mov	r3, r0
 800163c:	b21a      	sxth	r2, r3
 800163e:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <lineTrace+0x274>)
 8001640:	801a      	strh	r2, [r3, #0]

	pre_def = def;
 8001642:	4a24      	ldr	r2, [pc, #144]	; (80016d4 <lineTrace+0x264>)
 8001644:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001648:	e9c2 3400 	strd	r3, r4, [r2]

	mon_def = def;
 800164c:	4a26      	ldr	r2, [pc, #152]	; (80016e8 <lineTrace+0x278>)
 800164e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001652:	e9c2 3400 	strd	r3, r4, [r2]
	mon_pid = p + i + d;
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <lineTrace+0x260>)
 8001658:	e9d3 0100 	ldrd	r0, r1, [r3]
 800165c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001660:	f7fe fdb8 	bl	80001d4 <__adddf3>
 8001664:	4603      	mov	r3, r0
 8001666:	460c      	mov	r4, r1
 8001668:	4618      	mov	r0, r3
 800166a:	4621      	mov	r1, r4
 800166c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001670:	f7fe fdb0 	bl	80001d4 <__adddf3>
 8001674:	4603      	mov	r3, r0
 8001676:	460c      	mov	r4, r1
 8001678:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <lineTrace+0x27c>)
 800167a:	e9c2 3400 	strd	r3, r4, [r2]

}
 800167e:	bf00      	nop
 8001680:	3730      	adds	r7, #48	; 0x30
 8001682:	46bd      	mov	sp, r7
 8001684:	bdb0      	pop	{r4, r5, r7, pc}
 8001686:	bf00      	nop
 8001688:	47ae147b 	.word	0x47ae147b
 800168c:	3f847ae1 	.word	0x3f847ae1
 8001690:	d2f1a9fc 	.word	0xd2f1a9fc
 8001694:	3f50624d 	.word	0x3f50624d
 8001698:	3ff00000 	.word	0x3ff00000
 800169c:	2000013c 	.word	0x2000013c
 80016a0:	200001b4 	.word	0x200001b4
 80016a4:	200001be 	.word	0x200001be
 80016a8:	20000198 	.word	0x20000198
 80016ac:	200001b2 	.word	0x200001b2
 80016b0:	200001b0 	.word	0x200001b0
 80016b4:	2aaaaaab 	.word	0x2aaaaaab
 80016b8:	20000196 	.word	0x20000196
 80016bc:	20000190 	.word	0x20000190
 80016c0:	200001bc 	.word	0x200001bc
 80016c4:	200001ac 	.word	0x200001ac
 80016c8:	20000192 	.word	0x20000192
 80016cc:	20000138 	.word	0x20000138
 80016d0:	20000120 	.word	0x20000120
 80016d4:	20000128 	.word	0x20000128
 80016d8:	200001c0 	.word	0x200001c0
 80016dc:	200001ae 	.word	0x200001ae
 80016e0:	200001c2 	.word	0x200001c2
 80016e4:	20000194 	.word	0x20000194
 80016e8:	20000188 	.word	0x20000188
 80016ec:	200001a0 	.word	0x200001a0

080016f0 <updateSideSensorState>:

void updateSideSensorState()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	static uint16_t cnt_L, cnt_R;

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 0) cnt_L++;
 80016f4:	2104      	movs	r1, #4
 80016f6:	4821      	ldr	r0, [pc, #132]	; (800177c <updateSideSensorState+0x8c>)
 80016f8:	f002 fd16 	bl	8004128 <HAL_GPIO_ReadPin>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d106      	bne.n	8001710 <updateSideSensorState+0x20>
 8001702:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <updateSideSensorState+0x90>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <updateSideSensorState+0x90>)
 800170c:	801a      	strh	r2, [r3, #0]
 800170e:	e002      	b.n	8001716 <updateSideSensorState+0x26>
	else cnt_L = 0;
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <updateSideSensorState+0x90>)
 8001712:	2200      	movs	r2, #0
 8001714:	801a      	strh	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0) cnt_R++;
 8001716:	2108      	movs	r1, #8
 8001718:	4818      	ldr	r0, [pc, #96]	; (800177c <updateSideSensorState+0x8c>)
 800171a:	f002 fd05 	bl	8004128 <HAL_GPIO_ReadPin>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d106      	bne.n	8001732 <updateSideSensorState+0x42>
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <updateSideSensorState+0x94>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	b29a      	uxth	r2, r3
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <updateSideSensorState+0x94>)
 800172e:	801a      	strh	r2, [r3, #0]
 8001730:	e002      	b.n	8001738 <updateSideSensorState+0x48>
	else cnt_R = 0;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <updateSideSensorState+0x94>)
 8001734:	2200      	movs	r2, #0
 8001736:	801a      	strh	r2, [r3, #0]

	if(cnt_L >= 5){
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <updateSideSensorState+0x90>)
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	2b04      	cmp	r3, #4
 800173e:	d903      	bls.n	8001748 <updateSideSensorState+0x58>
		side_sensor_L = 1;
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <updateSideSensorState+0x98>)
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	e002      	b.n	800174e <updateSideSensorState+0x5e>
	}
	else{
		side_sensor_L = 0;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <updateSideSensorState+0x98>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
	}

	if(cnt_R >= 5){
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <updateSideSensorState+0x94>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	2b04      	cmp	r3, #4
 8001754:	d903      	bls.n	800175e <updateSideSensorState+0x6e>
		side_sensor_R = 1;
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <updateSideSensorState+0x9c>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
 800175c:	e002      	b.n	8001764 <updateSideSensorState+0x74>
	}
	else{
		side_sensor_R = 0;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <updateSideSensorState+0x9c>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
	}

	mon_cnt_L = cnt_L;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <updateSideSensorState+0x90>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	b21a      	sxth	r2, r3
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <updateSideSensorState+0xa0>)
 800176c:	801a      	strh	r2, [r3, #0]
	mon_cnt_R = cnt_R;
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <updateSideSensorState+0x94>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	b21a      	sxth	r2, r3
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <updateSideSensorState+0xa4>)
 8001776:	801a      	strh	r2, [r3, #0]

}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40020800 	.word	0x40020800
 8001780:	20000130 	.word	0x20000130
 8001784:	20000132 	.word	0x20000132
 8001788:	200001ba 	.word	0x200001ba
 800178c:	2000013a 	.word	0x2000013a
 8001790:	200001a8 	.word	0x200001a8
 8001794:	200001aa 	.word	0x200001aa

08001798 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0f      	ldr	r2, [pc, #60]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d10c      	bne.n	80017c4 <HAL_TIM_PeriodElapsedCallback+0x2c>
		timer++;
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80017b2:	6013      	str	r3, [r2, #0]
		getAnalogsensor();
 80017b4:	f7ff fbd0 	bl	8000f58 <getAnalogsensor>
		lineTrace();
 80017b8:	f7ff fe5a 	bl	8001470 <lineTrace>
		updateSideSensorState();
 80017bc:	f7ff ff98 	bl	80016f0 <updateSideSensorState>


		motorSet();
 80017c0:	f7ff fa78 	bl	8000cb4 <motorSet>
   }
   if(htim->Instance == TIM7){
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a08      	ldr	r2, [pc, #32]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x54>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d106      	bne.n	80017dc <HAL_TIM_PeriodElapsedCallback+0x44>
       timer1++;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	4a06      	ldr	r2, [pc, #24]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017d6:	6013      	str	r3, [r2, #0]
       storeAdBuffer();
 80017d8:	f7ff fb22 	bl	8000e20 <storeAdBuffer>
   }
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40001000 	.word	0x40001000
 80017e8:	200001dc 	.word	0x200001dc
 80017ec:	40001400 	.word	0x40001400
 80017f0:	20000438 	.word	0x20000438

080017f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f8:	f001 f9f4 	bl	8002be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017fc:	f000 f8e4 	bl	80019c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001800:	f000 fd5e 	bl	80022c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001804:	f000 fd3c 	bl	8002280 <MX_DMA_Init>
  MX_ADC1_Init();
 8001808:	f000 f948 	bl	8001a9c <MX_ADC1_Init>
  MX_I2C1_Init();
 800180c:	f000 fa32 	bl	8001c74 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001810:	f000 fa94 	bl	8001d3c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001814:	f000 fb00 	bl	8001e18 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001818:	f000 fb52 	bl	8001ec0 <MX_TIM4_Init>
  MX_TIM8_Init();
 800181c:	f000 fc0e 	bl	800203c <MX_TIM8_Init>
  MX_SPI3_Init();
 8001820:	f000 fa56 	bl	8001cd0 <MX_SPI3_Init>
  MX_TIM12_Init();
 8001824:	f000 fcb2 	bl	800218c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001828:	f000 fd00 	bl	800222c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800182c:	f000 fb9c 	bl	8001f68 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001830:	f000 fbd0 	bl	8001fd4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */


  while(1){
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0) {
 8001834:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001838:	4859      	ldr	r0, [pc, #356]	; (80019a0 <main+0x1ac>)
 800183a:	f002 fc75 	bl	8004128 <HAL_GPIO_ReadPin>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f7      	bne.n	8001834 <main+0x40>
		  HAL_Delay(500);
 8001844:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001848:	f001 fa3e 	bl	8002cc8 <HAL_Delay>
		  break;
 800184c:	bf00      	nop
	  }
  }

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800184e:	2100      	movs	r1, #0
 8001850:	4854      	ldr	r0, [pc, #336]	; (80019a4 <main+0x1b0>)
 8001852:	f003 faed 	bl	8004e30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001856:	2104      	movs	r1, #4
 8001858:	4852      	ldr	r0, [pc, #328]	; (80019a4 <main+0x1b0>)
 800185a:	f003 fae9 	bl	8004e30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800185e:	2108      	movs	r1, #8
 8001860:	4850      	ldr	r0, [pc, #320]	; (80019a4 <main+0x1b0>)
 8001862:	f003 fae5 	bl	8004e30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001866:	210c      	movs	r1, #12
 8001868:	484e      	ldr	r0, [pc, #312]	; (80019a4 <main+0x1b0>)
 800186a:	f003 fae1 	bl	8004e30 <HAL_TIM_PWM_Start>

  //motor driver wakeup
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, MAX_COUNTER_PERIOD);
 800186e:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <main+0x1b0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f240 628e 	movw	r2, #1678	; 0x68e
 8001876:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, MAX_COUNTER_PERIOD);
 8001878:	4b4a      	ldr	r3, [pc, #296]	; (80019a4 <main+0x1b0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f240 628e 	movw	r2, #1678	; 0x68e
 8001880:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, MAX_COUNTER_PERIOD);
 8001882:	4b48      	ldr	r3, [pc, #288]	; (80019a4 <main+0x1b0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f240 628e 	movw	r2, #1678	; 0x68e
 800188a:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, MAX_COUNTER_PERIOD);
 800188c:	4b45      	ldr	r3, [pc, #276]	; (80019a4 <main+0x1b0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f240 628e 	movw	r2, #1678	; 0x68e
 8001894:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_Delay(500);
 8001896:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800189a:	f001 fa15 	bl	8002cc8 <HAL_Delay>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, LINESENSOR_ADC_NUM);
 800189e:	220c      	movs	r2, #12
 80018a0:	4941      	ldr	r1, [pc, #260]	; (80019a8 <main+0x1b4>)
 80018a2:	4842      	ldr	r0, [pc, #264]	; (80019ac <main+0x1b8>)
 80018a4:	f001 fa76 	bl	8002d94 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim6);
 80018a8:	4841      	ldr	r0, [pc, #260]	; (80019b0 <main+0x1bc>)
 80018aa:	f003 fa72 	bl	8004d92 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80018ae:	4841      	ldr	r0, [pc, #260]	; (80019b4 <main+0x1c0>)
 80018b0:	f003 fa6f 	bl	8004d92 <HAL_TIM_Base_Start_IT>

  speed_L = speed_R = 400; //550
 80018b4:	4b40      	ldr	r3, [pc, #256]	; (80019b8 <main+0x1c4>)
 80018b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80018ba:	801a      	strh	r2, [r3, #0]
 80018bc:	4b3e      	ldr	r3, [pc, #248]	; (80019b8 <main+0x1c4>)
 80018be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018c2:	4b3e      	ldr	r3, [pc, #248]	; (80019bc <main+0x1c8>)
 80018c4:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(pattern){
 80018c6:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <main+0x1cc>)
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	2b1e      	cmp	r3, #30
 80018cc:	d8fb      	bhi.n	80018c6 <main+0xd2>
 80018ce:	a201      	add	r2, pc, #4	; (adr r2, 80018d4 <main+0xe0>)
 80018d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d4:	08001951 	.word	0x08001951
 80018d8:	080018c7 	.word	0x080018c7
 80018dc:	080018c7 	.word	0x080018c7
 80018e0:	080018c7 	.word	0x080018c7
 80018e4:	080018c7 	.word	0x080018c7
 80018e8:	080018c7 	.word	0x080018c7
 80018ec:	080018c7 	.word	0x080018c7
 80018f0:	080018c7 	.word	0x080018c7
 80018f4:	080018c7 	.word	0x080018c7
 80018f8:	080018c7 	.word	0x080018c7
 80018fc:	08001961 	.word	0x08001961
 8001900:	080018c7 	.word	0x080018c7
 8001904:	080018c7 	.word	0x080018c7
 8001908:	080018c7 	.word	0x080018c7
 800190c:	080018c7 	.word	0x080018c7
 8001910:	080018c7 	.word	0x080018c7
 8001914:	080018c7 	.word	0x080018c7
 8001918:	080018c7 	.word	0x080018c7
 800191c:	080018c7 	.word	0x080018c7
 8001920:	080018c7 	.word	0x080018c7
 8001924:	08001971 	.word	0x08001971
 8001928:	080018c7 	.word	0x080018c7
 800192c:	080018c7 	.word	0x080018c7
 8001930:	080018c7 	.word	0x080018c7
 8001934:	080018c7 	.word	0x080018c7
 8001938:	080018c7 	.word	0x080018c7
 800193c:	080018c7 	.word	0x080018c7
 8001940:	080018c7 	.word	0x080018c7
 8001944:	080018c7 	.word	0x080018c7
 8001948:	080018c7 	.word	0x080018c7
 800194c:	08001987 	.word	0x08001987
		  case 0:
			  if(side_sensor_R == 1) pattern = 10;
 8001950:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <main+0x1d0>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d11f      	bne.n	8001998 <main+0x1a4>
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <main+0x1cc>)
 800195a:	220a      	movs	r2, #10
 800195c:	801a      	strh	r2, [r3, #0]

			  break;
 800195e:	e01b      	b.n	8001998 <main+0x1a4>

		  case 10:
			  HAL_Delay(9000);
 8001960:	f242 3028 	movw	r0, #9000	; 0x2328
 8001964:	f001 f9b0 	bl	8002cc8 <HAL_Delay>
			  pattern = 20;
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <main+0x1cc>)
 800196a:	2214      	movs	r2, #20
 800196c:	801a      	strh	r2, [r3, #0]

			  break;
 800196e:	e016      	b.n	800199e <main+0x1aa>

		  case 20:
			  if(side_sensor_R == 1){
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <main+0x1d0>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d111      	bne.n	800199c <main+0x1a8>
				  HAL_Delay(100);
 8001978:	2064      	movs	r0, #100	; 0x64
 800197a:	f001 f9a5 	bl	8002cc8 <HAL_Delay>
				  pattern = 30;
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <main+0x1cc>)
 8001980:	221e      	movs	r2, #30
 8001982:	801a      	strh	r2, [r3, #0]
			  }

			  break;
 8001984:	e00a      	b.n	800199c <main+0x1a8>

		  case 30:
			  speed_L = speed_R = 0;
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <main+0x1c4>)
 8001988:	2200      	movs	r2, #0
 800198a:	801a      	strh	r2, [r3, #0]
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <main+0x1c4>)
 800198e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <main+0x1c8>)
 8001994:	801a      	strh	r2, [r3, #0]

			  break;
 8001996:	e002      	b.n	800199e <main+0x1aa>
			  break;
 8001998:	bf00      	nop
 800199a:	e794      	b.n	80018c6 <main+0xd2>
			  break;
 800199c:	bf00      	nop
	  switch(pattern){
 800199e:	e792      	b.n	80018c6 <main+0xd2>
 80019a0:	40020000 	.word	0x40020000
 80019a4:	20000140 	.word	0x20000140
 80019a8:	200001c4 	.word	0x200001c4
 80019ac:	20000310 	.word	0x20000310
 80019b0:	200003f8 	.word	0x200003f8
 80019b4:	200004bc 	.word	0x200004bc
 80019b8:	200001c2 	.word	0x200001c2
 80019bc:	200001c0 	.word	0x200001c0
 80019c0:	2000030c 	.word	0x2000030c
 80019c4:	2000013a 	.word	0x2000013a

080019c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b094      	sub	sp, #80	; 0x50
 80019cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ce:	f107 0320 	add.w	r3, r7, #32
 80019d2:	2230      	movs	r2, #48	; 0x30
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f004 fc36 	bl	8006248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019dc:	f107 030c 	add.w	r3, r7, #12
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <SystemClock_Config+0xcc>)
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	4a27      	ldr	r2, [pc, #156]	; (8001a94 <SystemClock_Config+0xcc>)
 80019f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fa:	6413      	str	r3, [r2, #64]	; 0x40
 80019fc:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <SystemClock_Config+0xcc>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a08:	2300      	movs	r3, #0
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <SystemClock_Config+0xd0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a21      	ldr	r2, [pc, #132]	; (8001a98 <SystemClock_Config+0xd0>)
 8001a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <SystemClock_Config+0xd0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a24:	2301      	movs	r3, #1
 8001a26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001a38:	2306      	movs	r3, #6
 8001a3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a3c:	23a8      	movs	r3, #168	; 0xa8
 8001a3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a40:	2302      	movs	r3, #2
 8001a42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a44:	2307      	movs	r3, #7
 8001a46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a48:	f107 0320 	add.w	r3, r7, #32
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f002 fcd5 	bl	80043fc <HAL_RCC_OscConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a58:	f000 fcd0 	bl	80023fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a5c:	230f      	movs	r3, #15
 8001a5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a60:	2302      	movs	r3, #2
 8001a62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	2105      	movs	r1, #5
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 ff2e 	bl	80048dc <HAL_RCC_ClockConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a86:	f000 fcb9 	bl	80023fc <Error_Handler>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	3750      	adds	r7, #80	; 0x50
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40007000 	.word	0x40007000

08001a9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001aae:	4b6e      	ldr	r3, [pc, #440]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001ab0:	4a6e      	ldr	r2, [pc, #440]	; (8001c6c <MX_ADC1_Init+0x1d0>)
 8001ab2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ab4:	4b6c      	ldr	r3, [pc, #432]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001ab6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001aba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001abc:	4b6a      	ldr	r3, [pc, #424]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001ac2:	4b69      	ldr	r3, [pc, #420]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ac8:	4b67      	ldr	r3, [pc, #412]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ace:	4b66      	ldr	r3, [pc, #408]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ad6:	4b64      	ldr	r3, [pc, #400]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001adc:	4b62      	ldr	r3, [pc, #392]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001ade:	4a64      	ldr	r2, [pc, #400]	; (8001c70 <MX_ADC1_Init+0x1d4>)
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ae2:	4b61      	ldr	r3, [pc, #388]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 8001ae8:	4b5f      	ldr	r3, [pc, #380]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001aea:	220c      	movs	r2, #12
 8001aec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001aee:	4b5e      	ldr	r3, [pc, #376]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001af6:	4b5c      	ldr	r3, [pc, #368]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001afc:	485a      	ldr	r0, [pc, #360]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001afe:	f001 f905 	bl	8002d0c <HAL_ADC_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b08:	f000 fc78 	bl	80023fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b10:	2301      	movs	r3, #1
 8001b12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001b14:	2304      	movs	r3, #4
 8001b16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b18:	463b      	mov	r3, r7
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4852      	ldr	r0, [pc, #328]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001b1e:	f001 fa49 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b28:	f000 fc68 	bl	80023fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001b30:	2302      	movs	r3, #2
 8001b32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b34:	463b      	mov	r3, r7
 8001b36:	4619      	mov	r1, r3
 8001b38:	484b      	ldr	r0, [pc, #300]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001b3a:	f001 fa3b 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001b44:	f000 fc5a 	bl	80023fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b50:	463b      	mov	r3, r7
 8001b52:	4619      	mov	r1, r3
 8001b54:	4844      	ldr	r0, [pc, #272]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001b56:	f001 fa2d 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001b60:	f000 fc4c 	bl	80023fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001b64:	2303      	movs	r3, #3
 8001b66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001b68:	2304      	movs	r3, #4
 8001b6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	4619      	mov	r1, r3
 8001b70:	483d      	ldr	r0, [pc, #244]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001b72:	f001 fa1f 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001b7c:	f000 fc3e 	bl	80023fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b80:	2304      	movs	r3, #4
 8001b82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001b84:	2305      	movs	r3, #5
 8001b86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b88:	463b      	mov	r3, r7
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4836      	ldr	r0, [pc, #216]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001b8e:	f001 fa11 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001b98:	f000 fc30 	bl	80023fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001b9c:	2305      	movs	r3, #5
 8001b9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001ba0:	2306      	movs	r3, #6
 8001ba2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	482f      	ldr	r0, [pc, #188]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001baa:	f001 fa03 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001bb4:	f000 fc22 	bl	80023fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001bb8:	2306      	movs	r3, #6
 8001bba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001bbc:	2307      	movs	r3, #7
 8001bbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4828      	ldr	r0, [pc, #160]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001bc6:	f001 f9f5 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001bd0:	f000 fc14 	bl	80023fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001bd4:	2307      	movs	r3, #7
 8001bd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001bd8:	2308      	movs	r3, #8
 8001bda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bdc:	463b      	mov	r3, r7
 8001bde:	4619      	mov	r1, r3
 8001be0:	4821      	ldr	r0, [pc, #132]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001be2:	f001 f9e7 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001bec:	f000 fc06 	bl	80023fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001bf0:	2308      	movs	r3, #8
 8001bf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001bf4:	2309      	movs	r3, #9
 8001bf6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	481a      	ldr	r0, [pc, #104]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001bfe:	f001 f9d9 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001c08:	f000 fbf8 	bl	80023fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001c0c:	2309      	movs	r3, #9
 8001c0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001c10:	230a      	movs	r3, #10
 8001c12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c14:	463b      	mov	r3, r7
 8001c16:	4619      	mov	r1, r3
 8001c18:	4813      	ldr	r0, [pc, #76]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001c1a:	f001 f9cb 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001c24:	f000 fbea 	bl	80023fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001c28:	230e      	movs	r3, #14
 8001c2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001c2c:	230b      	movs	r3, #11
 8001c2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c30:	463b      	mov	r3, r7
 8001c32:	4619      	mov	r1, r3
 8001c34:	480c      	ldr	r0, [pc, #48]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001c36:	f001 f9bd 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001c40:	f000 fbdc 	bl	80023fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001c44:	230f      	movs	r3, #15
 8001c46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001c48:	230c      	movs	r3, #12
 8001c4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_ADC1_Init+0x1cc>)
 8001c52:	f001 f9af 	bl	8002fb4 <HAL_ADC_ConfigChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001c5c:	f000 fbce 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000310 	.word	0x20000310
 8001c6c:	40012000 	.word	0x40012000
 8001c70:	0f000001 	.word	0x0f000001

08001c74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001c7a:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <MX_I2C1_Init+0x54>)
 8001c7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001c80:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <MX_I2C1_Init+0x58>)
 8001c82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001c92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cb0:	4804      	ldr	r0, [pc, #16]	; (8001cc4 <MX_I2C1_Init+0x50>)
 8001cb2:	f002 fa6b 	bl	800418c <HAL_I2C_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cbc:	f000 fb9e 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000220 	.word	0x20000220
 8001cc8:	40005400 	.word	0x40005400
 8001ccc:	000186a0 	.word	0x000186a0

08001cd0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001cd4:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <MX_SPI3_Init+0x64>)
 8001cd6:	4a18      	ldr	r2, [pc, #96]	; (8001d38 <MX_SPI3_Init+0x68>)
 8001cd8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <MX_SPI3_Init+0x64>)
 8001cdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ce0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <MX_SPI3_Init+0x64>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <MX_SPI3_Init+0x64>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <MX_SPI3_Init+0x64>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <MX_SPI3_Init+0x64>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <MX_SPI3_Init+0x64>)
 8001cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d00:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <MX_SPI3_Init+0x64>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d08:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <MX_SPI3_Init+0x64>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <MX_SPI3_Init+0x64>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d14:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <MX_SPI3_Init+0x64>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <MX_SPI3_Init+0x64>)
 8001d1c:	220a      	movs	r2, #10
 8001d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d20:	4804      	ldr	r0, [pc, #16]	; (8001d34 <MX_SPI3_Init+0x64>)
 8001d22:	f002 ffa7 	bl	8004c74 <HAL_SPI_Init>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001d2c:	f000 fb66 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	200002b4 	.word	0x200002b4
 8001d38:	40003c00 	.word	0x40003c00

08001d3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d42:	f107 0320 	add.w	r3, r7, #32
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
 8001d58:	611a      	str	r2, [r3, #16]
 8001d5a:	615a      	str	r2, [r3, #20]
 8001d5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d5e:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <MX_TIM2_Init+0xd8>)
 8001d60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d66:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <MX_TIM2_Init+0xd8>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6c:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <MX_TIM2_Init+0xd8>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d72:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <MX_TIM2_Init+0xd8>)
 8001d74:	f04f 32ff 	mov.w	r2, #4294967295
 8001d78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <MX_TIM2_Init+0xd8>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d80:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <MX_TIM2_Init+0xd8>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d86:	4823      	ldr	r0, [pc, #140]	; (8001e14 <MX_TIM2_Init+0xd8>)
 8001d88:	f003 f827 	bl	8004dda <HAL_TIM_PWM_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d92:	f000 fb33 	bl	80023fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d9e:	f107 0320 	add.w	r3, r7, #32
 8001da2:	4619      	mov	r1, r3
 8001da4:	481b      	ldr	r0, [pc, #108]	; (8001e14 <MX_TIM2_Init+0xd8>)
 8001da6:	f003 fd7f 	bl	80058a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001db0:	f000 fb24 	bl	80023fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db4:	2360      	movs	r3, #96	; 0x60
 8001db6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4812      	ldr	r0, [pc, #72]	; (8001e14 <MX_TIM2_Init+0xd8>)
 8001dcc:	f003 fa08 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001dd6:	f000 fb11 	bl	80023fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	2208      	movs	r2, #8
 8001dde:	4619      	mov	r1, r3
 8001de0:	480c      	ldr	r0, [pc, #48]	; (8001e14 <MX_TIM2_Init+0xd8>)
 8001de2:	f003 f9fd 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001dec:	f000 fb06 	bl	80023fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	220c      	movs	r2, #12
 8001df4:	4619      	mov	r1, r3
 8001df6:	4807      	ldr	r0, [pc, #28]	; (8001e14 <MX_TIM2_Init+0xd8>)
 8001df8:	f003 f9f2 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001e02:	f000 fafb 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e06:	4803      	ldr	r0, [pc, #12]	; (8001e14 <MX_TIM2_Init+0xd8>)
 8001e08:	f000 fd72 	bl	80028f0 <HAL_TIM_MspPostInit>

}
 8001e0c:	bf00      	nop
 8001e0e:	3728      	adds	r7, #40	; 0x28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	2000043c 	.word	0x2000043c

08001e18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08c      	sub	sp, #48	; 0x30
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e1e:	f107 030c 	add.w	r3, r7, #12
 8001e22:	2224      	movs	r2, #36	; 0x24
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f004 fa0e 	bl	8006248 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e34:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <MX_TIM3_Init+0xa0>)
 8001e36:	4a21      	ldr	r2, [pc, #132]	; (8001ebc <MX_TIM3_Init+0xa4>)
 8001e38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e3a:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <MX_TIM3_Init+0xa0>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e40:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <MX_TIM3_Init+0xa0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e46:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <MX_TIM3_Init+0xa0>)
 8001e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4e:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <MX_TIM3_Init+0xa0>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e54:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <MX_TIM3_Init+0xa0>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e62:	2301      	movs	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e72:	2301      	movs	r3, #1
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e7e:	f107 030c 	add.w	r3, r7, #12
 8001e82:	4619      	mov	r1, r3
 8001e84:	480c      	ldr	r0, [pc, #48]	; (8001eb8 <MX_TIM3_Init+0xa0>)
 8001e86:	f003 f811 	bl	8004eac <HAL_TIM_Encoder_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e90:	f000 fab4 	bl	80023fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e94:	2300      	movs	r3, #0
 8001e96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <MX_TIM3_Init+0xa0>)
 8001ea2:	f003 fd01 	bl	80058a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001eac:	f000 faa6 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001eb0:	bf00      	nop
 8001eb2:	3730      	adds	r7, #48	; 0x30
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000274 	.word	0x20000274
 8001ebc:	40000400 	.word	0x40000400

08001ec0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08c      	sub	sp, #48	; 0x30
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	2224      	movs	r2, #36	; 0x24
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f004 f9ba 	bl	8006248 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001edc:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <MX_TIM4_Init+0xa0>)
 8001ede:	4a21      	ldr	r2, [pc, #132]	; (8001f64 <MX_TIM4_Init+0xa4>)
 8001ee0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <MX_TIM4_Init+0xa0>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <MX_TIM4_Init+0xa0>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001eee:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <MX_TIM4_Init+0xa0>)
 8001ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ef4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <MX_TIM4_Init+0xa0>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efc:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <MX_TIM4_Init+0xa0>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f02:	2301      	movs	r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001f26:	f107 030c 	add.w	r3, r7, #12
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	480c      	ldr	r0, [pc, #48]	; (8001f60 <MX_TIM4_Init+0xa0>)
 8001f2e:	f002 ffbd 	bl	8004eac <HAL_TIM_Encoder_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001f38:	f000 fa60 	bl	80023fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	4619      	mov	r1, r3
 8001f48:	4805      	ldr	r0, [pc, #20]	; (8001f60 <MX_TIM4_Init+0xa0>)
 8001f4a:	f003 fcad 	bl	80058a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001f54:	f000 fa52 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f58:	bf00      	nop
 8001f5a:	3730      	adds	r7, #48	; 0x30
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200001e0 	.word	0x200001e0
 8001f64:	40000800 	.word	0x40000800

08001f68 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6e:	463b      	mov	r3, r7
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <MX_TIM6_Init+0x64>)
 8001f78:	4a15      	ldr	r2, [pc, #84]	; (8001fd0 <MX_TIM6_Init+0x68>)
 8001f7a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 41;
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <MX_TIM6_Init+0x64>)
 8001f7e:	2229      	movs	r2, #41	; 0x29
 8001f80:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <MX_TIM6_Init+0x64>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8001f88:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <MX_TIM6_Init+0x64>)
 8001f8a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001f8e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f90:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <MX_TIM6_Init+0x64>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f96:	480d      	ldr	r0, [pc, #52]	; (8001fcc <MX_TIM6_Init+0x64>)
 8001f98:	f002 fed0 	bl	8004d3c <HAL_TIM_Base_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001fa2:	f000 fa2b 	bl	80023fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001fae:	463b      	mov	r3, r7
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4806      	ldr	r0, [pc, #24]	; (8001fcc <MX_TIM6_Init+0x64>)
 8001fb4:	f003 fc78 	bl	80058a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001fbe:	f000 fa1d 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200003f8 	.word	0x200003f8
 8001fd0:	40001000 	.word	0x40001000

08001fd4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fda:	463b      	mov	r3, r7
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001fe2:	4b14      	ldr	r3, [pc, #80]	; (8002034 <MX_TIM7_Init+0x60>)
 8001fe4:	4a14      	ldr	r2, [pc, #80]	; (8002038 <MX_TIM7_Init+0x64>)
 8001fe6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 41;
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <MX_TIM7_Init+0x60>)
 8001fea:	2229      	movs	r2, #41	; 0x29
 8001fec:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <MX_TIM7_Init+0x60>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 199;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <MX_TIM7_Init+0x60>)
 8001ff6:	22c7      	movs	r2, #199	; 0xc7
 8001ff8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <MX_TIM7_Init+0x60>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002000:	480c      	ldr	r0, [pc, #48]	; (8002034 <MX_TIM7_Init+0x60>)
 8002002:	f002 fe9b 	bl	8004d3c <HAL_TIM_Base_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 800200c:	f000 f9f6 	bl	80023fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002010:	2300      	movs	r3, #0
 8002012:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002018:	463b      	mov	r3, r7
 800201a:	4619      	mov	r1, r3
 800201c:	4805      	ldr	r0, [pc, #20]	; (8002034 <MX_TIM7_Init+0x60>)
 800201e:	f003 fc43 	bl	80058a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002028:	f000 f9e8 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	200004bc 	.word	0x200004bc
 8002038:	40001400 	.word	0x40001400

0800203c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b092      	sub	sp, #72	; 0x48
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002042:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800204c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
 800205c:	615a      	str	r2, [r3, #20]
 800205e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	2220      	movs	r2, #32
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f004 f8ee 	bl	8006248 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800206c:	4b45      	ldr	r3, [pc, #276]	; (8002184 <MX_TIM8_Init+0x148>)
 800206e:	4a46      	ldr	r2, [pc, #280]	; (8002188 <MX_TIM8_Init+0x14c>)
 8002070:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002072:	4b44      	ldr	r3, [pc, #272]	; (8002184 <MX_TIM8_Init+0x148>)
 8002074:	2200      	movs	r2, #0
 8002076:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002078:	4b42      	ldr	r3, [pc, #264]	; (8002184 <MX_TIM8_Init+0x148>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 800207e:	4b41      	ldr	r3, [pc, #260]	; (8002184 <MX_TIM8_Init+0x148>)
 8002080:	f240 628f 	movw	r2, #1679	; 0x68f
 8002084:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002086:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <MX_TIM8_Init+0x148>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800208c:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <MX_TIM8_Init+0x148>)
 800208e:	2200      	movs	r2, #0
 8002090:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002092:	4b3c      	ldr	r3, [pc, #240]	; (8002184 <MX_TIM8_Init+0x148>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002098:	483a      	ldr	r0, [pc, #232]	; (8002184 <MX_TIM8_Init+0x148>)
 800209a:	f002 fe9e 	bl	8004dda <HAL_TIM_PWM_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80020a4:	f000 f9aa 	bl	80023fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a8:	2300      	movs	r3, #0
 80020aa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80020b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020b4:	4619      	mov	r1, r3
 80020b6:	4833      	ldr	r0, [pc, #204]	; (8002184 <MX_TIM8_Init+0x148>)
 80020b8:	f003 fbf6 	bl	80058a8 <HAL_TIMEx_MasterConfigSynchronization>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80020c2:	f000 f99b 	bl	80023fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020c6:	2360      	movs	r3, #96	; 0x60
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ce:	2300      	movs	r3, #0
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020d2:	2300      	movs	r3, #0
 80020d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e6:	2200      	movs	r2, #0
 80020e8:	4619      	mov	r1, r3
 80020ea:	4826      	ldr	r0, [pc, #152]	; (8002184 <MX_TIM8_Init+0x148>)
 80020ec:	f003 f878 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80020f6:	f000 f981 	bl	80023fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fe:	2204      	movs	r2, #4
 8002100:	4619      	mov	r1, r3
 8002102:	4820      	ldr	r0, [pc, #128]	; (8002184 <MX_TIM8_Init+0x148>)
 8002104:	f003 f86c 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800210e:	f000 f975 	bl	80023fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002116:	2208      	movs	r2, #8
 8002118:	4619      	mov	r1, r3
 800211a:	481a      	ldr	r0, [pc, #104]	; (8002184 <MX_TIM8_Init+0x148>)
 800211c:	f003 f860 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002126:	f000 f969 	bl	80023fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800212a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212e:	220c      	movs	r2, #12
 8002130:	4619      	mov	r1, r3
 8002132:	4814      	ldr	r0, [pc, #80]	; (8002184 <MX_TIM8_Init+0x148>)
 8002134:	f003 f854 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 800213e:	f000 f95d 	bl	80023fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800215a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	4619      	mov	r1, r3
 8002164:	4807      	ldr	r0, [pc, #28]	; (8002184 <MX_TIM8_Init+0x148>)
 8002166:	f003 fc1b 	bl	80059a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 8002170:	f000 f944 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002174:	4803      	ldr	r0, [pc, #12]	; (8002184 <MX_TIM8_Init+0x148>)
 8002176:	f000 fbbb 	bl	80028f0 <HAL_TIM_MspPostInit>

}
 800217a:	bf00      	nop
 800217c:	3748      	adds	r7, #72	; 0x48
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000140 	.word	0x20000140
 8002188:	40010400 	.word	0x40010400

0800218c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
 80021a0:	615a      	str	r2, [r3, #20]
 80021a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80021a4:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <MX_TIM12_Init+0x98>)
 80021a6:	4a20      	ldr	r2, [pc, #128]	; (8002228 <MX_TIM12_Init+0x9c>)
 80021a8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <MX_TIM12_Init+0x98>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b0:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <MX_TIM12_Init+0x98>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <MX_TIM12_Init+0x98>)
 80021b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021bc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021be:	4b19      	ldr	r3, [pc, #100]	; (8002224 <MX_TIM12_Init+0x98>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c4:	4b17      	ldr	r3, [pc, #92]	; (8002224 <MX_TIM12_Init+0x98>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80021ca:	4816      	ldr	r0, [pc, #88]	; (8002224 <MX_TIM12_Init+0x98>)
 80021cc:	f002 fe05 	bl	8004dda <HAL_TIM_PWM_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80021d6:	f000 f911 	bl	80023fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021da:	2360      	movs	r3, #96	; 0x60
 80021dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	2200      	movs	r2, #0
 80021ee:	4619      	mov	r1, r3
 80021f0:	480c      	ldr	r0, [pc, #48]	; (8002224 <MX_TIM12_Init+0x98>)
 80021f2:	f002 fff5 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80021fc:	f000 f8fe 	bl	80023fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	2204      	movs	r2, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4807      	ldr	r0, [pc, #28]	; (8002224 <MX_TIM12_Init+0x98>)
 8002208:	f002 ffea 	bl	80051e0 <HAL_TIM_PWM_ConfigChannel>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8002212:	f000 f8f3 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002216:	4803      	ldr	r0, [pc, #12]	; (8002224 <MX_TIM12_Init+0x98>)
 8002218:	f000 fb6a 	bl	80028f0 <HAL_TIM_MspPostInit>

}
 800221c:	bf00      	nop
 800221e:	3720      	adds	r7, #32
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	2000047c 	.word	0x2000047c
 8002228:	40001800 	.word	0x40001800

0800222c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <MX_USART1_UART_Init+0x4c>)
 8002232:	4a12      	ldr	r2, [pc, #72]	; (800227c <MX_USART1_UART_Init+0x50>)
 8002234:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <MX_USART1_UART_Init+0x4c>)
 8002238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800223c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <MX_USART1_UART_Init+0x4c>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <MX_USART1_UART_Init+0x4c>)
 8002246:	2200      	movs	r2, #0
 8002248:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <MX_USART1_UART_Init+0x4c>)
 800224c:	2200      	movs	r2, #0
 800224e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <MX_USART1_UART_Init+0x4c>)
 8002252:	220c      	movs	r2, #12
 8002254:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <MX_USART1_UART_Init+0x4c>)
 8002258:	2200      	movs	r2, #0
 800225a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <MX_USART1_UART_Init+0x4c>)
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <MX_USART1_UART_Init+0x4c>)
 8002264:	f003 fc02 	bl	8005a6c <HAL_UART_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800226e:	f000 f8c5 	bl	80023fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000358 	.word	0x20000358
 800227c:	40011000 	.word	0x40011000

08002280 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <MX_DMA_Init+0x3c>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a0b      	ldr	r2, [pc, #44]	; (80022bc <MX_DMA_Init+0x3c>)
 8002290:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <MX_DMA_Init+0x3c>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2100      	movs	r1, #0
 80022a6:	2038      	movs	r0, #56	; 0x38
 80022a8:	f001 f9ff 	bl	80036aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80022ac:	2038      	movs	r0, #56	; 0x38
 80022ae:	f001 fa18 	bl	80036e2 <HAL_NVIC_EnableIRQ>

}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800

080022c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
 80022d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	4b44      	ldr	r3, [pc, #272]	; (80023ec <MX_GPIO_Init+0x12c>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a43      	ldr	r2, [pc, #268]	; (80023ec <MX_GPIO_Init+0x12c>)
 80022e0:	f043 0304 	orr.w	r3, r3, #4
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b41      	ldr	r3, [pc, #260]	; (80023ec <MX_GPIO_Init+0x12c>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b3d      	ldr	r3, [pc, #244]	; (80023ec <MX_GPIO_Init+0x12c>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a3c      	ldr	r2, [pc, #240]	; (80023ec <MX_GPIO_Init+0x12c>)
 80022fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b3a      	ldr	r3, [pc, #232]	; (80023ec <MX_GPIO_Init+0x12c>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	4b36      	ldr	r3, [pc, #216]	; (80023ec <MX_GPIO_Init+0x12c>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a35      	ldr	r2, [pc, #212]	; (80023ec <MX_GPIO_Init+0x12c>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b33      	ldr	r3, [pc, #204]	; (80023ec <MX_GPIO_Init+0x12c>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	4b2f      	ldr	r3, [pc, #188]	; (80023ec <MX_GPIO_Init+0x12c>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a2e      	ldr	r2, [pc, #184]	; (80023ec <MX_GPIO_Init+0x12c>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <MX_GPIO_Init+0x12c>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	607b      	str	r3, [r7, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	4b28      	ldr	r3, [pc, #160]	; (80023ec <MX_GPIO_Init+0x12c>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a27      	ldr	r2, [pc, #156]	; (80023ec <MX_GPIO_Init+0x12c>)
 8002350:	f043 0308 	orr.w	r3, r3, #8
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b25      	ldr	r3, [pc, #148]	; (80023ec <MX_GPIO_Init+0x12c>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8002362:	2200      	movs	r2, #0
 8002364:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002368:	4821      	ldr	r0, [pc, #132]	; (80023f0 <MX_GPIO_Init+0x130>)
 800236a:	f001 fef5 	bl	8004158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	2104      	movs	r1, #4
 8002372:	4820      	ldr	r0, [pc, #128]	; (80023f4 <MX_GPIO_Init+0x134>)
 8002374:	f001 fef0 	bl	8004158 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8002378:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800237c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237e:	2301      	movs	r3, #1
 8002380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800238a:	f107 0314 	add.w	r3, r7, #20
 800238e:	4619      	mov	r1, r3
 8002390:	4817      	ldr	r0, [pc, #92]	; (80023f0 <MX_GPIO_Init+0x130>)
 8002392:	f001 fd2f 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002396:	230c      	movs	r3, #12
 8002398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4619      	mov	r1, r3
 80023a8:	4811      	ldr	r0, [pc, #68]	; (80023f0 <MX_GPIO_Init+0x130>)
 80023aa:	f001 fd23 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH2_Pin SWITCH1_Pin */
  GPIO_InitStruct.Pin = SWITCH2_Pin|SWITCH1_Pin;
 80023ae:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80023b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023b8:	2301      	movs	r3, #1
 80023ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	4619      	mov	r1, r3
 80023c2:	480d      	ldr	r0, [pc, #52]	; (80023f8 <MX_GPIO_Init+0x138>)
 80023c4:	f001 fd16 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80023c8:	2304      	movs	r3, #4
 80023ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023cc:	2301      	movs	r3, #1
 80023ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	2300      	movs	r3, #0
 80023d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4619      	mov	r1, r3
 80023de:	4805      	ldr	r0, [pc, #20]	; (80023f4 <MX_GPIO_Init+0x134>)
 80023e0:	f001 fd08 	bl	8003df4 <HAL_GPIO_Init>

}
 80023e4:	bf00      	nop
 80023e6:	3728      	adds	r7, #40	; 0x28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40020800 	.word	0x40020800
 80023f4:	40020c00 	.word	0x40020c00
 80023f8:	40020000 	.word	0x40020000

080023fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002400:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002402:	e7fe      	b.n	8002402 <Error_Handler+0x6>

08002404 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <HAL_MspInit+0x4c>)
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	4a0f      	ldr	r2, [pc, #60]	; (8002450 <HAL_MspInit+0x4c>)
 8002414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002418:	6453      	str	r3, [r2, #68]	; 0x44
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <HAL_MspInit+0x4c>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <HAL_MspInit+0x4c>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	4a08      	ldr	r2, [pc, #32]	; (8002450 <HAL_MspInit+0x4c>)
 8002430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002434:	6413      	str	r3, [r2, #64]	; 0x40
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_MspInit+0x4c>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800

08002454 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08c      	sub	sp, #48	; 0x30
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 031c 	add.w	r3, r7, #28
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a49      	ldr	r2, [pc, #292]	; (8002598 <HAL_ADC_MspInit+0x144>)
 8002472:	4293      	cmp	r3, r2
 8002474:	f040 808c 	bne.w	8002590 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002478:	2300      	movs	r3, #0
 800247a:	61bb      	str	r3, [r7, #24]
 800247c:	4b47      	ldr	r3, [pc, #284]	; (800259c <HAL_ADC_MspInit+0x148>)
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	4a46      	ldr	r2, [pc, #280]	; (800259c <HAL_ADC_MspInit+0x148>)
 8002482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002486:	6453      	str	r3, [r2, #68]	; 0x44
 8002488:	4b44      	ldr	r3, [pc, #272]	; (800259c <HAL_ADC_MspInit+0x148>)
 800248a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	4b40      	ldr	r3, [pc, #256]	; (800259c <HAL_ADC_MspInit+0x148>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	4a3f      	ldr	r2, [pc, #252]	; (800259c <HAL_ADC_MspInit+0x148>)
 800249e:	f043 0304 	orr.w	r3, r3, #4
 80024a2:	6313      	str	r3, [r2, #48]	; 0x30
 80024a4:	4b3d      	ldr	r3, [pc, #244]	; (800259c <HAL_ADC_MspInit+0x148>)
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	4b39      	ldr	r3, [pc, #228]	; (800259c <HAL_ADC_MspInit+0x148>)
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	4a38      	ldr	r2, [pc, #224]	; (800259c <HAL_ADC_MspInit+0x148>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6313      	str	r3, [r2, #48]	; 0x30
 80024c0:	4b36      	ldr	r3, [pc, #216]	; (800259c <HAL_ADC_MspInit+0x148>)
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	4b32      	ldr	r3, [pc, #200]	; (800259c <HAL_ADC_MspInit+0x148>)
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	4a31      	ldr	r2, [pc, #196]	; (800259c <HAL_ADC_MspInit+0x148>)
 80024d6:	f043 0302 	orr.w	r3, r3, #2
 80024da:	6313      	str	r3, [r2, #48]	; 0x30
 80024dc:	4b2f      	ldr	r3, [pc, #188]	; (800259c <HAL_ADC_MspInit+0x148>)
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin|GPIO_PIN_4|GPIO_PIN_5;
 80024e8:	2332      	movs	r3, #50	; 0x32
 80024ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024ec:	2303      	movs	r3, #3
 80024ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f4:	f107 031c 	add.w	r3, r7, #28
 80024f8:	4619      	mov	r1, r3
 80024fa:	4829      	ldr	r0, [pc, #164]	; (80025a0 <HAL_ADC_MspInit+0x14c>)
 80024fc:	f001 fc7a 	bl	8003df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002500:	23ff      	movs	r3, #255	; 0xff
 8002502:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002504:	2303      	movs	r3, #3
 8002506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250c:	f107 031c 	add.w	r3, r7, #28
 8002510:	4619      	mov	r1, r3
 8002512:	4824      	ldr	r0, [pc, #144]	; (80025a4 <HAL_ADC_MspInit+0x150>)
 8002514:	f001 fc6e 	bl	8003df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002518:	2303      	movs	r3, #3
 800251a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800251c:	2303      	movs	r3, #3
 800251e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002524:	f107 031c 	add.w	r3, r7, #28
 8002528:	4619      	mov	r1, r3
 800252a:	481f      	ldr	r0, [pc, #124]	; (80025a8 <HAL_ADC_MspInit+0x154>)
 800252c:	f001 fc62 	bl	8003df4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002530:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <HAL_ADC_MspInit+0x158>)
 8002532:	4a1f      	ldr	r2, [pc, #124]	; (80025b0 <HAL_ADC_MspInit+0x15c>)
 8002534:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002536:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_ADC_MspInit+0x158>)
 8002538:	2200      	movs	r2, #0
 800253a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <HAL_ADC_MspInit+0x158>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002542:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <HAL_ADC_MspInit+0x158>)
 8002544:	2200      	movs	r2, #0
 8002546:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002548:	4b18      	ldr	r3, [pc, #96]	; (80025ac <HAL_ADC_MspInit+0x158>)
 800254a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800254e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002550:	4b16      	ldr	r3, [pc, #88]	; (80025ac <HAL_ADC_MspInit+0x158>)
 8002552:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002556:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <HAL_ADC_MspInit+0x158>)
 800255a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800255e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002560:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_ADC_MspInit+0x158>)
 8002562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002566:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002568:	4b10      	ldr	r3, [pc, #64]	; (80025ac <HAL_ADC_MspInit+0x158>)
 800256a:	2200      	movs	r2, #0
 800256c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <HAL_ADC_MspInit+0x158>)
 8002570:	2200      	movs	r2, #0
 8002572:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002574:	480d      	ldr	r0, [pc, #52]	; (80025ac <HAL_ADC_MspInit+0x158>)
 8002576:	f001 f8cf 	bl	8003718 <HAL_DMA_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002580:	f7ff ff3c 	bl	80023fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a09      	ldr	r2, [pc, #36]	; (80025ac <HAL_ADC_MspInit+0x158>)
 8002588:	639a      	str	r2, [r3, #56]	; 0x38
 800258a:	4a08      	ldr	r2, [pc, #32]	; (80025ac <HAL_ADC_MspInit+0x158>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002590:	bf00      	nop
 8002592:	3730      	adds	r7, #48	; 0x30
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40012000 	.word	0x40012000
 800259c:	40023800 	.word	0x40023800
 80025a0:	40020800 	.word	0x40020800
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40020400 	.word	0x40020400
 80025ac:	20000398 	.word	0x20000398
 80025b0:	40026410 	.word	0x40026410

080025b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	; 0x28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a19      	ldr	r2, [pc, #100]	; (8002638 <HAL_I2C_MspInit+0x84>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d12c      	bne.n	8002630 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	4b18      	ldr	r3, [pc, #96]	; (800263c <HAL_I2C_MspInit+0x88>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a17      	ldr	r2, [pc, #92]	; (800263c <HAL_I2C_MspInit+0x88>)
 80025e0:	f043 0302 	orr.w	r3, r3, #2
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_I2C_MspInit+0x88>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025f8:	2312      	movs	r3, #18
 80025fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025fc:	2301      	movs	r3, #1
 80025fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002600:	2303      	movs	r3, #3
 8002602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002604:	2304      	movs	r3, #4
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	4619      	mov	r1, r3
 800260e:	480c      	ldr	r0, [pc, #48]	; (8002640 <HAL_I2C_MspInit+0x8c>)
 8002610:	f001 fbf0 	bl	8003df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	4b08      	ldr	r3, [pc, #32]	; (800263c <HAL_I2C_MspInit+0x88>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	4a07      	ldr	r2, [pc, #28]	; (800263c <HAL_I2C_MspInit+0x88>)
 800261e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002622:	6413      	str	r3, [r2, #64]	; 0x40
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_I2C_MspInit+0x88>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002630:	bf00      	nop
 8002632:	3728      	adds	r7, #40	; 0x28
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40005400 	.word	0x40005400
 800263c:	40023800 	.word	0x40023800
 8002640:	40020400 	.word	0x40020400

08002644 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a19      	ldr	r2, [pc, #100]	; (80026c8 <HAL_SPI_MspInit+0x84>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d12c      	bne.n	80026c0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_SPI_MspInit+0x88>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a17      	ldr	r2, [pc, #92]	; (80026cc <HAL_SPI_MspInit+0x88>)
 8002670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_SPI_MspInit+0x88>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_SPI_MspInit+0x88>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a10      	ldr	r2, [pc, #64]	; (80026cc <HAL_SPI_MspInit+0x88>)
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HAL_SPI_MspInit+0x88>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800269e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80026a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026b0:	2306      	movs	r3, #6
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4619      	mov	r1, r3
 80026ba:	4805      	ldr	r0, [pc, #20]	; (80026d0 <HAL_SPI_MspInit+0x8c>)
 80026bc:	f001 fb9a 	bl	8003df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80026c0:	bf00      	nop
 80026c2:	3728      	adds	r7, #40	; 0x28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40003c00 	.word	0x40003c00
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020800 	.word	0x40020800

080026d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e4:	d10e      	bne.n	8002704 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <HAL_TIM_PWM_MspInit+0x8c>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a1c      	ldr	r2, [pc, #112]	; (8002760 <HAL_TIM_PWM_MspInit+0x8c>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <HAL_TIM_PWM_MspInit+0x8c>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002702:	e026      	b.n	8002752 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a16      	ldr	r2, [pc, #88]	; (8002764 <HAL_TIM_PWM_MspInit+0x90>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10e      	bne.n	800272c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	4b13      	ldr	r3, [pc, #76]	; (8002760 <HAL_TIM_PWM_MspInit+0x8c>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	4a12      	ldr	r2, [pc, #72]	; (8002760 <HAL_TIM_PWM_MspInit+0x8c>)
 8002718:	f043 0302 	orr.w	r3, r3, #2
 800271c:	6453      	str	r3, [r2, #68]	; 0x44
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <HAL_TIM_PWM_MspInit+0x8c>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
}
 800272a:	e012      	b.n	8002752 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <HAL_TIM_PWM_MspInit+0x94>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10d      	bne.n	8002752 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <HAL_TIM_PWM_MspInit+0x8c>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	4a08      	ldr	r2, [pc, #32]	; (8002760 <HAL_TIM_PWM_MspInit+0x8c>)
 8002740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_TIM_PWM_MspInit+0x8c>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
}
 8002752:	bf00      	nop
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	40010400 	.word	0x40010400
 8002768:	40001800 	.word	0x40001800

0800276c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08c      	sub	sp, #48	; 0x30
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 031c 	add.w	r3, r7, #28
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a32      	ldr	r2, [pc, #200]	; (8002854 <HAL_TIM_Encoder_MspInit+0xe8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d12c      	bne.n	80027e8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
 8002792:	4b31      	ldr	r3, [pc, #196]	; (8002858 <HAL_TIM_Encoder_MspInit+0xec>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	4a30      	ldr	r2, [pc, #192]	; (8002858 <HAL_TIM_Encoder_MspInit+0xec>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	6413      	str	r3, [r2, #64]	; 0x40
 800279e:	4b2e      	ldr	r3, [pc, #184]	; (8002858 <HAL_TIM_Encoder_MspInit+0xec>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	61bb      	str	r3, [r7, #24]
 80027a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <HAL_TIM_Encoder_MspInit+0xec>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a29      	ldr	r2, [pc, #164]	; (8002858 <HAL_TIM_Encoder_MspInit+0xec>)
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b27      	ldr	r3, [pc, #156]	; (8002858 <HAL_TIM_Encoder_MspInit+0xec>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER1_A_Pin|ENCODER1_B_Pin;
 80027c6:	2330      	movs	r3, #48	; 0x30
 80027c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d2:	2300      	movs	r3, #0
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027d6:	2302      	movs	r3, #2
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027da:	f107 031c 	add.w	r3, r7, #28
 80027de:	4619      	mov	r1, r3
 80027e0:	481e      	ldr	r0, [pc, #120]	; (800285c <HAL_TIM_Encoder_MspInit+0xf0>)
 80027e2:	f001 fb07 	bl	8003df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80027e6:	e030      	b.n	800284a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1c      	ldr	r2, [pc, #112]	; (8002860 <HAL_TIM_Encoder_MspInit+0xf4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d12b      	bne.n	800284a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	4b18      	ldr	r3, [pc, #96]	; (8002858 <HAL_TIM_Encoder_MspInit+0xec>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	4a17      	ldr	r2, [pc, #92]	; (8002858 <HAL_TIM_Encoder_MspInit+0xec>)
 80027fc:	f043 0304 	orr.w	r3, r3, #4
 8002800:	6413      	str	r3, [r2, #64]	; 0x40
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <HAL_TIM_Encoder_MspInit+0xec>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <HAL_TIM_Encoder_MspInit+0xec>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a10      	ldr	r2, [pc, #64]	; (8002858 <HAL_TIM_Encoder_MspInit+0xec>)
 8002818:	f043 0302 	orr.w	r3, r3, #2
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <HAL_TIM_Encoder_MspInit+0xec>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 800282a:	23c0      	movs	r3, #192	; 0xc0
 800282c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002836:	2300      	movs	r3, #0
 8002838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800283a:	2302      	movs	r3, #2
 800283c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283e:	f107 031c 	add.w	r3, r7, #28
 8002842:	4619      	mov	r1, r3
 8002844:	4805      	ldr	r0, [pc, #20]	; (800285c <HAL_TIM_Encoder_MspInit+0xf0>)
 8002846:	f001 fad5 	bl	8003df4 <HAL_GPIO_Init>
}
 800284a:	bf00      	nop
 800284c:	3730      	adds	r7, #48	; 0x30
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40000400 	.word	0x40000400
 8002858:	40023800 	.word	0x40023800
 800285c:	40020400 	.word	0x40020400
 8002860:	40000800 	.word	0x40000800

08002864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <HAL_TIM_Base_MspInit+0x80>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d116      	bne.n	80028a4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_TIM_Base_MspInit+0x84>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a1a      	ldr	r2, [pc, #104]	; (80028e8 <HAL_TIM_Base_MspInit+0x84>)
 8002880:	f043 0310 	orr.w	r3, r3, #16
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <HAL_TIM_Base_MspInit+0x84>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002892:	2200      	movs	r2, #0
 8002894:	2100      	movs	r1, #0
 8002896:	2036      	movs	r0, #54	; 0x36
 8002898:	f000 ff07 	bl	80036aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800289c:	2036      	movs	r0, #54	; 0x36
 800289e:	f000 ff20 	bl	80036e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80028a2:	e01a      	b.n	80028da <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a10      	ldr	r2, [pc, #64]	; (80028ec <HAL_TIM_Base_MspInit+0x88>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d115      	bne.n	80028da <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <HAL_TIM_Base_MspInit+0x84>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a0c      	ldr	r2, [pc, #48]	; (80028e8 <HAL_TIM_Base_MspInit+0x84>)
 80028b8:	f043 0320 	orr.w	r3, r3, #32
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <HAL_TIM_Base_MspInit+0x84>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f003 0320 	and.w	r3, r3, #32
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2101      	movs	r1, #1
 80028ce:	2037      	movs	r0, #55	; 0x37
 80028d0:	f000 feeb 	bl	80036aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80028d4:	2037      	movs	r0, #55	; 0x37
 80028d6:	f000 ff04 	bl	80036e2 <HAL_NVIC_EnableIRQ>
}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40001000 	.word	0x40001000
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40001400 	.word	0x40001400

080028f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08c      	sub	sp, #48	; 0x30
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002910:	d13e      	bne.n	8002990 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	4b45      	ldr	r3, [pc, #276]	; (8002a2c <HAL_TIM_MspPostInit+0x13c>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4a44      	ldr	r2, [pc, #272]	; (8002a2c <HAL_TIM_MspPostInit+0x13c>)
 800291c:	f043 0302 	orr.w	r3, r3, #2
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4b42      	ldr	r3, [pc, #264]	; (8002a2c <HAL_TIM_MspPostInit+0x13c>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	4b3e      	ldr	r3, [pc, #248]	; (8002a2c <HAL_TIM_MspPostInit+0x13c>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a3d      	ldr	r2, [pc, #244]	; (8002a2c <HAL_TIM_MspPostInit+0x13c>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b3b      	ldr	r3, [pc, #236]	; (8002a2c <HAL_TIM_MspPostInit+0x13c>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = DRONE_MOTOR_PWM1_Pin|DRONE_MOTOR_PWM2_Pin;
 800294a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800294e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002958:	2300      	movs	r3, #0
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800295c:	2301      	movs	r3, #1
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	4619      	mov	r1, r3
 8002966:	4832      	ldr	r0, [pc, #200]	; (8002a30 <HAL_TIM_MspPostInit+0x140>)
 8002968:	f001 fa44 	bl	8003df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FAN_MOTOR_PWM_Pin;
 800296c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002972:	2302      	movs	r3, #2
 8002974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297a:	2300      	movs	r3, #0
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800297e:	2301      	movs	r3, #1
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(FAN_MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8002982:	f107 031c 	add.w	r3, r7, #28
 8002986:	4619      	mov	r1, r3
 8002988:	482a      	ldr	r0, [pc, #168]	; (8002a34 <HAL_TIM_MspPostInit+0x144>)
 800298a:	f001 fa33 	bl	8003df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800298e:	e048      	b.n	8002a22 <HAL_TIM_MspPostInit+0x132>
  else if(htim->Instance==TIM8)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a28      	ldr	r2, [pc, #160]	; (8002a38 <HAL_TIM_MspPostInit+0x148>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d11f      	bne.n	80029da <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <HAL_TIM_MspPostInit+0x13c>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a22      	ldr	r2, [pc, #136]	; (8002a2c <HAL_TIM_MspPostInit+0x13c>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b20      	ldr	r3, [pc, #128]	; (8002a2c <HAL_TIM_MspPostInit+0x13c>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DRIVE_MOTOR1_PWM2_Pin|DRIVE_MOTOR1_PWM1_Pin|DRIVE_MOTOR2_PWM2_Pin|DRIVE_MOTOR2_PWM1_Pin;
 80029b6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80029ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c4:	2300      	movs	r3, #0
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80029c8:	2303      	movs	r3, #3
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029cc:	f107 031c 	add.w	r3, r7, #28
 80029d0:	4619      	mov	r1, r3
 80029d2:	481a      	ldr	r0, [pc, #104]	; (8002a3c <HAL_TIM_MspPostInit+0x14c>)
 80029d4:	f001 fa0e 	bl	8003df4 <HAL_GPIO_Init>
}
 80029d8:	e023      	b.n	8002a22 <HAL_TIM_MspPostInit+0x132>
  else if(htim->Instance==TIM12)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a18      	ldr	r2, [pc, #96]	; (8002a40 <HAL_TIM_MspPostInit+0x150>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d11e      	bne.n	8002a22 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <HAL_TIM_MspPostInit+0x13c>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	4a0f      	ldr	r2, [pc, #60]	; (8002a2c <HAL_TIM_MspPostInit+0x13c>)
 80029ee:	f043 0302 	orr.w	r3, r3, #2
 80029f2:	6313      	str	r3, [r2, #48]	; 0x30
 80029f4:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <HAL_TIM_MspPostInit+0x13c>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DRONE_MOTOR_PWM4_Pin|DRONE_MOTOR_PWM3_Pin;
 8002a00:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002a12:	2309      	movs	r3, #9
 8002a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a16:	f107 031c 	add.w	r3, r7, #28
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4804      	ldr	r0, [pc, #16]	; (8002a30 <HAL_TIM_MspPostInit+0x140>)
 8002a1e:	f001 f9e9 	bl	8003df4 <HAL_GPIO_Init>
}
 8002a22:	bf00      	nop
 8002a24:	3730      	adds	r7, #48	; 0x30
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40020400 	.word	0x40020400
 8002a34:	40020000 	.word	0x40020000
 8002a38:	40010400 	.word	0x40010400
 8002a3c:	40020800 	.word	0x40020800
 8002a40:	40001800 	.word	0x40001800

08002a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08a      	sub	sp, #40	; 0x28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	60da      	str	r2, [r3, #12]
 8002a5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a19      	ldr	r2, [pc, #100]	; (8002ac8 <HAL_UART_MspInit+0x84>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d12c      	bne.n	8002ac0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	4b18      	ldr	r3, [pc, #96]	; (8002acc <HAL_UART_MspInit+0x88>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	4a17      	ldr	r2, [pc, #92]	; (8002acc <HAL_UART_MspInit+0x88>)
 8002a70:	f043 0310 	orr.w	r3, r3, #16
 8002a74:	6453      	str	r3, [r2, #68]	; 0x44
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <HAL_UART_MspInit+0x88>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	4b11      	ldr	r3, [pc, #68]	; (8002acc <HAL_UART_MspInit+0x88>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	4a10      	ldr	r2, [pc, #64]	; (8002acc <HAL_UART_MspInit+0x88>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	6313      	str	r3, [r2, #48]	; 0x30
 8002a92:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <HAL_UART_MspInit+0x88>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aac:	2303      	movs	r3, #3
 8002aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ab0:	2307      	movs	r3, #7
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <HAL_UART_MspInit+0x8c>)
 8002abc:	f001 f99a 	bl	8003df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ac0:	bf00      	nop
 8002ac2:	3728      	adds	r7, #40	; 0x28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40011000 	.word	0x40011000
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40020000 	.word	0x40020000

08002ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ad8:	e7fe      	b.n	8002ad8 <NMI_Handler+0x4>

08002ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ada:	b480      	push	{r7}
 8002adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ade:	e7fe      	b.n	8002ade <HardFault_Handler+0x4>

08002ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae4:	e7fe      	b.n	8002ae4 <MemManage_Handler+0x4>

08002ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aea:	e7fe      	b.n	8002aea <BusFault_Handler+0x4>

08002aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002af0:	e7fe      	b.n	8002af0 <UsageFault_Handler+0x4>

08002af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002af2:	b480      	push	{r7}
 8002af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b20:	f000 f8b2 	bl	8002c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <TIM6_DAC_IRQHandler+0x10>)
 8002b2e:	f002 fa4f 	bl	8004fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	200003f8 	.word	0x200003f8

08002b3c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002b40:	4802      	ldr	r0, [pc, #8]	; (8002b4c <TIM7_IRQHandler+0x10>)
 8002b42:	f002 fa45 	bl	8004fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	200004bc 	.word	0x200004bc

08002b50 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b54:	4802      	ldr	r0, [pc, #8]	; (8002b60 <DMA2_Stream0_IRQHandler+0x10>)
 8002b56:	f000 fee5 	bl	8003924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000398 	.word	0x20000398

08002b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b68:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <SystemInit+0x28>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	4a07      	ldr	r2, [pc, #28]	; (8002b8c <SystemInit+0x28>)
 8002b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <SystemInit+0x28>)
 8002b7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b7e:	609a      	str	r2, [r3, #8]
#endif
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b96:	e003      	b.n	8002ba0 <LoopCopyDataInit>

08002b98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b9e:	3104      	adds	r1, #4

08002ba0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ba0:	480b      	ldr	r0, [pc, #44]	; (8002bd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ba4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ba6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ba8:	d3f6      	bcc.n	8002b98 <CopyDataInit>
  ldr  r2, =_sbss
 8002baa:	4a0b      	ldr	r2, [pc, #44]	; (8002bd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002bac:	e002      	b.n	8002bb4 <LoopFillZerobss>

08002bae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002bae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002bb0:	f842 3b04 	str.w	r3, [r2], #4

08002bb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002bb4:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002bb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bb8:	d3f9      	bcc.n	8002bae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bba:	f7ff ffd3 	bl	8002b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bbe:	f003 fb1f 	bl	8006200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bc2:	f7fe fe17 	bl	80017f4 <main>
  bx  lr    
 8002bc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002bc8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002bcc:	080062a0 	.word	0x080062a0
  ldr  r0, =_sdata
 8002bd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002bd4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002bd8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002bdc:	20000500 	.word	0x20000500

08002be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002be0:	e7fe      	b.n	8002be0 <ADC_IRQHandler>
	...

08002be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002be8:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <HAL_Init+0x40>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0d      	ldr	r2, [pc, #52]	; (8002c24 <HAL_Init+0x40>)
 8002bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_Init+0x40>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <HAL_Init+0x40>)
 8002bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <HAL_Init+0x40>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a07      	ldr	r2, [pc, #28]	; (8002c24 <HAL_Init+0x40>)
 8002c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c0c:	2003      	movs	r0, #3
 8002c0e:	f000 fd41 	bl	8003694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c12:	2000      	movs	r0, #0
 8002c14:	f000 f808 	bl	8002c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c18:	f7ff fbf4 	bl	8002404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40023c00 	.word	0x40023c00

08002c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <HAL_InitTick+0x54>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <HAL_InitTick+0x58>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fd59 	bl	80036fe <HAL_SYSTICK_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e00e      	b.n	8002c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b0f      	cmp	r3, #15
 8002c5a:	d80a      	bhi.n	8002c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	f04f 30ff 	mov.w	r0, #4294967295
 8002c64:	f000 fd21 	bl	80036aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c68:	4a06      	ldr	r2, [pc, #24]	; (8002c84 <HAL_InitTick+0x5c>)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e000      	b.n	8002c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000000 	.word	0x20000000
 8002c80:	20000008 	.word	0x20000008
 8002c84:	20000004 	.word	0x20000004

08002c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_IncTick+0x20>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_IncTick+0x24>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4413      	add	r3, r2
 8002c98:	4a04      	ldr	r2, [pc, #16]	; (8002cac <HAL_IncTick+0x24>)
 8002c9a:	6013      	str	r3, [r2, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20000008 	.word	0x20000008
 8002cac:	200004fc 	.word	0x200004fc

08002cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <HAL_GetTick+0x14>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	200004fc 	.word	0x200004fc

08002cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cd0:	f7ff ffee 	bl	8002cb0 <HAL_GetTick>
 8002cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce0:	d005      	beq.n	8002cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_Delay+0x40>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4413      	add	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cee:	bf00      	nop
 8002cf0:	f7ff ffde 	bl	8002cb0 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d8f7      	bhi.n	8002cf0 <HAL_Delay+0x28>
  {
  }
}
 8002d00:	bf00      	nop
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20000008 	.word	0x20000008

08002d0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e033      	b.n	8002d8a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff fb92 	bl	8002454 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d118      	bne.n	8002d7c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d52:	f023 0302 	bic.w	r3, r3, #2
 8002d56:	f043 0202 	orr.w	r2, r3, #2
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fa4a 	bl	80031f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f023 0303 	bic.w	r3, r3, #3
 8002d72:	f043 0201 	orr.w	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	641a      	str	r2, [r3, #64]	; 0x40
 8002d7a:	e001      	b.n	8002d80 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <HAL_ADC_Start_DMA+0x1e>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e0cc      	b.n	8002f4c <HAL_ADC_Start_DMA+0x1b8>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d018      	beq.n	8002dfa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002dd8:	4b5e      	ldr	r3, [pc, #376]	; (8002f54 <HAL_ADC_Start_DMA+0x1c0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a5e      	ldr	r2, [pc, #376]	; (8002f58 <HAL_ADC_Start_DMA+0x1c4>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	0c9a      	lsrs	r2, r3, #18
 8002de4:	4613      	mov	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4413      	add	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002dec:	e002      	b.n	8002df4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	3b01      	subs	r3, #1
 8002df2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f9      	bne.n	8002dee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	f040 80a0 	bne.w	8002f4a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e12:	f023 0301 	bic.w	r3, r3, #1
 8002e16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e34:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e48:	d106      	bne.n	8002e58 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	f023 0206 	bic.w	r2, r3, #6
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44
 8002e56:	e002      	b.n	8002e5e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e66:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <HAL_ADC_Start_DMA+0x1c8>)
 8002e68:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	4a3c      	ldr	r2, [pc, #240]	; (8002f60 <HAL_ADC_Start_DMA+0x1cc>)
 8002e70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e76:	4a3b      	ldr	r2, [pc, #236]	; (8002f64 <HAL_ADC_Start_DMA+0x1d0>)
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7e:	4a3a      	ldr	r2, [pc, #232]	; (8002f68 <HAL_ADC_Start_DMA+0x1d4>)
 8002e80:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002e9a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eaa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	334c      	adds	r3, #76	; 0x4c
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f000 fcda 	bl	8003874 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d12a      	bne.n	8002f22 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a26      	ldr	r2, [pc, #152]	; (8002f6c <HAL_ADC_Start_DMA+0x1d8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d015      	beq.n	8002f02 <HAL_ADC_Start_DMA+0x16e>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a25      	ldr	r2, [pc, #148]	; (8002f70 <HAL_ADC_Start_DMA+0x1dc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d105      	bne.n	8002eec <HAL_ADC_Start_DMA+0x158>
 8002ee0:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <HAL_ADC_Start_DMA+0x1c8>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a20      	ldr	r2, [pc, #128]	; (8002f74 <HAL_ADC_Start_DMA+0x1e0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d129      	bne.n	8002f4a <HAL_ADC_Start_DMA+0x1b6>
 8002ef6:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_ADC_Start_DMA+0x1c8>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	2b0f      	cmp	r3, #15
 8002f00:	d823      	bhi.n	8002f4a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d11c      	bne.n	8002f4a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	e013      	b.n	8002f4a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a11      	ldr	r2, [pc, #68]	; (8002f6c <HAL_ADC_Start_DMA+0x1d8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d10e      	bne.n	8002f4a <HAL_ADC_Start_DMA+0x1b6>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d107      	bne.n	8002f4a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f48:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000000 	.word	0x20000000
 8002f58:	431bde83 	.word	0x431bde83
 8002f5c:	40012300 	.word	0x40012300
 8002f60:	080033f1 	.word	0x080033f1
 8002f64:	080034ab 	.word	0x080034ab
 8002f68:	080034c7 	.word	0x080034c7
 8002f6c:	40012000 	.word	0x40012000
 8002f70:	40012100 	.word	0x40012100
 8002f74:	40012200 	.word	0x40012200

08002f78 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x1c>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e105      	b.n	80031dc <HAL_ADC_ConfigChannel+0x228>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b09      	cmp	r3, #9
 8002fde:	d925      	bls.n	800302c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68d9      	ldr	r1, [r3, #12]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	461a      	mov	r2, r3
 8002fee:	4613      	mov	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3b1e      	subs	r3, #30
 8002ff6:	2207      	movs	r2, #7
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43da      	mvns	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	400a      	ands	r2, r1
 8003004:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68d9      	ldr	r1, [r3, #12]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	b29b      	uxth	r3, r3
 8003016:	4618      	mov	r0, r3
 8003018:	4603      	mov	r3, r0
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4403      	add	r3, r0
 800301e:	3b1e      	subs	r3, #30
 8003020:	409a      	lsls	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	e022      	b.n	8003072 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6919      	ldr	r1, [r3, #16]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	b29b      	uxth	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	4613      	mov	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	4413      	add	r3, r2
 8003040:	2207      	movs	r2, #7
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43da      	mvns	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	400a      	ands	r2, r1
 800304e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6919      	ldr	r1, [r3, #16]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	4618      	mov	r0, r3
 8003062:	4603      	mov	r3, r0
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4403      	add	r3, r0
 8003068:	409a      	lsls	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b06      	cmp	r3, #6
 8003078:	d824      	bhi.n	80030c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	3b05      	subs	r3, #5
 800308c:	221f      	movs	r2, #31
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43da      	mvns	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	400a      	ands	r2, r1
 800309a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	4618      	mov	r0, r3
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	3b05      	subs	r3, #5
 80030b6:	fa00 f203 	lsl.w	r2, r0, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	635a      	str	r2, [r3, #52]	; 0x34
 80030c2:	e04c      	b.n	800315e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b0c      	cmp	r3, #12
 80030ca:	d824      	bhi.n	8003116 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	3b23      	subs	r3, #35	; 0x23
 80030de:	221f      	movs	r2, #31
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43da      	mvns	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	400a      	ands	r2, r1
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	4618      	mov	r0, r3
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	3b23      	subs	r3, #35	; 0x23
 8003108:	fa00 f203 	lsl.w	r2, r0, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	631a      	str	r2, [r3, #48]	; 0x30
 8003114:	e023      	b.n	800315e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	3b41      	subs	r3, #65	; 0x41
 8003128:	221f      	movs	r2, #31
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43da      	mvns	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	400a      	ands	r2, r1
 8003136:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	b29b      	uxth	r3, r3
 8003144:	4618      	mov	r0, r3
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	3b41      	subs	r3, #65	; 0x41
 8003152:	fa00 f203 	lsl.w	r2, r0, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800315e:	4b22      	ldr	r3, [pc, #136]	; (80031e8 <HAL_ADC_ConfigChannel+0x234>)
 8003160:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a21      	ldr	r2, [pc, #132]	; (80031ec <HAL_ADC_ConfigChannel+0x238>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d109      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x1cc>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b12      	cmp	r3, #18
 8003172:	d105      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a19      	ldr	r2, [pc, #100]	; (80031ec <HAL_ADC_ConfigChannel+0x238>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d123      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x21e>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b10      	cmp	r3, #16
 8003190:	d003      	beq.n	800319a <HAL_ADC_ConfigChannel+0x1e6>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b11      	cmp	r3, #17
 8003198:	d11b      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b10      	cmp	r3, #16
 80031ac:	d111      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031ae:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <HAL_ADC_ConfigChannel+0x23c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a10      	ldr	r2, [pc, #64]	; (80031f4 <HAL_ADC_ConfigChannel+0x240>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	0c9a      	lsrs	r2, r3, #18
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031c4:	e002      	b.n	80031cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f9      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	40012300 	.word	0x40012300
 80031ec:	40012000 	.word	0x40012000
 80031f0:	20000000 	.word	0x20000000
 80031f4:	431bde83 	.word	0x431bde83

080031f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003200:	4b79      	ldr	r3, [pc, #484]	; (80033e8 <ADC_Init+0x1f0>)
 8003202:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	431a      	orrs	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800322c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6859      	ldr	r1, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	021a      	lsls	r2, r3, #8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003250:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003272:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6899      	ldr	r1, [r3, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	4a58      	ldr	r2, [pc, #352]	; (80033ec <ADC_Init+0x1f4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d022      	beq.n	80032d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800329e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6899      	ldr	r1, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6899      	ldr	r1, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	e00f      	b.n	80032f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0202 	bic.w	r2, r2, #2
 8003304:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6899      	ldr	r1, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	7e1b      	ldrb	r3, [r3, #24]
 8003310:	005a      	lsls	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01b      	beq.n	800335c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003332:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003342:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6859      	ldr	r1, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	3b01      	subs	r3, #1
 8003350:	035a      	lsls	r2, r3, #13
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	e007      	b.n	800336c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800336a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800337a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	3b01      	subs	r3, #1
 8003388:	051a      	lsls	r2, r3, #20
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6899      	ldr	r1, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033ae:	025a      	lsls	r2, r3, #9
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6899      	ldr	r1, [r3, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	029a      	lsls	r2, r3, #10
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	609a      	str	r2, [r3, #8]
}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	40012300 	.word	0x40012300
 80033ec:	0f000001 	.word	0x0f000001

080033f0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003406:	2b00      	cmp	r3, #0
 8003408:	d13c      	bne.n	8003484 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d12b      	bne.n	800347c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003428:	2b00      	cmp	r3, #0
 800342a:	d127      	bne.n	800347c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003436:	2b00      	cmp	r3, #0
 8003438:	d006      	beq.n	8003448 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003444:	2b00      	cmp	r3, #0
 8003446:	d119      	bne.n	800347c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0220 	bic.w	r2, r2, #32
 8003456:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d105      	bne.n	800347c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	f043 0201 	orr.w	r2, r3, #1
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f7ff fd7b 	bl	8002f78 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003482:	e00e      	b.n	80034a2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f7ff fd85 	bl	8002fa0 <HAL_ADC_ErrorCallback>
}
 8003496:	e004      	b.n	80034a2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	4798      	blx	r3
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7ff fd67 	bl	8002f8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034be:	bf00      	nop
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2240      	movs	r2, #64	; 0x40
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	f043 0204 	orr.w	r2, r3, #4
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f7ff fd5a 	bl	8002fa0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003504:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <__NVIC_SetPriorityGrouping+0x44>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003510:	4013      	ands	r3, r2
 8003512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800351c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003526:	4a04      	ldr	r2, [pc, #16]	; (8003538 <__NVIC_SetPriorityGrouping+0x44>)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	60d3      	str	r3, [r2, #12]
}
 800352c:	bf00      	nop
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003540:	4b04      	ldr	r3, [pc, #16]	; (8003554 <__NVIC_GetPriorityGrouping+0x18>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	0a1b      	lsrs	r3, r3, #8
 8003546:	f003 0307 	and.w	r3, r3, #7
}
 800354a:	4618      	mov	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	2b00      	cmp	r3, #0
 8003568:	db0b      	blt.n	8003582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	f003 021f 	and.w	r2, r3, #31
 8003570:	4907      	ldr	r1, [pc, #28]	; (8003590 <__NVIC_EnableIRQ+0x38>)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	2001      	movs	r0, #1
 800357a:	fa00 f202 	lsl.w	r2, r0, r2
 800357e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	e000e100 	.word	0xe000e100

08003594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	6039      	str	r1, [r7, #0]
 800359e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	db0a      	blt.n	80035be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	490c      	ldr	r1, [pc, #48]	; (80035e0 <__NVIC_SetPriority+0x4c>)
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	0112      	lsls	r2, r2, #4
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	440b      	add	r3, r1
 80035b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035bc:	e00a      	b.n	80035d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	4908      	ldr	r1, [pc, #32]	; (80035e4 <__NVIC_SetPriority+0x50>)
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	3b04      	subs	r3, #4
 80035cc:	0112      	lsls	r2, r2, #4
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	440b      	add	r3, r1
 80035d2:	761a      	strb	r2, [r3, #24]
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	e000e100 	.word	0xe000e100
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b089      	sub	sp, #36	; 0x24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f1c3 0307 	rsb	r3, r3, #7
 8003602:	2b04      	cmp	r3, #4
 8003604:	bf28      	it	cs
 8003606:	2304      	movcs	r3, #4
 8003608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3304      	adds	r3, #4
 800360e:	2b06      	cmp	r3, #6
 8003610:	d902      	bls.n	8003618 <NVIC_EncodePriority+0x30>
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	3b03      	subs	r3, #3
 8003616:	e000      	b.n	800361a <NVIC_EncodePriority+0x32>
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800361c:	f04f 32ff 	mov.w	r2, #4294967295
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43da      	mvns	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	401a      	ands	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003630:	f04f 31ff 	mov.w	r1, #4294967295
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	fa01 f303 	lsl.w	r3, r1, r3
 800363a:	43d9      	mvns	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003640:	4313      	orrs	r3, r2
         );
}
 8003642:	4618      	mov	r0, r3
 8003644:	3724      	adds	r7, #36	; 0x24
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3b01      	subs	r3, #1
 800365c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003660:	d301      	bcc.n	8003666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003662:	2301      	movs	r3, #1
 8003664:	e00f      	b.n	8003686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003666:	4a0a      	ldr	r2, [pc, #40]	; (8003690 <SysTick_Config+0x40>)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3b01      	subs	r3, #1
 800366c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800366e:	210f      	movs	r1, #15
 8003670:	f04f 30ff 	mov.w	r0, #4294967295
 8003674:	f7ff ff8e 	bl	8003594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003678:	4b05      	ldr	r3, [pc, #20]	; (8003690 <SysTick_Config+0x40>)
 800367a:	2200      	movs	r2, #0
 800367c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800367e:	4b04      	ldr	r3, [pc, #16]	; (8003690 <SysTick_Config+0x40>)
 8003680:	2207      	movs	r2, #7
 8003682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	e000e010 	.word	0xe000e010

08003694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ff29 	bl	80034f4 <__NVIC_SetPriorityGrouping>
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b086      	sub	sp, #24
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	4603      	mov	r3, r0
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
 80036b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036bc:	f7ff ff3e 	bl	800353c <__NVIC_GetPriorityGrouping>
 80036c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	6978      	ldr	r0, [r7, #20]
 80036c8:	f7ff ff8e 	bl	80035e8 <NVIC_EncodePriority>
 80036cc:	4602      	mov	r2, r0
 80036ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d2:	4611      	mov	r1, r2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff5d 	bl	8003594 <__NVIC_SetPriority>
}
 80036da:	bf00      	nop
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	4603      	mov	r3, r0
 80036ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff ff31 	bl	8003558 <__NVIC_EnableIRQ>
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff ffa2 	bl	8003650 <SysTick_Config>
 800370c:	4603      	mov	r3, r0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003724:	f7ff fac4 	bl	8002cb0 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e099      	b.n	8003868 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0201 	bic.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003754:	e00f      	b.n	8003776 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003756:	f7ff faab 	bl	8002cb0 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b05      	cmp	r3, #5
 8003762:	d908      	bls.n	8003776 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2203      	movs	r2, #3
 800376e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e078      	b.n	8003868 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e8      	bne.n	8003756 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4b38      	ldr	r3, [pc, #224]	; (8003870 <HAL_DMA_Init+0x158>)
 8003790:	4013      	ands	r3, r2
 8003792:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d107      	bne.n	80037e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	4313      	orrs	r3, r2
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f023 0307 	bic.w	r3, r3, #7
 80037f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	2b04      	cmp	r3, #4
 8003808:	d117      	bne.n	800383a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00e      	beq.n	800383a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 fa6f 	bl	8003d00 <DMA_CheckFifoParam>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2240      	movs	r2, #64	; 0x40
 800382c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003836:	2301      	movs	r3, #1
 8003838:	e016      	b.n	8003868 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fa26 	bl	8003c94 <DMA_CalcBaseAndBitshift>
 8003848:	4603      	mov	r3, r0
 800384a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003850:	223f      	movs	r2, #63	; 0x3f
 8003852:	409a      	lsls	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	f010803f 	.word	0xf010803f

08003874 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_DMA_Start_IT+0x26>
 8003896:	2302      	movs	r3, #2
 8003898:	e040      	b.n	800391c <HAL_DMA_Start_IT+0xa8>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d12f      	bne.n	800390e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2202      	movs	r2, #2
 80038b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 f9b8 	bl	8003c38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038cc:	223f      	movs	r2, #63	; 0x3f
 80038ce:	409a      	lsls	r2, r3
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0216 	orr.w	r2, r2, #22
 80038e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0208 	orr.w	r2, r2, #8
 80038fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	e005      	b.n	800391a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003916:	2302      	movs	r3, #2
 8003918:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800391a:	7dfb      	ldrb	r3, [r7, #23]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003930:	4b92      	ldr	r3, [pc, #584]	; (8003b7c <HAL_DMA_IRQHandler+0x258>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a92      	ldr	r2, [pc, #584]	; (8003b80 <HAL_DMA_IRQHandler+0x25c>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	0a9b      	lsrs	r3, r3, #10
 800393c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394e:	2208      	movs	r2, #8
 8003950:	409a      	lsls	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4013      	ands	r3, r2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d01a      	beq.n	8003990 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d013      	beq.n	8003990 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0204 	bic.w	r2, r2, #4
 8003976:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397c:	2208      	movs	r2, #8
 800397e:	409a      	lsls	r2, r3
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003988:	f043 0201 	orr.w	r2, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	2201      	movs	r2, #1
 8003996:	409a      	lsls	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4013      	ands	r3, r2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d012      	beq.n	80039c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b2:	2201      	movs	r2, #1
 80039b4:	409a      	lsls	r2, r3
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	f043 0202 	orr.w	r2, r3, #2
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ca:	2204      	movs	r2, #4
 80039cc:	409a      	lsls	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d012      	beq.n	80039fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00b      	beq.n	80039fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e8:	2204      	movs	r2, #4
 80039ea:	409a      	lsls	r2, r3
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f4:	f043 0204 	orr.w	r2, r3, #4
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a00:	2210      	movs	r2, #16
 8003a02:	409a      	lsls	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d043      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d03c      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1e:	2210      	movs	r2, #16
 8003a20:	409a      	lsls	r2, r3
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d018      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d108      	bne.n	8003a54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d024      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	4798      	blx	r3
 8003a52:	e01f      	b.n	8003a94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01b      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4798      	blx	r3
 8003a64:	e016      	b.n	8003a94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d107      	bne.n	8003a84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0208 	bic.w	r2, r2, #8
 8003a82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a98:	2220      	movs	r2, #32
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 808e 	beq.w	8003bc2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 8086 	beq.w	8003bc2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aba:	2220      	movs	r2, #32
 8003abc:	409a      	lsls	r2, r3
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b05      	cmp	r3, #5
 8003acc:	d136      	bne.n	8003b3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0216 	bic.w	r2, r2, #22
 8003adc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d103      	bne.n	8003afe <HAL_DMA_IRQHandler+0x1da>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0208 	bic.w	r2, r2, #8
 8003b0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b12:	223f      	movs	r2, #63	; 0x3f
 8003b14:	409a      	lsls	r2, r3
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d07d      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	4798      	blx	r3
        }
        return;
 8003b3a:	e078      	b.n	8003c2e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d01c      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d108      	bne.n	8003b6a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d030      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	4798      	blx	r3
 8003b68:	e02b      	b.n	8003bc2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d027      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	4798      	blx	r3
 8003b7a:	e022      	b.n	8003bc2 <HAL_DMA_IRQHandler+0x29e>
 8003b7c:	20000000 	.word	0x20000000
 8003b80:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10f      	bne.n	8003bb2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0210 	bic.w	r2, r2, #16
 8003ba0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d032      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d022      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2205      	movs	r2, #5
 8003bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0201 	bic.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	60bb      	str	r3, [r7, #8]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d307      	bcc.n	8003c0a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1f2      	bne.n	8003bee <HAL_DMA_IRQHandler+0x2ca>
 8003c08:	e000      	b.n	8003c0c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c0a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
 8003c2c:	e000      	b.n	8003c30 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c2e:	bf00      	nop
    }
  }
}
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop

08003c38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d108      	bne.n	8003c78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c76:	e007      	b.n	8003c88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	60da      	str	r2, [r3, #12]
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	3b10      	subs	r3, #16
 8003ca4:	4a14      	ldr	r2, [pc, #80]	; (8003cf8 <DMA_CalcBaseAndBitshift+0x64>)
 8003ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8003caa:	091b      	lsrs	r3, r3, #4
 8003cac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cae:	4a13      	ldr	r2, [pc, #76]	; (8003cfc <DMA_CalcBaseAndBitshift+0x68>)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	d909      	bls.n	8003cd6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cca:	f023 0303 	bic.w	r3, r3, #3
 8003cce:	1d1a      	adds	r2, r3, #4
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	659a      	str	r2, [r3, #88]	; 0x58
 8003cd4:	e007      	b.n	8003ce6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cde:	f023 0303 	bic.w	r3, r3, #3
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	aaaaaaab 	.word	0xaaaaaaab
 8003cfc:	08006288 	.word	0x08006288

08003d00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d11f      	bne.n	8003d5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d855      	bhi.n	8003dcc <DMA_CheckFifoParam+0xcc>
 8003d20:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <DMA_CheckFifoParam+0x28>)
 8003d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d26:	bf00      	nop
 8003d28:	08003d39 	.word	0x08003d39
 8003d2c:	08003d4b 	.word	0x08003d4b
 8003d30:	08003d39 	.word	0x08003d39
 8003d34:	08003dcd 	.word	0x08003dcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d045      	beq.n	8003dd0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d48:	e042      	b.n	8003dd0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d52:	d13f      	bne.n	8003dd4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d58:	e03c      	b.n	8003dd4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d62:	d121      	bne.n	8003da8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d836      	bhi.n	8003dd8 <DMA_CheckFifoParam+0xd8>
 8003d6a:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <DMA_CheckFifoParam+0x70>)
 8003d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d70:	08003d81 	.word	0x08003d81
 8003d74:	08003d87 	.word	0x08003d87
 8003d78:	08003d81 	.word	0x08003d81
 8003d7c:	08003d99 	.word	0x08003d99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
      break;
 8003d84:	e02f      	b.n	8003de6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d024      	beq.n	8003ddc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d96:	e021      	b.n	8003ddc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003da0:	d11e      	bne.n	8003de0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003da6:	e01b      	b.n	8003de0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d902      	bls.n	8003db4 <DMA_CheckFifoParam+0xb4>
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d003      	beq.n	8003dba <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003db2:	e018      	b.n	8003de6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
      break;
 8003db8:	e015      	b.n	8003de6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00e      	beq.n	8003de4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8003dca:	e00b      	b.n	8003de4 <DMA_CheckFifoParam+0xe4>
      break;
 8003dcc:	bf00      	nop
 8003dce:	e00a      	b.n	8003de6 <DMA_CheckFifoParam+0xe6>
      break;
 8003dd0:	bf00      	nop
 8003dd2:	e008      	b.n	8003de6 <DMA_CheckFifoParam+0xe6>
      break;
 8003dd4:	bf00      	nop
 8003dd6:	e006      	b.n	8003de6 <DMA_CheckFifoParam+0xe6>
      break;
 8003dd8:	bf00      	nop
 8003dda:	e004      	b.n	8003de6 <DMA_CheckFifoParam+0xe6>
      break;
 8003ddc:	bf00      	nop
 8003dde:	e002      	b.n	8003de6 <DMA_CheckFifoParam+0xe6>
      break;   
 8003de0:	bf00      	nop
 8003de2:	e000      	b.n	8003de6 <DMA_CheckFifoParam+0xe6>
      break;
 8003de4:	bf00      	nop
    }
  } 
  
  return status; 
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b089      	sub	sp, #36	; 0x24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	e16b      	b.n	80040e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e10:	2201      	movs	r2, #1
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4013      	ands	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	f040 815a 	bne.w	80040e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d00b      	beq.n	8003e4e <HAL_GPIO_Init+0x5a>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d007      	beq.n	8003e4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e42:	2b11      	cmp	r3, #17
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b12      	cmp	r3, #18
 8003e4c:	d130      	bne.n	8003eb0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	2203      	movs	r2, #3
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4013      	ands	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e84:	2201      	movs	r2, #1
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4013      	ands	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	091b      	lsrs	r3, r3, #4
 8003e9a:	f003 0201 	and.w	r2, r3, #1
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	2203      	movs	r2, #3
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d003      	beq.n	8003ef0 <HAL_GPIO_Init+0xfc>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b12      	cmp	r3, #18
 8003eee:	d123      	bne.n	8003f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	08da      	lsrs	r2, r3, #3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3208      	adds	r2, #8
 8003ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	220f      	movs	r2, #15
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4013      	ands	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	08da      	lsrs	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3208      	adds	r2, #8
 8003f32:	69b9      	ldr	r1, [r7, #24]
 8003f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	2203      	movs	r2, #3
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f003 0203 	and.w	r2, r3, #3
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80b4 	beq.w	80040e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	4b5f      	ldr	r3, [pc, #380]	; (80040fc <HAL_GPIO_Init+0x308>)
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	4a5e      	ldr	r2, [pc, #376]	; (80040fc <HAL_GPIO_Init+0x308>)
 8003f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f88:	6453      	str	r3, [r2, #68]	; 0x44
 8003f8a:	4b5c      	ldr	r3, [pc, #368]	; (80040fc <HAL_GPIO_Init+0x308>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f96:	4a5a      	ldr	r2, [pc, #360]	; (8004100 <HAL_GPIO_Init+0x30c>)
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	089b      	lsrs	r3, r3, #2
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	220f      	movs	r2, #15
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a51      	ldr	r2, [pc, #324]	; (8004104 <HAL_GPIO_Init+0x310>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d02b      	beq.n	800401a <HAL_GPIO_Init+0x226>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a50      	ldr	r2, [pc, #320]	; (8004108 <HAL_GPIO_Init+0x314>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d025      	beq.n	8004016 <HAL_GPIO_Init+0x222>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a4f      	ldr	r2, [pc, #316]	; (800410c <HAL_GPIO_Init+0x318>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d01f      	beq.n	8004012 <HAL_GPIO_Init+0x21e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a4e      	ldr	r2, [pc, #312]	; (8004110 <HAL_GPIO_Init+0x31c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d019      	beq.n	800400e <HAL_GPIO_Init+0x21a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a4d      	ldr	r2, [pc, #308]	; (8004114 <HAL_GPIO_Init+0x320>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <HAL_GPIO_Init+0x216>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a4c      	ldr	r2, [pc, #304]	; (8004118 <HAL_GPIO_Init+0x324>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00d      	beq.n	8004006 <HAL_GPIO_Init+0x212>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a4b      	ldr	r2, [pc, #300]	; (800411c <HAL_GPIO_Init+0x328>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d007      	beq.n	8004002 <HAL_GPIO_Init+0x20e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a4a      	ldr	r2, [pc, #296]	; (8004120 <HAL_GPIO_Init+0x32c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d101      	bne.n	8003ffe <HAL_GPIO_Init+0x20a>
 8003ffa:	2307      	movs	r3, #7
 8003ffc:	e00e      	b.n	800401c <HAL_GPIO_Init+0x228>
 8003ffe:	2308      	movs	r3, #8
 8004000:	e00c      	b.n	800401c <HAL_GPIO_Init+0x228>
 8004002:	2306      	movs	r3, #6
 8004004:	e00a      	b.n	800401c <HAL_GPIO_Init+0x228>
 8004006:	2305      	movs	r3, #5
 8004008:	e008      	b.n	800401c <HAL_GPIO_Init+0x228>
 800400a:	2304      	movs	r3, #4
 800400c:	e006      	b.n	800401c <HAL_GPIO_Init+0x228>
 800400e:	2303      	movs	r3, #3
 8004010:	e004      	b.n	800401c <HAL_GPIO_Init+0x228>
 8004012:	2302      	movs	r3, #2
 8004014:	e002      	b.n	800401c <HAL_GPIO_Init+0x228>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <HAL_GPIO_Init+0x228>
 800401a:	2300      	movs	r3, #0
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	f002 0203 	and.w	r2, r2, #3
 8004022:	0092      	lsls	r2, r2, #2
 8004024:	4093      	lsls	r3, r2
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800402c:	4934      	ldr	r1, [pc, #208]	; (8004100 <HAL_GPIO_Init+0x30c>)
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	089b      	lsrs	r3, r3, #2
 8004032:	3302      	adds	r3, #2
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800403a:	4b3a      	ldr	r3, [pc, #232]	; (8004124 <HAL_GPIO_Init+0x330>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800405e:	4a31      	ldr	r2, [pc, #196]	; (8004124 <HAL_GPIO_Init+0x330>)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004064:	4b2f      	ldr	r3, [pc, #188]	; (8004124 <HAL_GPIO_Init+0x330>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	43db      	mvns	r3, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4013      	ands	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004088:	4a26      	ldr	r2, [pc, #152]	; (8004124 <HAL_GPIO_Init+0x330>)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800408e:	4b25      	ldr	r3, [pc, #148]	; (8004124 <HAL_GPIO_Init+0x330>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040b2:	4a1c      	ldr	r2, [pc, #112]	; (8004124 <HAL_GPIO_Init+0x330>)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040b8:	4b1a      	ldr	r3, [pc, #104]	; (8004124 <HAL_GPIO_Init+0x330>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4013      	ands	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040dc:	4a11      	ldr	r2, [pc, #68]	; (8004124 <HAL_GPIO_Init+0x330>)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3301      	adds	r3, #1
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	f67f ae90 	bls.w	8003e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040f0:	bf00      	nop
 80040f2:	3724      	adds	r7, #36	; 0x24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	40023800 	.word	0x40023800
 8004100:	40013800 	.word	0x40013800
 8004104:	40020000 	.word	0x40020000
 8004108:	40020400 	.word	0x40020400
 800410c:	40020800 	.word	0x40020800
 8004110:	40020c00 	.word	0x40020c00
 8004114:	40021000 	.word	0x40021000
 8004118:	40021400 	.word	0x40021400
 800411c:	40021800 	.word	0x40021800
 8004120:	40021c00 	.word	0x40021c00
 8004124:	40013c00 	.word	0x40013c00

08004128 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	887b      	ldrh	r3, [r7, #2]
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
 8004144:	e001      	b.n	800414a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800414a:	7bfb      	ldrb	r3, [r7, #15]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	807b      	strh	r3, [r7, #2]
 8004164:	4613      	mov	r3, r2
 8004166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004168:	787b      	ldrb	r3, [r7, #1]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800416e:	887a      	ldrh	r2, [r7, #2]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004174:	e003      	b.n	800417e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004176:	887b      	ldrh	r3, [r7, #2]
 8004178:	041a      	lsls	r2, r3, #16
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	619a      	str	r2, [r3, #24]
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
	...

0800418c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e11f      	b.n	80043de <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fe f9fe 	bl	80025b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2224      	movs	r2, #36	; 0x24
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041f0:	f000 fd18 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 80041f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	4a7b      	ldr	r2, [pc, #492]	; (80043e8 <HAL_I2C_Init+0x25c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d807      	bhi.n	8004210 <HAL_I2C_Init+0x84>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4a7a      	ldr	r2, [pc, #488]	; (80043ec <HAL_I2C_Init+0x260>)
 8004204:	4293      	cmp	r3, r2
 8004206:	bf94      	ite	ls
 8004208:	2301      	movls	r3, #1
 800420a:	2300      	movhi	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	e006      	b.n	800421e <HAL_I2C_Init+0x92>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4a77      	ldr	r2, [pc, #476]	; (80043f0 <HAL_I2C_Init+0x264>)
 8004214:	4293      	cmp	r3, r2
 8004216:	bf94      	ite	ls
 8004218:	2301      	movls	r3, #1
 800421a:	2300      	movhi	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e0db      	b.n	80043de <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4a72      	ldr	r2, [pc, #456]	; (80043f4 <HAL_I2C_Init+0x268>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	0c9b      	lsrs	r3, r3, #18
 8004230:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	430a      	orrs	r2, r1
 8004244:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4a64      	ldr	r2, [pc, #400]	; (80043e8 <HAL_I2C_Init+0x25c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d802      	bhi.n	8004260 <HAL_I2C_Init+0xd4>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	3301      	adds	r3, #1
 800425e:	e009      	b.n	8004274 <HAL_I2C_Init+0xe8>
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	4a63      	ldr	r2, [pc, #396]	; (80043f8 <HAL_I2C_Init+0x26c>)
 800426c:	fba2 2303 	umull	r2, r3, r2, r3
 8004270:	099b      	lsrs	r3, r3, #6
 8004272:	3301      	adds	r3, #1
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	430b      	orrs	r3, r1
 800427a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004286:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	4956      	ldr	r1, [pc, #344]	; (80043e8 <HAL_I2C_Init+0x25c>)
 8004290:	428b      	cmp	r3, r1
 8004292:	d80d      	bhi.n	80042b0 <HAL_I2C_Init+0x124>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	1e59      	subs	r1, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	fbb1 f3f3 	udiv	r3, r1, r3
 80042a2:	3301      	adds	r3, #1
 80042a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	bf38      	it	cc
 80042ac:	2304      	movcc	r3, #4
 80042ae:	e04f      	b.n	8004350 <HAL_I2C_Init+0x1c4>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d111      	bne.n	80042dc <HAL_I2C_Init+0x150>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	1e58      	subs	r0, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6859      	ldr	r1, [r3, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	440b      	add	r3, r1
 80042c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ca:	3301      	adds	r3, #1
 80042cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bf0c      	ite	eq
 80042d4:	2301      	moveq	r3, #1
 80042d6:	2300      	movne	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	e012      	b.n	8004302 <HAL_I2C_Init+0x176>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	1e58      	subs	r0, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6859      	ldr	r1, [r3, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	0099      	lsls	r1, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80042f2:	3301      	adds	r3, #1
 80042f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	bf0c      	ite	eq
 80042fc:	2301      	moveq	r3, #1
 80042fe:	2300      	movne	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_I2C_Init+0x17e>
 8004306:	2301      	movs	r3, #1
 8004308:	e022      	b.n	8004350 <HAL_I2C_Init+0x1c4>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10e      	bne.n	8004330 <HAL_I2C_Init+0x1a4>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1e58      	subs	r0, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6859      	ldr	r1, [r3, #4]
 800431a:	460b      	mov	r3, r1
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	440b      	add	r3, r1
 8004320:	fbb0 f3f3 	udiv	r3, r0, r3
 8004324:	3301      	adds	r3, #1
 8004326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800432a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800432e:	e00f      	b.n	8004350 <HAL_I2C_Init+0x1c4>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	1e58      	subs	r0, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6859      	ldr	r1, [r3, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	0099      	lsls	r1, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	fbb0 f3f3 	udiv	r3, r0, r3
 8004346:	3301      	adds	r3, #1
 8004348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800434c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	6809      	ldr	r1, [r1, #0]
 8004354:	4313      	orrs	r3, r2
 8004356:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69da      	ldr	r2, [r3, #28]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800437e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6911      	ldr	r1, [r2, #16]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68d2      	ldr	r2, [r2, #12]
 800438a:	4311      	orrs	r1, r2
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	430b      	orrs	r3, r1
 8004392:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695a      	ldr	r2, [r3, #20]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	000186a0 	.word	0x000186a0
 80043ec:	001e847f 	.word	0x001e847f
 80043f0:	003d08ff 	.word	0x003d08ff
 80043f4:	431bde83 	.word	0x431bde83
 80043f8:	10624dd3 	.word	0x10624dd3

080043fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e25b      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d075      	beq.n	8004506 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800441a:	4ba3      	ldr	r3, [pc, #652]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 030c 	and.w	r3, r3, #12
 8004422:	2b04      	cmp	r3, #4
 8004424:	d00c      	beq.n	8004440 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004426:	4ba0      	ldr	r3, [pc, #640]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800442e:	2b08      	cmp	r3, #8
 8004430:	d112      	bne.n	8004458 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004432:	4b9d      	ldr	r3, [pc, #628]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800443e:	d10b      	bne.n	8004458 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004440:	4b99      	ldr	r3, [pc, #612]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d05b      	beq.n	8004504 <HAL_RCC_OscConfig+0x108>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d157      	bne.n	8004504 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e236      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004460:	d106      	bne.n	8004470 <HAL_RCC_OscConfig+0x74>
 8004462:	4b91      	ldr	r3, [pc, #580]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a90      	ldr	r2, [pc, #576]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	e01d      	b.n	80044ac <HAL_RCC_OscConfig+0xb0>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004478:	d10c      	bne.n	8004494 <HAL_RCC_OscConfig+0x98>
 800447a:	4b8b      	ldr	r3, [pc, #556]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a8a      	ldr	r2, [pc, #552]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	4b88      	ldr	r3, [pc, #544]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a87      	ldr	r2, [pc, #540]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800448c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e00b      	b.n	80044ac <HAL_RCC_OscConfig+0xb0>
 8004494:	4b84      	ldr	r3, [pc, #528]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a83      	ldr	r2, [pc, #524]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800449a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	4b81      	ldr	r3, [pc, #516]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a80      	ldr	r2, [pc, #512]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 80044a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d013      	beq.n	80044dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b4:	f7fe fbfc 	bl	8002cb0 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044bc:	f7fe fbf8 	bl	8002cb0 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b64      	cmp	r3, #100	; 0x64
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e1fb      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ce:	4b76      	ldr	r3, [pc, #472]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0xc0>
 80044da:	e014      	b.n	8004506 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fe fbe8 	bl	8002cb0 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e4:	f7fe fbe4 	bl	8002cb0 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	; 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e1e7      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f6:	4b6c      	ldr	r3, [pc, #432]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0xe8>
 8004502:	e000      	b.n	8004506 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d063      	beq.n	80045da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004512:	4b65      	ldr	r3, [pc, #404]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00b      	beq.n	8004536 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800451e:	4b62      	ldr	r3, [pc, #392]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004526:	2b08      	cmp	r3, #8
 8004528:	d11c      	bne.n	8004564 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800452a:	4b5f      	ldr	r3, [pc, #380]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d116      	bne.n	8004564 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004536:	4b5c      	ldr	r3, [pc, #368]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <HAL_RCC_OscConfig+0x152>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d001      	beq.n	800454e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e1bb      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454e:	4b56      	ldr	r3, [pc, #344]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4952      	ldr	r1, [pc, #328]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800455e:	4313      	orrs	r3, r2
 8004560:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004562:	e03a      	b.n	80045da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d020      	beq.n	80045ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800456c:	4b4f      	ldr	r3, [pc, #316]	; (80046ac <HAL_RCC_OscConfig+0x2b0>)
 800456e:	2201      	movs	r2, #1
 8004570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004572:	f7fe fb9d 	bl	8002cb0 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800457a:	f7fe fb99 	bl	8002cb0 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e19c      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458c:	4b46      	ldr	r3, [pc, #280]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0f0      	beq.n	800457a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004598:	4b43      	ldr	r3, [pc, #268]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	4940      	ldr	r1, [pc, #256]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	600b      	str	r3, [r1, #0]
 80045ac:	e015      	b.n	80045da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ae:	4b3f      	ldr	r3, [pc, #252]	; (80046ac <HAL_RCC_OscConfig+0x2b0>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7fe fb7c 	bl	8002cb0 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045bc:	f7fe fb78 	bl	8002cb0 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e17b      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ce:	4b36      	ldr	r3, [pc, #216]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d030      	beq.n	8004648 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d016      	beq.n	800461c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ee:	4b30      	ldr	r3, [pc, #192]	; (80046b0 <HAL_RCC_OscConfig+0x2b4>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f4:	f7fe fb5c 	bl	8002cb0 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045fc:	f7fe fb58 	bl	8002cb0 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e15b      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800460e:	4b26      	ldr	r3, [pc, #152]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0x200>
 800461a:	e015      	b.n	8004648 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800461c:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <HAL_RCC_OscConfig+0x2b4>)
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004622:	f7fe fb45 	bl	8002cb0 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800462a:	f7fe fb41 	bl	8002cb0 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e144      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800463c:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800463e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1f0      	bne.n	800462a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80a0 	beq.w	8004796 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004656:	2300      	movs	r3, #0
 8004658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465a:	4b13      	ldr	r3, [pc, #76]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10f      	bne.n	8004686 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	4a0e      	ldr	r2, [pc, #56]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004674:	6413      	str	r3, [r2, #64]	; 0x40
 8004676:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004682:	2301      	movs	r3, #1
 8004684:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004686:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <HAL_RCC_OscConfig+0x2b8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d121      	bne.n	80046d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004692:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <HAL_RCC_OscConfig+0x2b8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a07      	ldr	r2, [pc, #28]	; (80046b4 <HAL_RCC_OscConfig+0x2b8>)
 8004698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800469e:	f7fe fb07 	bl	8002cb0 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a4:	e011      	b.n	80046ca <HAL_RCC_OscConfig+0x2ce>
 80046a6:	bf00      	nop
 80046a8:	40023800 	.word	0x40023800
 80046ac:	42470000 	.word	0x42470000
 80046b0:	42470e80 	.word	0x42470e80
 80046b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b8:	f7fe fafa 	bl	8002cb0 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e0fd      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ca:	4b81      	ldr	r3, [pc, #516]	; (80048d0 <HAL_RCC_OscConfig+0x4d4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d106      	bne.n	80046ec <HAL_RCC_OscConfig+0x2f0>
 80046de:	4b7d      	ldr	r3, [pc, #500]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	4a7c      	ldr	r2, [pc, #496]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ea:	e01c      	b.n	8004726 <HAL_RCC_OscConfig+0x32a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b05      	cmp	r3, #5
 80046f2:	d10c      	bne.n	800470e <HAL_RCC_OscConfig+0x312>
 80046f4:	4b77      	ldr	r3, [pc, #476]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f8:	4a76      	ldr	r2, [pc, #472]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 80046fa:	f043 0304 	orr.w	r3, r3, #4
 80046fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004700:	4b74      	ldr	r3, [pc, #464]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	4a73      	ldr	r2, [pc, #460]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 8004706:	f043 0301 	orr.w	r3, r3, #1
 800470a:	6713      	str	r3, [r2, #112]	; 0x70
 800470c:	e00b      	b.n	8004726 <HAL_RCC_OscConfig+0x32a>
 800470e:	4b71      	ldr	r3, [pc, #452]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	4a70      	ldr	r2, [pc, #448]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 8004714:	f023 0301 	bic.w	r3, r3, #1
 8004718:	6713      	str	r3, [r2, #112]	; 0x70
 800471a:	4b6e      	ldr	r3, [pc, #440]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	4a6d      	ldr	r2, [pc, #436]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 8004720:	f023 0304 	bic.w	r3, r3, #4
 8004724:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d015      	beq.n	800475a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472e:	f7fe fabf 	bl	8002cb0 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004734:	e00a      	b.n	800474c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004736:	f7fe fabb 	bl	8002cb0 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f241 3288 	movw	r2, #5000	; 0x1388
 8004744:	4293      	cmp	r3, r2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e0bc      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474c:	4b61      	ldr	r3, [pc, #388]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 800474e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0ee      	beq.n	8004736 <HAL_RCC_OscConfig+0x33a>
 8004758:	e014      	b.n	8004784 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800475a:	f7fe faa9 	bl	8002cb0 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004760:	e00a      	b.n	8004778 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004762:	f7fe faa5 	bl	8002cb0 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004770:	4293      	cmp	r3, r2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e0a6      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004778:	4b56      	ldr	r3, [pc, #344]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 800477a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1ee      	bne.n	8004762 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004784:	7dfb      	ldrb	r3, [r7, #23]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d105      	bne.n	8004796 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800478a:	4b52      	ldr	r3, [pc, #328]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	4a51      	ldr	r2, [pc, #324]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 8004790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004794:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 8092 	beq.w	80048c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047a0:	4b4c      	ldr	r3, [pc, #304]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 030c 	and.w	r3, r3, #12
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d05c      	beq.n	8004866 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d141      	bne.n	8004838 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b4:	4b48      	ldr	r3, [pc, #288]	; (80048d8 <HAL_RCC_OscConfig+0x4dc>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ba:	f7fe fa79 	bl	8002cb0 <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c2:	f7fe fa75 	bl	8002cb0 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e078      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d4:	4b3f      	ldr	r3, [pc, #252]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1f0      	bne.n	80047c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69da      	ldr	r2, [r3, #28]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	019b      	lsls	r3, r3, #6
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	3b01      	subs	r3, #1
 80047fa:	041b      	lsls	r3, r3, #16
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	061b      	lsls	r3, r3, #24
 8004804:	4933      	ldr	r1, [pc, #204]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 8004806:	4313      	orrs	r3, r2
 8004808:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800480a:	4b33      	ldr	r3, [pc, #204]	; (80048d8 <HAL_RCC_OscConfig+0x4dc>)
 800480c:	2201      	movs	r2, #1
 800480e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004810:	f7fe fa4e 	bl	8002cb0 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004818:	f7fe fa4a 	bl	8002cb0 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e04d      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482a:	4b2a      	ldr	r3, [pc, #168]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0x41c>
 8004836:	e045      	b.n	80048c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004838:	4b27      	ldr	r3, [pc, #156]	; (80048d8 <HAL_RCC_OscConfig+0x4dc>)
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483e:	f7fe fa37 	bl	8002cb0 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004846:	f7fe fa33 	bl	8002cb0 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e036      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004858:	4b1e      	ldr	r3, [pc, #120]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1f0      	bne.n	8004846 <HAL_RCC_OscConfig+0x44a>
 8004864:	e02e      	b.n	80048c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e029      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004872:	4b18      	ldr	r3, [pc, #96]	; (80048d4 <HAL_RCC_OscConfig+0x4d8>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	429a      	cmp	r2, r3
 8004884:	d11c      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004890:	429a      	cmp	r2, r3
 8004892:	d115      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800489a:	4013      	ands	r3, r2
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d10d      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d106      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048bc:	429a      	cmp	r2, r3
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e000      	b.n	80048c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40007000 	.word	0x40007000
 80048d4:	40023800 	.word	0x40023800
 80048d8:	42470060 	.word	0x42470060

080048dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0cc      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048f0:	4b68      	ldr	r3, [pc, #416]	; (8004a94 <HAL_RCC_ClockConfig+0x1b8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d90c      	bls.n	8004918 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fe:	4b65      	ldr	r3, [pc, #404]	; (8004a94 <HAL_RCC_ClockConfig+0x1b8>)
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004906:	4b63      	ldr	r3, [pc, #396]	; (8004a94 <HAL_RCC_ClockConfig+0x1b8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d001      	beq.n	8004918 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e0b8      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d020      	beq.n	8004966 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d005      	beq.n	800493c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004930:	4b59      	ldr	r3, [pc, #356]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4a58      	ldr	r2, [pc, #352]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004936:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800493a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004948:	4b53      	ldr	r3, [pc, #332]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	4a52      	ldr	r2, [pc, #328]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004952:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004954:	4b50      	ldr	r3, [pc, #320]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	494d      	ldr	r1, [pc, #308]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	4313      	orrs	r3, r2
 8004964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d044      	beq.n	80049fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d107      	bne.n	800498a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497a:	4b47      	ldr	r3, [pc, #284]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d119      	bne.n	80049ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e07f      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d003      	beq.n	800499a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004996:	2b03      	cmp	r3, #3
 8004998:	d107      	bne.n	80049aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499a:	4b3f      	ldr	r3, [pc, #252]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e06f      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049aa:	4b3b      	ldr	r3, [pc, #236]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e067      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ba:	4b37      	ldr	r3, [pc, #220]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f023 0203 	bic.w	r2, r3, #3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	4934      	ldr	r1, [pc, #208]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049cc:	f7fe f970 	bl	8002cb0 <HAL_GetTick>
 80049d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d2:	e00a      	b.n	80049ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d4:	f7fe f96c 	bl	8002cb0 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e04f      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ea:	4b2b      	ldr	r3, [pc, #172]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 020c 	and.w	r2, r3, #12
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d1eb      	bne.n	80049d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049fc:	4b25      	ldr	r3, [pc, #148]	; (8004a94 <HAL_RCC_ClockConfig+0x1b8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d20c      	bcs.n	8004a24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0a:	4b22      	ldr	r3, [pc, #136]	; (8004a94 <HAL_RCC_ClockConfig+0x1b8>)
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a12:	4b20      	ldr	r3, [pc, #128]	; (8004a94 <HAL_RCC_ClockConfig+0x1b8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e032      	b.n	8004a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a30:	4b19      	ldr	r3, [pc, #100]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	4916      	ldr	r1, [pc, #88]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a4e:	4b12      	ldr	r3, [pc, #72]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	490e      	ldr	r1, [pc, #56]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a62:	f000 f821 	bl	8004aa8 <HAL_RCC_GetSysClockFreq>
 8004a66:	4601      	mov	r1, r0
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	091b      	lsrs	r3, r3, #4
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <HAL_RCC_ClockConfig+0x1c0>)
 8004a74:	5cd3      	ldrb	r3, [r2, r3]
 8004a76:	fa21 f303 	lsr.w	r3, r1, r3
 8004a7a:	4a09      	ldr	r2, [pc, #36]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a7e:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fe f8d0 	bl	8002c28 <HAL_InitTick>

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	40023c00 	.word	0x40023c00
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	08006270 	.word	0x08006270
 8004aa0:	20000000 	.word	0x20000000
 8004aa4:	20000004 	.word	0x20000004

08004aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	607b      	str	r3, [r7, #4]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004abe:	4b50      	ldr	r3, [pc, #320]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 030c 	and.w	r3, r3, #12
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d007      	beq.n	8004ada <HAL_RCC_GetSysClockFreq+0x32>
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d008      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x38>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f040 808d 	bne.w	8004bee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ad4:	4b4b      	ldr	r3, [pc, #300]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004ad6:	60bb      	str	r3, [r7, #8]
       break;
 8004ad8:	e08c      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ada:	4b4b      	ldr	r3, [pc, #300]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x160>)
 8004adc:	60bb      	str	r3, [r7, #8]
      break;
 8004ade:	e089      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ae0:	4b47      	ldr	r3, [pc, #284]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ae8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aea:	4b45      	ldr	r3, [pc, #276]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x158>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d023      	beq.n	8004b3e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004af6:	4b42      	ldr	r3, [pc, #264]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x158>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	099b      	lsrs	r3, r3, #6
 8004afc:	f04f 0400 	mov.w	r4, #0
 8004b00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	ea03 0501 	and.w	r5, r3, r1
 8004b0c:	ea04 0602 	and.w	r6, r4, r2
 8004b10:	4a3d      	ldr	r2, [pc, #244]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b12:	fb02 f106 	mul.w	r1, r2, r6
 8004b16:	2200      	movs	r2, #0
 8004b18:	fb02 f205 	mul.w	r2, r2, r5
 8004b1c:	440a      	add	r2, r1
 8004b1e:	493a      	ldr	r1, [pc, #232]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b20:	fba5 0101 	umull	r0, r1, r5, r1
 8004b24:	1853      	adds	r3, r2, r1
 8004b26:	4619      	mov	r1, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f04f 0400 	mov.w	r4, #0
 8004b2e:	461a      	mov	r2, r3
 8004b30:	4623      	mov	r3, r4
 8004b32:	f7fb ff3f 	bl	80009b4 <__aeabi_uldivmod>
 8004b36:	4603      	mov	r3, r0
 8004b38:	460c      	mov	r4, r1
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	e049      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b3e:	4b30      	ldr	r3, [pc, #192]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	099b      	lsrs	r3, r3, #6
 8004b44:	f04f 0400 	mov.w	r4, #0
 8004b48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	ea03 0501 	and.w	r5, r3, r1
 8004b54:	ea04 0602 	and.w	r6, r4, r2
 8004b58:	4629      	mov	r1, r5
 8004b5a:	4632      	mov	r2, r6
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	f04f 0400 	mov.w	r4, #0
 8004b64:	0154      	lsls	r4, r2, #5
 8004b66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b6a:	014b      	lsls	r3, r1, #5
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4622      	mov	r2, r4
 8004b70:	1b49      	subs	r1, r1, r5
 8004b72:	eb62 0206 	sbc.w	r2, r2, r6
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	f04f 0400 	mov.w	r4, #0
 8004b7e:	0194      	lsls	r4, r2, #6
 8004b80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b84:	018b      	lsls	r3, r1, #6
 8004b86:	1a5b      	subs	r3, r3, r1
 8004b88:	eb64 0402 	sbc.w	r4, r4, r2
 8004b8c:	f04f 0100 	mov.w	r1, #0
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	00e2      	lsls	r2, r4, #3
 8004b96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b9a:	00d9      	lsls	r1, r3, #3
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4614      	mov	r4, r2
 8004ba0:	195b      	adds	r3, r3, r5
 8004ba2:	eb44 0406 	adc.w	r4, r4, r6
 8004ba6:	f04f 0100 	mov.w	r1, #0
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	02a2      	lsls	r2, r4, #10
 8004bb0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004bb4:	0299      	lsls	r1, r3, #10
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4614      	mov	r4, r2
 8004bba:	4618      	mov	r0, r3
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f04f 0400 	mov.w	r4, #0
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4623      	mov	r3, r4
 8004bc8:	f7fb fef4 	bl	80009b4 <__aeabi_uldivmod>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	460c      	mov	r4, r1
 8004bd0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x158>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	0c1b      	lsrs	r3, r3, #16
 8004bd8:	f003 0303 	and.w	r3, r3, #3
 8004bdc:	3301      	adds	r3, #1
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bea:	60bb      	str	r3, [r7, #8]
      break;
 8004bec:	e002      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bee:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004bf0:	60bb      	str	r3, [r7, #8]
      break;
 8004bf2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40023800 	.word	0x40023800
 8004c04:	00f42400 	.word	0x00f42400
 8004c08:	00b71b00 	.word	0x00b71b00

08004c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c10:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c12:	681b      	ldr	r3, [r3, #0]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000000 	.word	0x20000000

08004c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c28:	f7ff fff0 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c2c:	4601      	mov	r1, r0
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	0a9b      	lsrs	r3, r3, #10
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	4a03      	ldr	r2, [pc, #12]	; (8004c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c3a:	5cd3      	ldrb	r3, [r2, r3]
 8004c3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40023800 	.word	0x40023800
 8004c48:	08006280 	.word	0x08006280

08004c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c50:	f7ff ffdc 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c54:	4601      	mov	r1, r0
 8004c56:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	0b5b      	lsrs	r3, r3, #13
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	4a03      	ldr	r2, [pc, #12]	; (8004c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c62:	5cd3      	ldrb	r3, [r2, r3]
 8004c64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	08006280 	.word	0x08006280

08004c74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e056      	b.n	8004d34 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d106      	bne.n	8004ca6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7fd fccf 	bl	8002644 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cbc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	ea42 0103 	orr.w	r1, r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	0c1b      	lsrs	r3, r3, #16
 8004d04:	f003 0104 	and.w	r1, r3, #4
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	69da      	ldr	r2, [r3, #28]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e01d      	b.n	8004d8a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fd fd7e 	bl	8002864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3304      	adds	r3, #4
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	f000 fb1e 	bl	80053bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b085      	sub	sp, #20
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0201 	orr.w	r2, r2, #1
 8004da8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b06      	cmp	r3, #6
 8004dba:	d007      	beq.n	8004dcc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0201 	orr.w	r2, r2, #1
 8004dca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e01d      	b.n	8004e28 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d106      	bne.n	8004e06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7fd fc67 	bl	80026d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3304      	adds	r3, #4
 8004e16:	4619      	mov	r1, r3
 8004e18:	4610      	mov	r0, r2
 8004e1a:	f000 facf 	bl	80053bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	6839      	ldr	r1, [r7, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fd0a 	bl	800585c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a15      	ldr	r2, [pc, #84]	; (8004ea4 <HAL_TIM_PWM_Start+0x74>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d004      	beq.n	8004e5c <HAL_TIM_PWM_Start+0x2c>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a14      	ldr	r2, [pc, #80]	; (8004ea8 <HAL_TIM_PWM_Start+0x78>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d101      	bne.n	8004e60 <HAL_TIM_PWM_Start+0x30>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e000      	b.n	8004e62 <HAL_TIM_PWM_Start+0x32>
 8004e60:	2300      	movs	r3, #0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d007      	beq.n	8004e76 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b06      	cmp	r3, #6
 8004e86:	d007      	beq.n	8004e98 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0201 	orr.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40010000 	.word	0x40010000
 8004ea8:	40010400 	.word	0x40010400

08004eac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e083      	b.n	8004fc8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d106      	bne.n	8004eda <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7fd fc49 	bl	800276c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2202      	movs	r2, #2
 8004ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ef0:	f023 0307 	bic.w	r3, r3, #7
 8004ef4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3304      	adds	r3, #4
 8004efe:	4619      	mov	r1, r3
 8004f00:	4610      	mov	r0, r2
 8004f02:	f000 fa5b 	bl	80053bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f2e:	f023 0303 	bic.w	r3, r3, #3
 8004f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004f4c:	f023 030c 	bic.w	r3, r3, #12
 8004f50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	021b      	lsls	r3, r3, #8
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	011a      	lsls	r2, r3, #4
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	031b      	lsls	r3, r3, #12
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004f8a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004f92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d122      	bne.n	800502c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d11b      	bne.n	800502c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0202 	mvn.w	r2, #2
 8004ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f9b4 	bl	8005380 <HAL_TIM_IC_CaptureCallback>
 8005018:	e005      	b.n	8005026 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f9a6 	bl	800536c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f9b7 	bl	8005394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b04      	cmp	r3, #4
 8005038:	d122      	bne.n	8005080 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b04      	cmp	r3, #4
 8005046:	d11b      	bne.n	8005080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0204 	mvn.w	r2, #4
 8005050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2202      	movs	r2, #2
 8005056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f98a 	bl	8005380 <HAL_TIM_IC_CaptureCallback>
 800506c:	e005      	b.n	800507a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f97c 	bl	800536c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f98d 	bl	8005394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b08      	cmp	r3, #8
 800508c:	d122      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f003 0308 	and.w	r3, r3, #8
 8005098:	2b08      	cmp	r3, #8
 800509a:	d11b      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f06f 0208 	mvn.w	r2, #8
 80050a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2204      	movs	r2, #4
 80050aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f960 	bl	8005380 <HAL_TIM_IC_CaptureCallback>
 80050c0:	e005      	b.n	80050ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f952 	bl	800536c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f963 	bl	8005394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	2b10      	cmp	r3, #16
 80050e0:	d122      	bne.n	8005128 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f003 0310 	and.w	r3, r3, #16
 80050ec:	2b10      	cmp	r3, #16
 80050ee:	d11b      	bne.n	8005128 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0210 	mvn.w	r2, #16
 80050f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2208      	movs	r2, #8
 80050fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f936 	bl	8005380 <HAL_TIM_IC_CaptureCallback>
 8005114:	e005      	b.n	8005122 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f928 	bl	800536c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f939 	bl	8005394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b01      	cmp	r3, #1
 8005134:	d10e      	bne.n	8005154 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b01      	cmp	r3, #1
 8005142:	d107      	bne.n	8005154 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0201 	mvn.w	r2, #1
 800514c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fc fb22 	bl	8001798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515e:	2b80      	cmp	r3, #128	; 0x80
 8005160:	d10e      	bne.n	8005180 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516c:	2b80      	cmp	r3, #128	; 0x80
 800516e:	d107      	bne.n	8005180 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fc6c 	bl	8005a58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518a:	2b40      	cmp	r3, #64	; 0x40
 800518c:	d10e      	bne.n	80051ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005198:	2b40      	cmp	r3, #64	; 0x40
 800519a:	d107      	bne.n	80051ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f8fe 	bl	80053a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b20      	cmp	r3, #32
 80051b8:	d10e      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d107      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0220 	mvn.w	r2, #32
 80051d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fc36 	bl	8005a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051d8:	bf00      	nop
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e0b4      	b.n	8005364 <HAL_TIM_PWM_ConfigChannel+0x184>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2202      	movs	r2, #2
 8005206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b0c      	cmp	r3, #12
 800520e:	f200 809f 	bhi.w	8005350 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005212:	a201      	add	r2, pc, #4	; (adr r2, 8005218 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005218:	0800524d 	.word	0x0800524d
 800521c:	08005351 	.word	0x08005351
 8005220:	08005351 	.word	0x08005351
 8005224:	08005351 	.word	0x08005351
 8005228:	0800528d 	.word	0x0800528d
 800522c:	08005351 	.word	0x08005351
 8005230:	08005351 	.word	0x08005351
 8005234:	08005351 	.word	0x08005351
 8005238:	080052cf 	.word	0x080052cf
 800523c:	08005351 	.word	0x08005351
 8005240:	08005351 	.word	0x08005351
 8005244:	08005351 	.word	0x08005351
 8005248:	0800530f 	.word	0x0800530f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	4618      	mov	r0, r3
 8005254:	f000 f952 	bl	80054fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699a      	ldr	r2, [r3, #24]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0208 	orr.w	r2, r2, #8
 8005266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699a      	ldr	r2, [r3, #24]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0204 	bic.w	r2, r2, #4
 8005276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6999      	ldr	r1, [r3, #24]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	619a      	str	r2, [r3, #24]
      break;
 800528a:	e062      	b.n	8005352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68b9      	ldr	r1, [r7, #8]
 8005292:	4618      	mov	r0, r3
 8005294:	f000 f9a2 	bl	80055dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699a      	ldr	r2, [r3, #24]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699a      	ldr	r2, [r3, #24]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6999      	ldr	r1, [r3, #24]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	021a      	lsls	r2, r3, #8
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	619a      	str	r2, [r3, #24]
      break;
 80052cc:	e041      	b.n	8005352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 f9f7 	bl	80056c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69da      	ldr	r2, [r3, #28]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0208 	orr.w	r2, r2, #8
 80052e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69da      	ldr	r2, [r3, #28]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0204 	bic.w	r2, r2, #4
 80052f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69d9      	ldr	r1, [r3, #28]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	691a      	ldr	r2, [r3, #16]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	61da      	str	r2, [r3, #28]
      break;
 800530c:	e021      	b.n	8005352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	4618      	mov	r0, r3
 8005316:	f000 fa4b 	bl	80057b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69da      	ldr	r2, [r3, #28]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69da      	ldr	r2, [r3, #28]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69d9      	ldr	r1, [r3, #28]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	021a      	lsls	r2, r3, #8
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	61da      	str	r2, [r3, #28]
      break;
 800534e:	e000      	b.n	8005352 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005350:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a40      	ldr	r2, [pc, #256]	; (80054d0 <TIM_Base_SetConfig+0x114>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d013      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053da:	d00f      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a3d      	ldr	r2, [pc, #244]	; (80054d4 <TIM_Base_SetConfig+0x118>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00b      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a3c      	ldr	r2, [pc, #240]	; (80054d8 <TIM_Base_SetConfig+0x11c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d007      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a3b      	ldr	r2, [pc, #236]	; (80054dc <TIM_Base_SetConfig+0x120>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d003      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a3a      	ldr	r2, [pc, #232]	; (80054e0 <TIM_Base_SetConfig+0x124>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d108      	bne.n	800540e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a2f      	ldr	r2, [pc, #188]	; (80054d0 <TIM_Base_SetConfig+0x114>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d02b      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541c:	d027      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a2c      	ldr	r2, [pc, #176]	; (80054d4 <TIM_Base_SetConfig+0x118>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d023      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a2b      	ldr	r2, [pc, #172]	; (80054d8 <TIM_Base_SetConfig+0x11c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d01f      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a2a      	ldr	r2, [pc, #168]	; (80054dc <TIM_Base_SetConfig+0x120>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01b      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a29      	ldr	r2, [pc, #164]	; (80054e0 <TIM_Base_SetConfig+0x124>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d017      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a28      	ldr	r2, [pc, #160]	; (80054e4 <TIM_Base_SetConfig+0x128>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d013      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a27      	ldr	r2, [pc, #156]	; (80054e8 <TIM_Base_SetConfig+0x12c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00f      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a26      	ldr	r2, [pc, #152]	; (80054ec <TIM_Base_SetConfig+0x130>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00b      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a25      	ldr	r2, [pc, #148]	; (80054f0 <TIM_Base_SetConfig+0x134>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d007      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a24      	ldr	r2, [pc, #144]	; (80054f4 <TIM_Base_SetConfig+0x138>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d003      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a23      	ldr	r2, [pc, #140]	; (80054f8 <TIM_Base_SetConfig+0x13c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d108      	bne.n	8005480 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a0a      	ldr	r2, [pc, #40]	; (80054d0 <TIM_Base_SetConfig+0x114>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_Base_SetConfig+0xf8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a0c      	ldr	r2, [pc, #48]	; (80054e0 <TIM_Base_SetConfig+0x124>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d103      	bne.n	80054bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	615a      	str	r2, [r3, #20]
}
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40000400 	.word	0x40000400
 80054d8:	40000800 	.word	0x40000800
 80054dc:	40000c00 	.word	0x40000c00
 80054e0:	40010400 	.word	0x40010400
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40014400 	.word	0x40014400
 80054ec:	40014800 	.word	0x40014800
 80054f0:	40001800 	.word	0x40001800
 80054f4:	40001c00 	.word	0x40001c00
 80054f8:	40002000 	.word	0x40002000

080054fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f023 0201 	bic.w	r2, r3, #1
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0303 	bic.w	r3, r3, #3
 8005532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f023 0302 	bic.w	r3, r3, #2
 8005544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a20      	ldr	r2, [pc, #128]	; (80055d4 <TIM_OC1_SetConfig+0xd8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d003      	beq.n	8005560 <TIM_OC1_SetConfig+0x64>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a1f      	ldr	r2, [pc, #124]	; (80055d8 <TIM_OC1_SetConfig+0xdc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d10c      	bne.n	800557a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f023 0308 	bic.w	r3, r3, #8
 8005566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f023 0304 	bic.w	r3, r3, #4
 8005578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a15      	ldr	r2, [pc, #84]	; (80055d4 <TIM_OC1_SetConfig+0xd8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d003      	beq.n	800558a <TIM_OC1_SetConfig+0x8e>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a14      	ldr	r2, [pc, #80]	; (80055d8 <TIM_OC1_SetConfig+0xdc>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d111      	bne.n	80055ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	621a      	str	r2, [r3, #32]
}
 80055c8:	bf00      	nop
 80055ca:	371c      	adds	r7, #28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	40010000 	.word	0x40010000
 80055d8:	40010400 	.word	0x40010400

080055dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f023 0210 	bic.w	r2, r3, #16
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	021b      	lsls	r3, r3, #8
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4313      	orrs	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f023 0320 	bic.w	r3, r3, #32
 8005626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a22      	ldr	r2, [pc, #136]	; (80056c0 <TIM_OC2_SetConfig+0xe4>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d003      	beq.n	8005644 <TIM_OC2_SetConfig+0x68>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a21      	ldr	r2, [pc, #132]	; (80056c4 <TIM_OC2_SetConfig+0xe8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d10d      	bne.n	8005660 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800564a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800565e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a17      	ldr	r2, [pc, #92]	; (80056c0 <TIM_OC2_SetConfig+0xe4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_OC2_SetConfig+0x94>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a16      	ldr	r2, [pc, #88]	; (80056c4 <TIM_OC2_SetConfig+0xe8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d113      	bne.n	8005698 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005676:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800567e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	621a      	str	r2, [r3, #32]
}
 80056b2:	bf00      	nop
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40010000 	.word	0x40010000
 80056c4:	40010400 	.word	0x40010400

080056c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0303 	bic.w	r3, r3, #3
 80056fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	021b      	lsls	r3, r3, #8
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a21      	ldr	r2, [pc, #132]	; (80057a8 <TIM_OC3_SetConfig+0xe0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_OC3_SetConfig+0x66>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a20      	ldr	r2, [pc, #128]	; (80057ac <TIM_OC3_SetConfig+0xe4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d10d      	bne.n	800574a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a16      	ldr	r2, [pc, #88]	; (80057a8 <TIM_OC3_SetConfig+0xe0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d003      	beq.n	800575a <TIM_OC3_SetConfig+0x92>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a15      	ldr	r2, [pc, #84]	; (80057ac <TIM_OC3_SetConfig+0xe4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d113      	bne.n	8005782 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4313      	orrs	r3, r2
 8005774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	011b      	lsls	r3, r3, #4
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	621a      	str	r2, [r3, #32]
}
 800579c:	bf00      	nop
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	40010000 	.word	0x40010000
 80057ac:	40010400 	.word	0x40010400

080057b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	031b      	lsls	r3, r3, #12
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a12      	ldr	r2, [pc, #72]	; (8005854 <TIM_OC4_SetConfig+0xa4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_OC4_SetConfig+0x68>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a11      	ldr	r2, [pc, #68]	; (8005858 <TIM_OC4_SetConfig+0xa8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d109      	bne.n	800582c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800581e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	019b      	lsls	r3, r3, #6
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	621a      	str	r2, [r3, #32]
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40010000 	.word	0x40010000
 8005858:	40010400 	.word	0x40010400

0800585c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f003 031f 	and.w	r3, r3, #31
 800586e:	2201      	movs	r2, #1
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a1a      	ldr	r2, [r3, #32]
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	43db      	mvns	r3, r3
 800587e:	401a      	ands	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a1a      	ldr	r2, [r3, #32]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f003 031f 	and.w	r3, r3, #31
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	fa01 f303 	lsl.w	r3, r1, r3
 8005894:	431a      	orrs	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	621a      	str	r2, [r3, #32]
}
 800589a:	bf00      	nop
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
	...

080058a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058bc:	2302      	movs	r3, #2
 80058be:	e05a      	b.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a21      	ldr	r2, [pc, #132]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d022      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590c:	d01d      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a1d      	ldr	r2, [pc, #116]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d018      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a1b      	ldr	r2, [pc, #108]	; (800598c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d013      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a1a      	ldr	r2, [pc, #104]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00e      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a18      	ldr	r2, [pc, #96]	; (8005994 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d009      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a17      	ldr	r2, [pc, #92]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d004      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a15      	ldr	r2, [pc, #84]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d10c      	bne.n	8005964 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005950:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	4313      	orrs	r3, r2
 800595a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40010000 	.word	0x40010000
 8005988:	40000400 	.word	0x40000400
 800598c:	40000800 	.word	0x40000800
 8005990:	40000c00 	.word	0x40000c00
 8005994:	40010400 	.word	0x40010400
 8005998:	40014000 	.word	0x40014000
 800599c:	40001800 	.word	0x40001800

080059a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e03d      	b.n	8005a38 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e03f      	b.n	8005afe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d106      	bne.n	8005a98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fc ffd6 	bl	8002a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2224      	movs	r2, #36	; 0x24
 8005a9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f829 	bl	8005b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ac4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	695a      	ldr	r2, [r3, #20]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ad4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ae4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b4a:	f023 030c 	bic.w	r3, r3, #12
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6812      	ldr	r2, [r2, #0]
 8005b52:	68f9      	ldr	r1, [r7, #12]
 8005b54:	430b      	orrs	r3, r1
 8005b56:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699a      	ldr	r2, [r3, #24]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b76:	f040 818b 	bne.w	8005e90 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4ac1      	ldr	r2, [pc, #772]	; (8005e84 <UART_SetConfig+0x37c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d005      	beq.n	8005b90 <UART_SetConfig+0x88>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4abf      	ldr	r2, [pc, #764]	; (8005e88 <UART_SetConfig+0x380>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	f040 80bd 	bne.w	8005d0a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b90:	f7ff f85c 	bl	8004c4c <HAL_RCC_GetPCLK2Freq>
 8005b94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	461d      	mov	r5, r3
 8005b9a:	f04f 0600 	mov.w	r6, #0
 8005b9e:	46a8      	mov	r8, r5
 8005ba0:	46b1      	mov	r9, r6
 8005ba2:	eb18 0308 	adds.w	r3, r8, r8
 8005ba6:	eb49 0409 	adc.w	r4, r9, r9
 8005baa:	4698      	mov	r8, r3
 8005bac:	46a1      	mov	r9, r4
 8005bae:	eb18 0805 	adds.w	r8, r8, r5
 8005bb2:	eb49 0906 	adc.w	r9, r9, r6
 8005bb6:	f04f 0100 	mov.w	r1, #0
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005bc2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005bc6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005bca:	4688      	mov	r8, r1
 8005bcc:	4691      	mov	r9, r2
 8005bce:	eb18 0005 	adds.w	r0, r8, r5
 8005bd2:	eb49 0106 	adc.w	r1, r9, r6
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	461d      	mov	r5, r3
 8005bdc:	f04f 0600 	mov.w	r6, #0
 8005be0:	196b      	adds	r3, r5, r5
 8005be2:	eb46 0406 	adc.w	r4, r6, r6
 8005be6:	461a      	mov	r2, r3
 8005be8:	4623      	mov	r3, r4
 8005bea:	f7fa fee3 	bl	80009b4 <__aeabi_uldivmod>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	4ba5      	ldr	r3, [pc, #660]	; (8005e8c <UART_SetConfig+0x384>)
 8005bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bfa:	095b      	lsrs	r3, r3, #5
 8005bfc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	461d      	mov	r5, r3
 8005c04:	f04f 0600 	mov.w	r6, #0
 8005c08:	46a9      	mov	r9, r5
 8005c0a:	46b2      	mov	sl, r6
 8005c0c:	eb19 0309 	adds.w	r3, r9, r9
 8005c10:	eb4a 040a 	adc.w	r4, sl, sl
 8005c14:	4699      	mov	r9, r3
 8005c16:	46a2      	mov	sl, r4
 8005c18:	eb19 0905 	adds.w	r9, r9, r5
 8005c1c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c20:	f04f 0100 	mov.w	r1, #0
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c34:	4689      	mov	r9, r1
 8005c36:	4692      	mov	sl, r2
 8005c38:	eb19 0005 	adds.w	r0, r9, r5
 8005c3c:	eb4a 0106 	adc.w	r1, sl, r6
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	461d      	mov	r5, r3
 8005c46:	f04f 0600 	mov.w	r6, #0
 8005c4a:	196b      	adds	r3, r5, r5
 8005c4c:	eb46 0406 	adc.w	r4, r6, r6
 8005c50:	461a      	mov	r2, r3
 8005c52:	4623      	mov	r3, r4
 8005c54:	f7fa feae 	bl	80009b4 <__aeabi_uldivmod>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4b8b      	ldr	r3, [pc, #556]	; (8005e8c <UART_SetConfig+0x384>)
 8005c60:	fba3 1302 	umull	r1, r3, r3, r2
 8005c64:	095b      	lsrs	r3, r3, #5
 8005c66:	2164      	movs	r1, #100	; 0x64
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	3332      	adds	r3, #50	; 0x32
 8005c72:	4a86      	ldr	r2, [pc, #536]	; (8005e8c <UART_SetConfig+0x384>)
 8005c74:	fba2 2303 	umull	r2, r3, r2, r3
 8005c78:	095b      	lsrs	r3, r3, #5
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c80:	4498      	add	r8, r3
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	461d      	mov	r5, r3
 8005c86:	f04f 0600 	mov.w	r6, #0
 8005c8a:	46a9      	mov	r9, r5
 8005c8c:	46b2      	mov	sl, r6
 8005c8e:	eb19 0309 	adds.w	r3, r9, r9
 8005c92:	eb4a 040a 	adc.w	r4, sl, sl
 8005c96:	4699      	mov	r9, r3
 8005c98:	46a2      	mov	sl, r4
 8005c9a:	eb19 0905 	adds.w	r9, r9, r5
 8005c9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ca2:	f04f 0100 	mov.w	r1, #0
 8005ca6:	f04f 0200 	mov.w	r2, #0
 8005caa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cb6:	4689      	mov	r9, r1
 8005cb8:	4692      	mov	sl, r2
 8005cba:	eb19 0005 	adds.w	r0, r9, r5
 8005cbe:	eb4a 0106 	adc.w	r1, sl, r6
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	461d      	mov	r5, r3
 8005cc8:	f04f 0600 	mov.w	r6, #0
 8005ccc:	196b      	adds	r3, r5, r5
 8005cce:	eb46 0406 	adc.w	r4, r6, r6
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	4623      	mov	r3, r4
 8005cd6:	f7fa fe6d 	bl	80009b4 <__aeabi_uldivmod>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	460c      	mov	r4, r1
 8005cde:	461a      	mov	r2, r3
 8005ce0:	4b6a      	ldr	r3, [pc, #424]	; (8005e8c <UART_SetConfig+0x384>)
 8005ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	2164      	movs	r1, #100	; 0x64
 8005cea:	fb01 f303 	mul.w	r3, r1, r3
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	3332      	adds	r3, #50	; 0x32
 8005cf4:	4a65      	ldr	r2, [pc, #404]	; (8005e8c <UART_SetConfig+0x384>)
 8005cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfa:	095b      	lsrs	r3, r3, #5
 8005cfc:	f003 0207 	and.w	r2, r3, #7
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4442      	add	r2, r8
 8005d06:	609a      	str	r2, [r3, #8]
 8005d08:	e26f      	b.n	80061ea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d0a:	f7fe ff8b 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8005d0e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	461d      	mov	r5, r3
 8005d14:	f04f 0600 	mov.w	r6, #0
 8005d18:	46a8      	mov	r8, r5
 8005d1a:	46b1      	mov	r9, r6
 8005d1c:	eb18 0308 	adds.w	r3, r8, r8
 8005d20:	eb49 0409 	adc.w	r4, r9, r9
 8005d24:	4698      	mov	r8, r3
 8005d26:	46a1      	mov	r9, r4
 8005d28:	eb18 0805 	adds.w	r8, r8, r5
 8005d2c:	eb49 0906 	adc.w	r9, r9, r6
 8005d30:	f04f 0100 	mov.w	r1, #0
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d3c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d40:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d44:	4688      	mov	r8, r1
 8005d46:	4691      	mov	r9, r2
 8005d48:	eb18 0005 	adds.w	r0, r8, r5
 8005d4c:	eb49 0106 	adc.w	r1, r9, r6
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	461d      	mov	r5, r3
 8005d56:	f04f 0600 	mov.w	r6, #0
 8005d5a:	196b      	adds	r3, r5, r5
 8005d5c:	eb46 0406 	adc.w	r4, r6, r6
 8005d60:	461a      	mov	r2, r3
 8005d62:	4623      	mov	r3, r4
 8005d64:	f7fa fe26 	bl	80009b4 <__aeabi_uldivmod>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	4b47      	ldr	r3, [pc, #284]	; (8005e8c <UART_SetConfig+0x384>)
 8005d70:	fba3 2302 	umull	r2, r3, r3, r2
 8005d74:	095b      	lsrs	r3, r3, #5
 8005d76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	461d      	mov	r5, r3
 8005d7e:	f04f 0600 	mov.w	r6, #0
 8005d82:	46a9      	mov	r9, r5
 8005d84:	46b2      	mov	sl, r6
 8005d86:	eb19 0309 	adds.w	r3, r9, r9
 8005d8a:	eb4a 040a 	adc.w	r4, sl, sl
 8005d8e:	4699      	mov	r9, r3
 8005d90:	46a2      	mov	sl, r4
 8005d92:	eb19 0905 	adds.w	r9, r9, r5
 8005d96:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d9a:	f04f 0100 	mov.w	r1, #0
 8005d9e:	f04f 0200 	mov.w	r2, #0
 8005da2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005da6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005daa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dae:	4689      	mov	r9, r1
 8005db0:	4692      	mov	sl, r2
 8005db2:	eb19 0005 	adds.w	r0, r9, r5
 8005db6:	eb4a 0106 	adc.w	r1, sl, r6
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	461d      	mov	r5, r3
 8005dc0:	f04f 0600 	mov.w	r6, #0
 8005dc4:	196b      	adds	r3, r5, r5
 8005dc6:	eb46 0406 	adc.w	r4, r6, r6
 8005dca:	461a      	mov	r2, r3
 8005dcc:	4623      	mov	r3, r4
 8005dce:	f7fa fdf1 	bl	80009b4 <__aeabi_uldivmod>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	4b2c      	ldr	r3, [pc, #176]	; (8005e8c <UART_SetConfig+0x384>)
 8005dda:	fba3 1302 	umull	r1, r3, r3, r2
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	2164      	movs	r1, #100	; 0x64
 8005de2:	fb01 f303 	mul.w	r3, r1, r3
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	3332      	adds	r3, #50	; 0x32
 8005dec:	4a27      	ldr	r2, [pc, #156]	; (8005e8c <UART_SetConfig+0x384>)
 8005dee:	fba2 2303 	umull	r2, r3, r2, r3
 8005df2:	095b      	lsrs	r3, r3, #5
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005dfa:	4498      	add	r8, r3
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	461d      	mov	r5, r3
 8005e00:	f04f 0600 	mov.w	r6, #0
 8005e04:	46a9      	mov	r9, r5
 8005e06:	46b2      	mov	sl, r6
 8005e08:	eb19 0309 	adds.w	r3, r9, r9
 8005e0c:	eb4a 040a 	adc.w	r4, sl, sl
 8005e10:	4699      	mov	r9, r3
 8005e12:	46a2      	mov	sl, r4
 8005e14:	eb19 0905 	adds.w	r9, r9, r5
 8005e18:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e1c:	f04f 0100 	mov.w	r1, #0
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e30:	4689      	mov	r9, r1
 8005e32:	4692      	mov	sl, r2
 8005e34:	eb19 0005 	adds.w	r0, r9, r5
 8005e38:	eb4a 0106 	adc.w	r1, sl, r6
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	461d      	mov	r5, r3
 8005e42:	f04f 0600 	mov.w	r6, #0
 8005e46:	196b      	adds	r3, r5, r5
 8005e48:	eb46 0406 	adc.w	r4, r6, r6
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	4623      	mov	r3, r4
 8005e50:	f7fa fdb0 	bl	80009b4 <__aeabi_uldivmod>
 8005e54:	4603      	mov	r3, r0
 8005e56:	460c      	mov	r4, r1
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4b0c      	ldr	r3, [pc, #48]	; (8005e8c <UART_SetConfig+0x384>)
 8005e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e60:	095b      	lsrs	r3, r3, #5
 8005e62:	2164      	movs	r1, #100	; 0x64
 8005e64:	fb01 f303 	mul.w	r3, r1, r3
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	3332      	adds	r3, #50	; 0x32
 8005e6e:	4a07      	ldr	r2, [pc, #28]	; (8005e8c <UART_SetConfig+0x384>)
 8005e70:	fba2 2303 	umull	r2, r3, r2, r3
 8005e74:	095b      	lsrs	r3, r3, #5
 8005e76:	f003 0207 	and.w	r2, r3, #7
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4442      	add	r2, r8
 8005e80:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005e82:	e1b2      	b.n	80061ea <UART_SetConfig+0x6e2>
 8005e84:	40011000 	.word	0x40011000
 8005e88:	40011400 	.word	0x40011400
 8005e8c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4ad7      	ldr	r2, [pc, #860]	; (80061f4 <UART_SetConfig+0x6ec>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d005      	beq.n	8005ea6 <UART_SetConfig+0x39e>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4ad6      	ldr	r2, [pc, #856]	; (80061f8 <UART_SetConfig+0x6f0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	f040 80d1 	bne.w	8006048 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ea6:	f7fe fed1 	bl	8004c4c <HAL_RCC_GetPCLK2Freq>
 8005eaa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	469a      	mov	sl, r3
 8005eb0:	f04f 0b00 	mov.w	fp, #0
 8005eb4:	46d0      	mov	r8, sl
 8005eb6:	46d9      	mov	r9, fp
 8005eb8:	eb18 0308 	adds.w	r3, r8, r8
 8005ebc:	eb49 0409 	adc.w	r4, r9, r9
 8005ec0:	4698      	mov	r8, r3
 8005ec2:	46a1      	mov	r9, r4
 8005ec4:	eb18 080a 	adds.w	r8, r8, sl
 8005ec8:	eb49 090b 	adc.w	r9, r9, fp
 8005ecc:	f04f 0100 	mov.w	r1, #0
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ed8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005edc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ee0:	4688      	mov	r8, r1
 8005ee2:	4691      	mov	r9, r2
 8005ee4:	eb1a 0508 	adds.w	r5, sl, r8
 8005ee8:	eb4b 0609 	adc.w	r6, fp, r9
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	f04f 0200 	mov.w	r2, #0
 8005ef6:	f04f 0300 	mov.w	r3, #0
 8005efa:	f04f 0400 	mov.w	r4, #0
 8005efe:	0094      	lsls	r4, r2, #2
 8005f00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f04:	008b      	lsls	r3, r1, #2
 8005f06:	461a      	mov	r2, r3
 8005f08:	4623      	mov	r3, r4
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	f7fa fd51 	bl	80009b4 <__aeabi_uldivmod>
 8005f12:	4603      	mov	r3, r0
 8005f14:	460c      	mov	r4, r1
 8005f16:	461a      	mov	r2, r3
 8005f18:	4bb8      	ldr	r3, [pc, #736]	; (80061fc <UART_SetConfig+0x6f4>)
 8005f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f1e:	095b      	lsrs	r3, r3, #5
 8005f20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	469b      	mov	fp, r3
 8005f28:	f04f 0c00 	mov.w	ip, #0
 8005f2c:	46d9      	mov	r9, fp
 8005f2e:	46e2      	mov	sl, ip
 8005f30:	eb19 0309 	adds.w	r3, r9, r9
 8005f34:	eb4a 040a 	adc.w	r4, sl, sl
 8005f38:	4699      	mov	r9, r3
 8005f3a:	46a2      	mov	sl, r4
 8005f3c:	eb19 090b 	adds.w	r9, r9, fp
 8005f40:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f44:	f04f 0100 	mov.w	r1, #0
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f58:	4689      	mov	r9, r1
 8005f5a:	4692      	mov	sl, r2
 8005f5c:	eb1b 0509 	adds.w	r5, fp, r9
 8005f60:	eb4c 060a 	adc.w	r6, ip, sl
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	f04f 0200 	mov.w	r2, #0
 8005f6e:	f04f 0300 	mov.w	r3, #0
 8005f72:	f04f 0400 	mov.w	r4, #0
 8005f76:	0094      	lsls	r4, r2, #2
 8005f78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f7c:	008b      	lsls	r3, r1, #2
 8005f7e:	461a      	mov	r2, r3
 8005f80:	4623      	mov	r3, r4
 8005f82:	4628      	mov	r0, r5
 8005f84:	4631      	mov	r1, r6
 8005f86:	f7fa fd15 	bl	80009b4 <__aeabi_uldivmod>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	461a      	mov	r2, r3
 8005f90:	4b9a      	ldr	r3, [pc, #616]	; (80061fc <UART_SetConfig+0x6f4>)
 8005f92:	fba3 1302 	umull	r1, r3, r3, r2
 8005f96:	095b      	lsrs	r3, r3, #5
 8005f98:	2164      	movs	r1, #100	; 0x64
 8005f9a:	fb01 f303 	mul.w	r3, r1, r3
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	3332      	adds	r3, #50	; 0x32
 8005fa4:	4a95      	ldr	r2, [pc, #596]	; (80061fc <UART_SetConfig+0x6f4>)
 8005fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005faa:	095b      	lsrs	r3, r3, #5
 8005fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fb0:	4498      	add	r8, r3
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	469b      	mov	fp, r3
 8005fb6:	f04f 0c00 	mov.w	ip, #0
 8005fba:	46d9      	mov	r9, fp
 8005fbc:	46e2      	mov	sl, ip
 8005fbe:	eb19 0309 	adds.w	r3, r9, r9
 8005fc2:	eb4a 040a 	adc.w	r4, sl, sl
 8005fc6:	4699      	mov	r9, r3
 8005fc8:	46a2      	mov	sl, r4
 8005fca:	eb19 090b 	adds.w	r9, r9, fp
 8005fce:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005fd2:	f04f 0100 	mov.w	r1, #0
 8005fd6:	f04f 0200 	mov.w	r2, #0
 8005fda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fe2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fe6:	4689      	mov	r9, r1
 8005fe8:	4692      	mov	sl, r2
 8005fea:	eb1b 0509 	adds.w	r5, fp, r9
 8005fee:	eb4c 060a 	adc.w	r6, ip, sl
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	f04f 0200 	mov.w	r2, #0
 8005ffc:	f04f 0300 	mov.w	r3, #0
 8006000:	f04f 0400 	mov.w	r4, #0
 8006004:	0094      	lsls	r4, r2, #2
 8006006:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800600a:	008b      	lsls	r3, r1, #2
 800600c:	461a      	mov	r2, r3
 800600e:	4623      	mov	r3, r4
 8006010:	4628      	mov	r0, r5
 8006012:	4631      	mov	r1, r6
 8006014:	f7fa fcce 	bl	80009b4 <__aeabi_uldivmod>
 8006018:	4603      	mov	r3, r0
 800601a:	460c      	mov	r4, r1
 800601c:	461a      	mov	r2, r3
 800601e:	4b77      	ldr	r3, [pc, #476]	; (80061fc <UART_SetConfig+0x6f4>)
 8006020:	fba3 1302 	umull	r1, r3, r3, r2
 8006024:	095b      	lsrs	r3, r3, #5
 8006026:	2164      	movs	r1, #100	; 0x64
 8006028:	fb01 f303 	mul.w	r3, r1, r3
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	011b      	lsls	r3, r3, #4
 8006030:	3332      	adds	r3, #50	; 0x32
 8006032:	4a72      	ldr	r2, [pc, #456]	; (80061fc <UART_SetConfig+0x6f4>)
 8006034:	fba2 2303 	umull	r2, r3, r2, r3
 8006038:	095b      	lsrs	r3, r3, #5
 800603a:	f003 020f 	and.w	r2, r3, #15
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4442      	add	r2, r8
 8006044:	609a      	str	r2, [r3, #8]
 8006046:	e0d0      	b.n	80061ea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006048:	f7fe fdec 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 800604c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	469a      	mov	sl, r3
 8006052:	f04f 0b00 	mov.w	fp, #0
 8006056:	46d0      	mov	r8, sl
 8006058:	46d9      	mov	r9, fp
 800605a:	eb18 0308 	adds.w	r3, r8, r8
 800605e:	eb49 0409 	adc.w	r4, r9, r9
 8006062:	4698      	mov	r8, r3
 8006064:	46a1      	mov	r9, r4
 8006066:	eb18 080a 	adds.w	r8, r8, sl
 800606a:	eb49 090b 	adc.w	r9, r9, fp
 800606e:	f04f 0100 	mov.w	r1, #0
 8006072:	f04f 0200 	mov.w	r2, #0
 8006076:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800607a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800607e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006082:	4688      	mov	r8, r1
 8006084:	4691      	mov	r9, r2
 8006086:	eb1a 0508 	adds.w	r5, sl, r8
 800608a:	eb4b 0609 	adc.w	r6, fp, r9
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	4619      	mov	r1, r3
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	f04f 0400 	mov.w	r4, #0
 80060a0:	0094      	lsls	r4, r2, #2
 80060a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060a6:	008b      	lsls	r3, r1, #2
 80060a8:	461a      	mov	r2, r3
 80060aa:	4623      	mov	r3, r4
 80060ac:	4628      	mov	r0, r5
 80060ae:	4631      	mov	r1, r6
 80060b0:	f7fa fc80 	bl	80009b4 <__aeabi_uldivmod>
 80060b4:	4603      	mov	r3, r0
 80060b6:	460c      	mov	r4, r1
 80060b8:	461a      	mov	r2, r3
 80060ba:	4b50      	ldr	r3, [pc, #320]	; (80061fc <UART_SetConfig+0x6f4>)
 80060bc:	fba3 2302 	umull	r2, r3, r3, r2
 80060c0:	095b      	lsrs	r3, r3, #5
 80060c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	469b      	mov	fp, r3
 80060ca:	f04f 0c00 	mov.w	ip, #0
 80060ce:	46d9      	mov	r9, fp
 80060d0:	46e2      	mov	sl, ip
 80060d2:	eb19 0309 	adds.w	r3, r9, r9
 80060d6:	eb4a 040a 	adc.w	r4, sl, sl
 80060da:	4699      	mov	r9, r3
 80060dc:	46a2      	mov	sl, r4
 80060de:	eb19 090b 	adds.w	r9, r9, fp
 80060e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060e6:	f04f 0100 	mov.w	r1, #0
 80060ea:	f04f 0200 	mov.w	r2, #0
 80060ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060fa:	4689      	mov	r9, r1
 80060fc:	4692      	mov	sl, r2
 80060fe:	eb1b 0509 	adds.w	r5, fp, r9
 8006102:	eb4c 060a 	adc.w	r6, ip, sl
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	4619      	mov	r1, r3
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	f04f 0400 	mov.w	r4, #0
 8006118:	0094      	lsls	r4, r2, #2
 800611a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800611e:	008b      	lsls	r3, r1, #2
 8006120:	461a      	mov	r2, r3
 8006122:	4623      	mov	r3, r4
 8006124:	4628      	mov	r0, r5
 8006126:	4631      	mov	r1, r6
 8006128:	f7fa fc44 	bl	80009b4 <__aeabi_uldivmod>
 800612c:	4603      	mov	r3, r0
 800612e:	460c      	mov	r4, r1
 8006130:	461a      	mov	r2, r3
 8006132:	4b32      	ldr	r3, [pc, #200]	; (80061fc <UART_SetConfig+0x6f4>)
 8006134:	fba3 1302 	umull	r1, r3, r3, r2
 8006138:	095b      	lsrs	r3, r3, #5
 800613a:	2164      	movs	r1, #100	; 0x64
 800613c:	fb01 f303 	mul.w	r3, r1, r3
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	011b      	lsls	r3, r3, #4
 8006144:	3332      	adds	r3, #50	; 0x32
 8006146:	4a2d      	ldr	r2, [pc, #180]	; (80061fc <UART_SetConfig+0x6f4>)
 8006148:	fba2 2303 	umull	r2, r3, r2, r3
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006152:	4498      	add	r8, r3
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	469b      	mov	fp, r3
 8006158:	f04f 0c00 	mov.w	ip, #0
 800615c:	46d9      	mov	r9, fp
 800615e:	46e2      	mov	sl, ip
 8006160:	eb19 0309 	adds.w	r3, r9, r9
 8006164:	eb4a 040a 	adc.w	r4, sl, sl
 8006168:	4699      	mov	r9, r3
 800616a:	46a2      	mov	sl, r4
 800616c:	eb19 090b 	adds.w	r9, r9, fp
 8006170:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006174:	f04f 0100 	mov.w	r1, #0
 8006178:	f04f 0200 	mov.w	r2, #0
 800617c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006180:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006184:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006188:	4689      	mov	r9, r1
 800618a:	4692      	mov	sl, r2
 800618c:	eb1b 0509 	adds.w	r5, fp, r9
 8006190:	eb4c 060a 	adc.w	r6, ip, sl
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	4619      	mov	r1, r3
 800619a:	f04f 0200 	mov.w	r2, #0
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	f04f 0400 	mov.w	r4, #0
 80061a6:	0094      	lsls	r4, r2, #2
 80061a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061ac:	008b      	lsls	r3, r1, #2
 80061ae:	461a      	mov	r2, r3
 80061b0:	4623      	mov	r3, r4
 80061b2:	4628      	mov	r0, r5
 80061b4:	4631      	mov	r1, r6
 80061b6:	f7fa fbfd 	bl	80009b4 <__aeabi_uldivmod>
 80061ba:	4603      	mov	r3, r0
 80061bc:	460c      	mov	r4, r1
 80061be:	461a      	mov	r2, r3
 80061c0:	4b0e      	ldr	r3, [pc, #56]	; (80061fc <UART_SetConfig+0x6f4>)
 80061c2:	fba3 1302 	umull	r1, r3, r3, r2
 80061c6:	095b      	lsrs	r3, r3, #5
 80061c8:	2164      	movs	r1, #100	; 0x64
 80061ca:	fb01 f303 	mul.w	r3, r1, r3
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	011b      	lsls	r3, r3, #4
 80061d2:	3332      	adds	r3, #50	; 0x32
 80061d4:	4a09      	ldr	r2, [pc, #36]	; (80061fc <UART_SetConfig+0x6f4>)
 80061d6:	fba2 2303 	umull	r2, r3, r2, r3
 80061da:	095b      	lsrs	r3, r3, #5
 80061dc:	f003 020f 	and.w	r2, r3, #15
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4442      	add	r2, r8
 80061e6:	609a      	str	r2, [r3, #8]
}
 80061e8:	e7ff      	b.n	80061ea <UART_SetConfig+0x6e2>
 80061ea:	bf00      	nop
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f4:	40011000 	.word	0x40011000
 80061f8:	40011400 	.word	0x40011400
 80061fc:	51eb851f 	.word	0x51eb851f

08006200 <__libc_init_array>:
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	4e0d      	ldr	r6, [pc, #52]	; (8006238 <__libc_init_array+0x38>)
 8006204:	4c0d      	ldr	r4, [pc, #52]	; (800623c <__libc_init_array+0x3c>)
 8006206:	1ba4      	subs	r4, r4, r6
 8006208:	10a4      	asrs	r4, r4, #2
 800620a:	2500      	movs	r5, #0
 800620c:	42a5      	cmp	r5, r4
 800620e:	d109      	bne.n	8006224 <__libc_init_array+0x24>
 8006210:	4e0b      	ldr	r6, [pc, #44]	; (8006240 <__libc_init_array+0x40>)
 8006212:	4c0c      	ldr	r4, [pc, #48]	; (8006244 <__libc_init_array+0x44>)
 8006214:	f000 f820 	bl	8006258 <_init>
 8006218:	1ba4      	subs	r4, r4, r6
 800621a:	10a4      	asrs	r4, r4, #2
 800621c:	2500      	movs	r5, #0
 800621e:	42a5      	cmp	r5, r4
 8006220:	d105      	bne.n	800622e <__libc_init_array+0x2e>
 8006222:	bd70      	pop	{r4, r5, r6, pc}
 8006224:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006228:	4798      	blx	r3
 800622a:	3501      	adds	r5, #1
 800622c:	e7ee      	b.n	800620c <__libc_init_array+0xc>
 800622e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006232:	4798      	blx	r3
 8006234:	3501      	adds	r5, #1
 8006236:	e7f2      	b.n	800621e <__libc_init_array+0x1e>
 8006238:	08006298 	.word	0x08006298
 800623c:	08006298 	.word	0x08006298
 8006240:	08006298 	.word	0x08006298
 8006244:	0800629c 	.word	0x0800629c

08006248 <memset>:
 8006248:	4402      	add	r2, r0
 800624a:	4603      	mov	r3, r0
 800624c:	4293      	cmp	r3, r2
 800624e:	d100      	bne.n	8006252 <memset+0xa>
 8006250:	4770      	bx	lr
 8006252:	f803 1b01 	strb.w	r1, [r3], #1
 8006256:	e7f9      	b.n	800624c <memset+0x4>

08006258 <_init>:
 8006258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625a:	bf00      	nop
 800625c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625e:	bc08      	pop	{r3}
 8006260:	469e      	mov	lr, r3
 8006262:	4770      	bx	lr

08006264 <_fini>:
 8006264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006266:	bf00      	nop
 8006268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626a:	bc08      	pop	{r3}
 800626c:	469e      	mov	lr, r3
 800626e:	4770      	bx	lr
