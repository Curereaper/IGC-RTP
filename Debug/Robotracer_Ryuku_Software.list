
Robotracer_Ryuku_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c20  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005da8  08005da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dc8  08005dc8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005dc8  08005dc8  00015dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dd0  08005dd0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dd0  08005dd0  00015dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dd4  08005dd4  00015dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000010  08005de4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08005de4  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cca  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020cd  00000000  00000000  00030d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d0  00000000  00000000  00032dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f0  00000000  00000000  00033fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fad4  00000000  00000000  00035098  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cb34  00000000  00000000  00054b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c403b  00000000  00000000  000616a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001256db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd0  00000000  00000000  00125758  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005d90 	.word	0x08005d90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005d90 	.word	0x08005d90

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b972 	b.w	8000cb0 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	4688      	mov	r8, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14b      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4615      	mov	r5, r2
 80009f6:	d967      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b14a      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 80009fe:	f1c2 0720 	rsb	r7, r2, #32
 8000a02:	fa01 f302 	lsl.w	r3, r1, r2
 8000a06:	fa20 f707 	lsr.w	r7, r0, r7
 8000a0a:	4095      	lsls	r5, r2
 8000a0c:	ea47 0803 	orr.w	r8, r7, r3
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a1c:	fa1f fc85 	uxth.w	ip, r5
 8000a20:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a24:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a28:	fb07 f10c 	mul.w	r1, r7, ip
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18eb      	adds	r3, r5, r3
 8000a32:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a36:	f080 811b 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8118 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a40:	3f02      	subs	r7, #2
 8000a42:	442b      	add	r3, r5
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a58:	45a4      	cmp	ip, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	192c      	adds	r4, r5, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8107 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a66:	45a4      	cmp	ip, r4
 8000a68:	f240 8104 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	442c      	add	r4, r5
 8000a70:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a74:	eba4 040c 	sub.w	r4, r4, ip
 8000a78:	2700      	movs	r7, #0
 8000a7a:	b11e      	cbz	r6, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c6 4300 	strd	r4, r3, [r6]
 8000a84:	4639      	mov	r1, r7
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d909      	bls.n	8000aa2 <__udivmoddi4+0xbe>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80eb 	beq.w	8000c6a <__udivmoddi4+0x286>
 8000a94:	2700      	movs	r7, #0
 8000a96:	e9c6 0100 	strd	r0, r1, [r6]
 8000a9a:	4638      	mov	r0, r7
 8000a9c:	4639      	mov	r1, r7
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	fab3 f783 	clz	r7, r3
 8000aa6:	2f00      	cmp	r7, #0
 8000aa8:	d147      	bne.n	8000b3a <__udivmoddi4+0x156>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d302      	bcc.n	8000ab4 <__udivmoddi4+0xd0>
 8000aae:	4282      	cmp	r2, r0
 8000ab0:	f200 80fa 	bhi.w	8000ca8 <__udivmoddi4+0x2c4>
 8000ab4:	1a84      	subs	r4, r0, r2
 8000ab6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aba:	2001      	movs	r0, #1
 8000abc:	4698      	mov	r8, r3
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0e0      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000ac2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ac6:	e7dd      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000ac8:	b902      	cbnz	r2, 8000acc <__udivmoddi4+0xe8>
 8000aca:	deff      	udf	#255	; 0xff
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	f040 808f 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad6:	1b49      	subs	r1, r1, r5
 8000ad8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000adc:	fa1f f885 	uxth.w	r8, r5
 8000ae0:	2701      	movs	r7, #1
 8000ae2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ae6:	0c23      	lsrs	r3, r4, #16
 8000ae8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb08 f10c 	mul.w	r1, r8, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1a59      	subs	r1, r3, r1
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b14:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x14c>
 8000b20:	192c      	adds	r4, r5, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x14a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80b6 	bhi.w	8000c9a <__udivmoddi4+0x2b6>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e79f      	b.n	8000a7a <__udivmoddi4+0x96>
 8000b3a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b3e:	40bb      	lsls	r3, r7
 8000b40:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b44:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b48:	fa01 f407 	lsl.w	r4, r1, r7
 8000b4c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b50:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b54:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b58:	4325      	orrs	r5, r4
 8000b5a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b5e:	0c2c      	lsrs	r4, r5, #16
 8000b60:	fb08 3319 	mls	r3, r8, r9, r3
 8000b64:	fa1f fa8e 	uxth.w	sl, lr
 8000b68:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b6c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b70:	429c      	cmp	r4, r3
 8000b72:	fa02 f207 	lsl.w	r2, r2, r7
 8000b76:	fa00 f107 	lsl.w	r1, r0, r7
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b84:	f080 8087 	bcs.w	8000c96 <__udivmoddi4+0x2b2>
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	f240 8084 	bls.w	8000c96 <__udivmoddi4+0x2b2>
 8000b8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b92:	4473      	add	r3, lr
 8000b94:	1b1b      	subs	r3, r3, r4
 8000b96:	b2ad      	uxth	r5, r5
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ba4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ba8:	45a2      	cmp	sl, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1e 0404 	adds.w	r4, lr, r4
 8000bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb4:	d26b      	bcs.n	8000c8e <__udivmoddi4+0x2aa>
 8000bb6:	45a2      	cmp	sl, r4
 8000bb8:	d969      	bls.n	8000c8e <__udivmoddi4+0x2aa>
 8000bba:	3802      	subs	r0, #2
 8000bbc:	4474      	add	r4, lr
 8000bbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bc6:	eba4 040a 	sub.w	r4, r4, sl
 8000bca:	454c      	cmp	r4, r9
 8000bcc:	46c2      	mov	sl, r8
 8000bce:	464b      	mov	r3, r9
 8000bd0:	d354      	bcc.n	8000c7c <__udivmoddi4+0x298>
 8000bd2:	d051      	beq.n	8000c78 <__udivmoddi4+0x294>
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d069      	beq.n	8000cac <__udivmoddi4+0x2c8>
 8000bd8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bdc:	eb64 0403 	sbc.w	r4, r4, r3
 8000be0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000be4:	40fd      	lsrs	r5, r7
 8000be6:	40fc      	lsrs	r4, r7
 8000be8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bec:	e9c6 5400 	strd	r5, r4, [r6]
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e747      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000bf4:	f1c2 0320 	rsb	r3, r2, #32
 8000bf8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bfc:	4095      	lsls	r5, r2
 8000bfe:	fa01 f002 	lsl.w	r0, r1, r2
 8000c02:	fa21 f303 	lsr.w	r3, r1, r3
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	4338      	orrs	r0, r7
 8000c0c:	0c01      	lsrs	r1, r0, #16
 8000c0e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c12:	fa1f f885 	uxth.w	r8, r5
 8000c16:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c1e:	fb07 f308 	mul.w	r3, r7, r8
 8000c22:	428b      	cmp	r3, r1
 8000c24:	fa04 f402 	lsl.w	r4, r4, r2
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x256>
 8000c2a:	1869      	adds	r1, r5, r1
 8000c2c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c30:	d22f      	bcs.n	8000c92 <__udivmoddi4+0x2ae>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d92d      	bls.n	8000c92 <__udivmoddi4+0x2ae>
 8000c36:	3f02      	subs	r7, #2
 8000c38:	4429      	add	r1, r5
 8000c3a:	1acb      	subs	r3, r1, r3
 8000c3c:	b281      	uxth	r1, r0
 8000c3e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c42:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4a:	fb00 f308 	mul.w	r3, r0, r8
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d907      	bls.n	8000c62 <__udivmoddi4+0x27e>
 8000c52:	1869      	adds	r1, r5, r1
 8000c54:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c58:	d217      	bcs.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d915      	bls.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5e:	3802      	subs	r0, #2
 8000c60:	4429      	add	r1, r5
 8000c62:	1ac9      	subs	r1, r1, r3
 8000c64:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c68:	e73b      	b.n	8000ae2 <__udivmoddi4+0xfe>
 8000c6a:	4637      	mov	r7, r6
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	e709      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c70:	4607      	mov	r7, r0
 8000c72:	e6e7      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c74:	4618      	mov	r0, r3
 8000c76:	e6fb      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c78:	4541      	cmp	r1, r8
 8000c7a:	d2ab      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c7c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c80:	eb69 020e 	sbc.w	r2, r9, lr
 8000c84:	3801      	subs	r0, #1
 8000c86:	4613      	mov	r3, r2
 8000c88:	e7a4      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8a:	4660      	mov	r0, ip
 8000c8c:	e7e9      	b.n	8000c62 <__udivmoddi4+0x27e>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	e795      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c92:	4667      	mov	r7, ip
 8000c94:	e7d1      	b.n	8000c3a <__udivmoddi4+0x256>
 8000c96:	4681      	mov	r9, r0
 8000c98:	e77c      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	442c      	add	r4, r5
 8000c9e:	e747      	b.n	8000b30 <__udivmoddi4+0x14c>
 8000ca0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca4:	442b      	add	r3, r5
 8000ca6:	e72f      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca8:	4638      	mov	r0, r7
 8000caa:	e708      	b.n	8000abe <__udivmoddi4+0xda>
 8000cac:	4637      	mov	r7, r6
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0xa0>

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <motorSet>:
static int16_t senLL[10];
static int16_t senRR[10];

uint8_t wakeup_flag;

void motorSet() {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
	int16_t motorPwm_L, motorPwm_R;
	int16_t rev_motor_L, rev_motor_R;

	if(motor_L > MAX_COUNTER_PERIOD) motor_L = MAX_COUNTER_PERIOD;
 8000cba:	4b5f      	ldr	r3, [pc, #380]	; (8000e38 <motorSet+0x184>)
 8000cbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cc0:	f5b3 6fd2 	cmp.w	r3, #1680	; 0x690
 8000cc4:	db03      	blt.n	8000cce <motorSet+0x1a>
 8000cc6:	4b5c      	ldr	r3, [pc, #368]	; (8000e38 <motorSet+0x184>)
 8000cc8:	f240 628f 	movw	r2, #1679	; 0x68f
 8000ccc:	801a      	strh	r2, [r3, #0]
	if(motor_R > MAX_COUNTER_PERIOD) motor_R = MAX_COUNTER_PERIOD;
 8000cce:	4b5b      	ldr	r3, [pc, #364]	; (8000e3c <motorSet+0x188>)
 8000cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd4:	f5b3 6fd2 	cmp.w	r3, #1680	; 0x690
 8000cd8:	db03      	blt.n	8000ce2 <motorSet+0x2e>
 8000cda:	4b58      	ldr	r3, [pc, #352]	; (8000e3c <motorSet+0x188>)
 8000cdc:	f240 628f 	movw	r2, #1679	; 0x68f
 8000ce0:	801a      	strh	r2, [r3, #0]
	if(motor_L < MIN_COUNTER_PERIOD) motor_L = MIN_COUNTER_PERIOD;
 8000ce2:	4b55      	ldr	r3, [pc, #340]	; (8000e38 <motorSet+0x184>)
 8000ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce8:	f513 6fd2 	cmn.w	r3, #1680	; 0x690
 8000cec:	dc03      	bgt.n	8000cf6 <motorSet+0x42>
 8000cee:	4b52      	ldr	r3, [pc, #328]	; (8000e38 <motorSet+0x184>)
 8000cf0:	f64f 1271 	movw	r2, #63857	; 0xf971
 8000cf4:	801a      	strh	r2, [r3, #0]
	if(motor_R < MIN_COUNTER_PERIOD) motor_R = MIN_COUNTER_PERIOD;
 8000cf6:	4b51      	ldr	r3, [pc, #324]	; (8000e3c <motorSet+0x188>)
 8000cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cfc:	f513 6fd2 	cmn.w	r3, #1680	; 0x690
 8000d00:	dc03      	bgt.n	8000d0a <motorSet+0x56>
 8000d02:	4b4e      	ldr	r3, [pc, #312]	; (8000e3c <motorSet+0x188>)
 8000d04:	f64f 1271 	movw	r2, #63857	; 0xf971
 8000d08:	801a      	strh	r2, [r3, #0]

	if(motor_L >= 0){
 8000d0a:	4b4b      	ldr	r3, [pc, #300]	; (8000e38 <motorSet+0x184>)
 8000d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db09      	blt.n	8000d28 <motorSet+0x74>
		rev_motor_L = MAX_COUNTER_PERIOD - motor_L;
 8000d14:	4b48      	ldr	r3, [pc, #288]	; (8000e38 <motorSet+0x184>)
 8000d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	f5c3 63d1 	rsb	r3, r3, #1672	; 0x688
 8000d20:	3307      	adds	r3, #7
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	80fb      	strh	r3, [r7, #6]
 8000d26:	e007      	b.n	8000d38 <motorSet+0x84>
	}
	else{
		rev_motor_L = MIN_COUNTER_PERIOD - motor_L;
 8000d28:	4b43      	ldr	r3, [pc, #268]	; (8000e38 <motorSet+0x184>)
 8000d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	4b43      	ldr	r3, [pc, #268]	; (8000e40 <motorSet+0x18c>)
 8000d32:	1a9b      	subs	r3, r3, r2
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	80fb      	strh	r3, [r7, #6]
	}
	if(motor_R >= 0){
 8000d38:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <motorSet+0x188>)
 8000d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	db09      	blt.n	8000d56 <motorSet+0xa2>
		rev_motor_R = MAX_COUNTER_PERIOD - motor_R;
 8000d42:	4b3e      	ldr	r3, [pc, #248]	; (8000e3c <motorSet+0x188>)
 8000d44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	f5c3 63d1 	rsb	r3, r3, #1672	; 0x688
 8000d4e:	3307      	adds	r3, #7
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	80bb      	strh	r3, [r7, #4]
 8000d54:	e007      	b.n	8000d66 <motorSet+0xb2>
		}
	else{
		rev_motor_R = MIN_COUNTER_PERIOD - motor_R;
 8000d56:	4b39      	ldr	r3, [pc, #228]	; (8000e3c <motorSet+0x188>)
 8000d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	4b38      	ldr	r3, [pc, #224]	; (8000e40 <motorSet+0x18c>)
 8000d60:	1a9b      	subs	r3, r3, r2
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	80bb      	strh	r3, [r7, #4]
	}
	mon_rev_L = rev_motor_L;
 8000d66:	4a37      	ldr	r2, [pc, #220]	; (8000e44 <motorSet+0x190>)
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	8013      	strh	r3, [r2, #0]
	mon_rev_R = rev_motor_R;
 8000d6c:	4a36      	ldr	r2, [pc, #216]	; (8000e48 <motorSet+0x194>)
 8000d6e:	88bb      	ldrh	r3, [r7, #4]
 8000d70:	8013      	strh	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, MAX_COUNTER_PERIOD);
		HAL_Delay(100);
	}
	*/

	if(rev_motor_L > 0) {
 8000d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	dd0c      	ble.n	8000d94 <motorSet+0xe0>
		motorPwm_L = rev_motor_L;
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	807b      	strh	r3, [r7, #2]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, MAX_COUNTER_PERIOD);
 8000d7e:	4b33      	ldr	r3, [pc, #204]	; (8000e4c <motorSet+0x198>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f240 628f 	movw	r2, #1679	; 0x68f
 8000d86:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, motorPwm_L);
 8000d88:	4b30      	ldr	r3, [pc, #192]	; (8000e4c <motorSet+0x198>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d90:	641a      	str	r2, [r3, #64]	; 0x40
 8000d92:	e01c      	b.n	8000dce <motorSet+0x11a>

	}
	else if(rev_motor_L == 0){
 8000d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d10a      	bne.n	8000db2 <motorSet+0xfe>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, MAX_COUNTER_PERIOD);
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <motorSet+0x198>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f240 628f 	movw	r2, #1679	; 0x68f
 8000da4:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, MAX_COUNTER_PERIOD);
 8000da6:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <motorSet+0x198>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f240 628f 	movw	r2, #1679	; 0x68f
 8000dae:	641a      	str	r2, [r3, #64]	; 0x40
 8000db0:	e00d      	b.n	8000dce <motorSet+0x11a>
	}
	else {
		motorPwm_L = rev_motor_L*(-1) ;
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	425b      	negs	r3, r3
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	807b      	strh	r3, [r7, #2]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motorPwm_L);
 8000dba:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <motorSet+0x198>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000dc2:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, MAX_COUNTER_PERIOD);
 8000dc4:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <motorSet+0x198>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f240 628f 	movw	r2, #1679	; 0x68f
 8000dcc:	641a      	str	r2, [r3, #64]	; 0x40
	}


	if(rev_motor_R > 0) {
 8000dce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	dd0c      	ble.n	8000df0 <motorSet+0x13c>
		motorPwm_R = rev_motor_R;
 8000dd6:	88bb      	ldrh	r3, [r7, #4]
 8000dd8:	803b      	strh	r3, [r7, #0]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, MAX_COUNTER_PERIOD);
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <motorSet+0x198>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f240 628f 	movw	r2, #1679	; 0x68f
 8000de2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, motorPwm_R);
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <motorSet+0x198>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000dec:	639a      	str	r2, [r3, #56]	; 0x38
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motorPwm_R);
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, MAX_COUNTER_PERIOD);
	}

}
 8000dee:	e01c      	b.n	8000e2a <motorSet+0x176>
	else if(rev_motor_R == 0){
 8000df0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d10a      	bne.n	8000e0e <motorSet+0x15a>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, MAX_COUNTER_PERIOD);
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <motorSet+0x198>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f240 628f 	movw	r2, #1679	; 0x68f
 8000e00:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, MAX_COUNTER_PERIOD);
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <motorSet+0x198>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f240 628f 	movw	r2, #1679	; 0x68f
 8000e0a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e0c:	e00d      	b.n	8000e2a <motorSet+0x176>
		motorPwm_R = rev_motor_R * (-1);
 8000e0e:	88bb      	ldrh	r3, [r7, #4]
 8000e10:	425b      	negs	r3, r3
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	803b      	strh	r3, [r7, #0]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motorPwm_R);
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <motorSet+0x198>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e1e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, MAX_COUNTER_PERIOD);
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <motorSet+0x198>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f240 628f 	movw	r2, #1679	; 0x68f
 8000e28:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	2000011a 	.word	0x2000011a
 8000e3c:	20000108 	.word	0x20000108
 8000e40:	fffff971 	.word	0xfffff971
 8000e44:	20000120 	.word	0x20000120
 8000e48:	2000011e 	.word	0x2000011e
 8000e4c:	200000bc 	.word	0x200000bc

08000e50 <storeAdBuffer>:

void storeAdBuffer(void) {
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
	static uint8_t index;
	senCL[index] = analog[5];
 8000e54:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <storeAdBuffer+0x94>)
 8000e56:	8959      	ldrh	r1, [r3, #10]
 8000e58:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <storeAdBuffer+0x98>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	b209      	sxth	r1, r1
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <storeAdBuffer+0x9c>)
 8000e62:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	senCR[index] = analog[6];
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <storeAdBuffer+0x94>)
 8000e68:	8999      	ldrh	r1, [r3, #12]
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <storeAdBuffer+0x98>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	b209      	sxth	r1, r1
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <storeAdBuffer+0xa0>)
 8000e74:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	senL[index] = analog[4];
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <storeAdBuffer+0x94>)
 8000e7a:	8919      	ldrh	r1, [r3, #8]
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <storeAdBuffer+0x98>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	b209      	sxth	r1, r1
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <storeAdBuffer+0xa4>)
 8000e86:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	senR[index] = analog[7];
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <storeAdBuffer+0x94>)
 8000e8c:	89d9      	ldrh	r1, [r3, #14]
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <storeAdBuffer+0x98>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	b209      	sxth	r1, r1
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <storeAdBuffer+0xa8>)
 8000e98:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	senLL[index] = analog[3];
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <storeAdBuffer+0x94>)
 8000e9e:	88d9      	ldrh	r1, [r3, #6]
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <storeAdBuffer+0x98>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	b209      	sxth	r1, r1
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <storeAdBuffer+0xac>)
 8000eaa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	senRR[index] = analog[10];
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <storeAdBuffer+0x94>)
 8000eb0:	8a99      	ldrh	r1, [r3, #20]
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <storeAdBuffer+0x98>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	b209      	sxth	r1, r1
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <storeAdBuffer+0xb0>)
 8000ebc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	index++;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <storeAdBuffer+0x98>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <storeAdBuffer+0x98>)
 8000eca:	701a      	strb	r2, [r3, #0]
	if(index == 10) index = 0;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <storeAdBuffer+0x98>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b0a      	cmp	r3, #10
 8000ed2:	d102      	bne.n	8000eda <storeAdBuffer+0x8a>
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <storeAdBuffer+0x98>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	20000128 	.word	0x20000128
 8000ee8:	200000a4 	.word	0x200000a4
 8000eec:	2000002c 	.word	0x2000002c
 8000ef0:	20000040 	.word	0x20000040
 8000ef4:	20000054 	.word	0x20000054
 8000ef8:	20000068 	.word	0x20000068
 8000efc:	2000007c 	.word	0x2000007c
 8000f00:	20000090 	.word	0x20000090

08000f04 <getAnalogsensor>:

void getAnalogsensor(void) {
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
	sensorCL = ( senCL[0] + senCL[1] + senCL[2] + senCL[3] + senCL[4] + senCL[5] + senCL[6] + senCL[7] + senCL[8] + senCL[9] ) / 10;
 8000f08:	4b95      	ldr	r3, [pc, #596]	; (8001160 <getAnalogsensor+0x25c>)
 8000f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b93      	ldr	r3, [pc, #588]	; (8001160 <getAnalogsensor+0x25c>)
 8000f12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a91      	ldr	r2, [pc, #580]	; (8001160 <getAnalogsensor+0x25c>)
 8000f1a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a8f      	ldr	r2, [pc, #572]	; (8001160 <getAnalogsensor+0x25c>)
 8000f22:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a8d      	ldr	r2, [pc, #564]	; (8001160 <getAnalogsensor+0x25c>)
 8000f2a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a8b      	ldr	r2, [pc, #556]	; (8001160 <getAnalogsensor+0x25c>)
 8000f32:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a89      	ldr	r2, [pc, #548]	; (8001160 <getAnalogsensor+0x25c>)
 8000f3a:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a87      	ldr	r2, [pc, #540]	; (8001160 <getAnalogsensor+0x25c>)
 8000f42:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a85      	ldr	r2, [pc, #532]	; (8001160 <getAnalogsensor+0x25c>)
 8000f4a:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a83      	ldr	r2, [pc, #524]	; (8001160 <getAnalogsensor+0x25c>)
 8000f52:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a82      	ldr	r2, [pc, #520]	; (8001164 <getAnalogsensor+0x260>)
 8000f5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f5e:	1092      	asrs	r2, r2, #2
 8000f60:	17db      	asrs	r3, r3, #31
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	b21a      	sxth	r2, r3
 8000f66:	4b80      	ldr	r3, [pc, #512]	; (8001168 <getAnalogsensor+0x264>)
 8000f68:	801a      	strh	r2, [r3, #0]
	sensorCR = ( senCR[0] + senCR[1] + senCR[2] + senCR[3] + senCR[4] + senCR[5] + senCR[6] + senCR[7] + senCR[8] + senCR[9] ) / 10;
 8000f6a:	4b80      	ldr	r3, [pc, #512]	; (800116c <getAnalogsensor+0x268>)
 8000f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b7e      	ldr	r3, [pc, #504]	; (800116c <getAnalogsensor+0x268>)
 8000f74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a7c      	ldr	r2, [pc, #496]	; (800116c <getAnalogsensor+0x268>)
 8000f7c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a7a      	ldr	r2, [pc, #488]	; (800116c <getAnalogsensor+0x268>)
 8000f84:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a78      	ldr	r2, [pc, #480]	; (800116c <getAnalogsensor+0x268>)
 8000f8c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a76      	ldr	r2, [pc, #472]	; (800116c <getAnalogsensor+0x268>)
 8000f94:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8000f98:	4413      	add	r3, r2
 8000f9a:	4a74      	ldr	r2, [pc, #464]	; (800116c <getAnalogsensor+0x268>)
 8000f9c:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a72      	ldr	r2, [pc, #456]	; (800116c <getAnalogsensor+0x268>)
 8000fa4:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a70      	ldr	r2, [pc, #448]	; (800116c <getAnalogsensor+0x268>)
 8000fac:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4a6e      	ldr	r2, [pc, #440]	; (800116c <getAnalogsensor+0x268>)
 8000fb4:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a6a      	ldr	r2, [pc, #424]	; (8001164 <getAnalogsensor+0x260>)
 8000fbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc0:	1092      	asrs	r2, r2, #2
 8000fc2:	17db      	asrs	r3, r3, #31
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	4b69      	ldr	r3, [pc, #420]	; (8001170 <getAnalogsensor+0x26c>)
 8000fca:	801a      	strh	r2, [r3, #0]
	sensorL = ( senL[0] + senL[1] + senL[2] + senL[3] + senL[4] + senL[5] + senL[6] + senL[7] + senL[8] + senL[9] ) / 10;
 8000fcc:	4b69      	ldr	r3, [pc, #420]	; (8001174 <getAnalogsensor+0x270>)
 8000fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b67      	ldr	r3, [pc, #412]	; (8001174 <getAnalogsensor+0x270>)
 8000fd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a65      	ldr	r2, [pc, #404]	; (8001174 <getAnalogsensor+0x270>)
 8000fde:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a63      	ldr	r2, [pc, #396]	; (8001174 <getAnalogsensor+0x270>)
 8000fe6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a61      	ldr	r2, [pc, #388]	; (8001174 <getAnalogsensor+0x270>)
 8000fee:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a5f      	ldr	r2, [pc, #380]	; (8001174 <getAnalogsensor+0x270>)
 8000ff6:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a5d      	ldr	r2, [pc, #372]	; (8001174 <getAnalogsensor+0x270>)
 8000ffe:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001002:	4413      	add	r3, r2
 8001004:	4a5b      	ldr	r2, [pc, #364]	; (8001174 <getAnalogsensor+0x270>)
 8001006:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800100a:	4413      	add	r3, r2
 800100c:	4a59      	ldr	r2, [pc, #356]	; (8001174 <getAnalogsensor+0x270>)
 800100e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001012:	4413      	add	r3, r2
 8001014:	4a57      	ldr	r2, [pc, #348]	; (8001174 <getAnalogsensor+0x270>)
 8001016:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800101a:	4413      	add	r3, r2
 800101c:	4a51      	ldr	r2, [pc, #324]	; (8001164 <getAnalogsensor+0x260>)
 800101e:	fb82 1203 	smull	r1, r2, r2, r3
 8001022:	1092      	asrs	r2, r2, #2
 8001024:	17db      	asrs	r3, r3, #31
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	b21a      	sxth	r2, r3
 800102a:	4b53      	ldr	r3, [pc, #332]	; (8001178 <getAnalogsensor+0x274>)
 800102c:	801a      	strh	r2, [r3, #0]
	sensorR = ( senR[0] + senR[1] + senR[2] + senR[3] + senR[4] + senR[5] + senR[6] + senR[7] + senR[8] + senR[9] ) / 10;
 800102e:	4b53      	ldr	r3, [pc, #332]	; (800117c <getAnalogsensor+0x278>)
 8001030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001034:	461a      	mov	r2, r3
 8001036:	4b51      	ldr	r3, [pc, #324]	; (800117c <getAnalogsensor+0x278>)
 8001038:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800103c:	4413      	add	r3, r2
 800103e:	4a4f      	ldr	r2, [pc, #316]	; (800117c <getAnalogsensor+0x278>)
 8001040:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001044:	4413      	add	r3, r2
 8001046:	4a4d      	ldr	r2, [pc, #308]	; (800117c <getAnalogsensor+0x278>)
 8001048:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800104c:	4413      	add	r3, r2
 800104e:	4a4b      	ldr	r2, [pc, #300]	; (800117c <getAnalogsensor+0x278>)
 8001050:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001054:	4413      	add	r3, r2
 8001056:	4a49      	ldr	r2, [pc, #292]	; (800117c <getAnalogsensor+0x278>)
 8001058:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800105c:	4413      	add	r3, r2
 800105e:	4a47      	ldr	r2, [pc, #284]	; (800117c <getAnalogsensor+0x278>)
 8001060:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001064:	4413      	add	r3, r2
 8001066:	4a45      	ldr	r2, [pc, #276]	; (800117c <getAnalogsensor+0x278>)
 8001068:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800106c:	4413      	add	r3, r2
 800106e:	4a43      	ldr	r2, [pc, #268]	; (800117c <getAnalogsensor+0x278>)
 8001070:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001074:	4413      	add	r3, r2
 8001076:	4a41      	ldr	r2, [pc, #260]	; (800117c <getAnalogsensor+0x278>)
 8001078:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800107c:	4413      	add	r3, r2
 800107e:	4a39      	ldr	r2, [pc, #228]	; (8001164 <getAnalogsensor+0x260>)
 8001080:	fb82 1203 	smull	r1, r2, r2, r3
 8001084:	1092      	asrs	r2, r2, #2
 8001086:	17db      	asrs	r3, r3, #31
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	b21a      	sxth	r2, r3
 800108c:	4b3c      	ldr	r3, [pc, #240]	; (8001180 <getAnalogsensor+0x27c>)
 800108e:	801a      	strh	r2, [r3, #0]
	sensorLL = ( senLL[0] + senLL[1] + senLL[2] + senLL[3] + senLL[4] + senLL[5] + senLL[6] + senLL[7] + senLL[8] + senCR[9] ) / 10;
 8001090:	4b3c      	ldr	r3, [pc, #240]	; (8001184 <getAnalogsensor+0x280>)
 8001092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001096:	461a      	mov	r2, r3
 8001098:	4b3a      	ldr	r3, [pc, #232]	; (8001184 <getAnalogsensor+0x280>)
 800109a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800109e:	4413      	add	r3, r2
 80010a0:	4a38      	ldr	r2, [pc, #224]	; (8001184 <getAnalogsensor+0x280>)
 80010a2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a36      	ldr	r2, [pc, #216]	; (8001184 <getAnalogsensor+0x280>)
 80010aa:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a34      	ldr	r2, [pc, #208]	; (8001184 <getAnalogsensor+0x280>)
 80010b2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a32      	ldr	r2, [pc, #200]	; (8001184 <getAnalogsensor+0x280>)
 80010ba:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80010be:	4413      	add	r3, r2
 80010c0:	4a30      	ldr	r2, [pc, #192]	; (8001184 <getAnalogsensor+0x280>)
 80010c2:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a2e      	ldr	r2, [pc, #184]	; (8001184 <getAnalogsensor+0x280>)
 80010ca:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a2c      	ldr	r2, [pc, #176]	; (8001184 <getAnalogsensor+0x280>)
 80010d2:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a24      	ldr	r2, [pc, #144]	; (800116c <getAnalogsensor+0x268>)
 80010da:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80010de:	4413      	add	r3, r2
 80010e0:	4a20      	ldr	r2, [pc, #128]	; (8001164 <getAnalogsensor+0x260>)
 80010e2:	fb82 1203 	smull	r1, r2, r2, r3
 80010e6:	1092      	asrs	r2, r2, #2
 80010e8:	17db      	asrs	r3, r3, #31
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <getAnalogsensor+0x284>)
 80010f0:	801a      	strh	r2, [r3, #0]
	sensorRR = ( senRR[0] + senRR[1] + senRR[2] + senRR[3] + senRR[4] + senRR[5] + senRR[6] + senRR[7] + senRR[8] + senRR[9] ) / 10;
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <getAnalogsensor+0x288>)
 80010f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b24      	ldr	r3, [pc, #144]	; (800118c <getAnalogsensor+0x288>)
 80010fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001100:	4413      	add	r3, r2
 8001102:	4a22      	ldr	r2, [pc, #136]	; (800118c <getAnalogsensor+0x288>)
 8001104:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001108:	4413      	add	r3, r2
 800110a:	4a20      	ldr	r2, [pc, #128]	; (800118c <getAnalogsensor+0x288>)
 800110c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001110:	4413      	add	r3, r2
 8001112:	4a1e      	ldr	r2, [pc, #120]	; (800118c <getAnalogsensor+0x288>)
 8001114:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001118:	4413      	add	r3, r2
 800111a:	4a1c      	ldr	r2, [pc, #112]	; (800118c <getAnalogsensor+0x288>)
 800111c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001120:	4413      	add	r3, r2
 8001122:	4a1a      	ldr	r2, [pc, #104]	; (800118c <getAnalogsensor+0x288>)
 8001124:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001128:	4413      	add	r3, r2
 800112a:	4a18      	ldr	r2, [pc, #96]	; (800118c <getAnalogsensor+0x288>)
 800112c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001130:	4413      	add	r3, r2
 8001132:	4a16      	ldr	r2, [pc, #88]	; (800118c <getAnalogsensor+0x288>)
 8001134:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001138:	4413      	add	r3, r2
 800113a:	4a14      	ldr	r2, [pc, #80]	; (800118c <getAnalogsensor+0x288>)
 800113c:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001140:	4413      	add	r3, r2
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <getAnalogsensor+0x260>)
 8001144:	fb82 1203 	smull	r1, r2, r2, r3
 8001148:	1092      	asrs	r2, r2, #2
 800114a:	17db      	asrs	r3, r3, #31
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	b21a      	sxth	r2, r3
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <getAnalogsensor+0x28c>)
 8001152:	801a      	strh	r2, [r3, #0]


}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	2000002c 	.word	0x2000002c
 8001164:	66666667 	.word	0x66666667
 8001168:	20000126 	.word	0x20000126
 800116c:	20000040 	.word	0x20000040
 8001170:	20000124 	.word	0x20000124
 8001174:	20000054 	.word	0x20000054
 8001178:	20000122 	.word	0x20000122
 800117c:	20000068 	.word	0x20000068
 8001180:	2000011c 	.word	0x2000011c
 8001184:	2000007c 	.word	0x2000007c
 8001188:	20000118 	.word	0x20000118
 800118c:	20000090 	.word	0x20000090
 8001190:	200000b8 	.word	0x200000b8
 8001194:	00000000 	.word	0x00000000

08001198 <lineTrace>:

void lineTrace(void){
 8001198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119a:	b08d      	sub	sp, #52	; 0x34
 800119c:	af00      	add	r7, sp, #0
	double p, d;
	static double i;
	double kp = 0.4, ki = 0., kd = 0.;
 800119e:	a478      	add	r4, pc, #480	; (adr r4, 8001380 <lineTrace+0x1e8>)
 80011a0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80011a4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 80011a8:	f04f 0300 	mov.w	r3, #0
 80011ac:	f04f 0400 	mov.w	r4, #0
 80011b0:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80011b4:	f04f 0300 	mov.w	r3, #0
 80011b8:	f04f 0400 	mov.w	r4, #0
 80011bc:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double def = 0.;
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	f04f 0400 	mov.w	r4, #0
 80011c8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	/*if(i_pos_clear_flag == 1){
		i_pos = 0;
		i_pos_clear_flag = 0;
	}*/

	def = ( sensorLL + sensorL + sensorCL ) - ( sensorRR + sensorR + sensorCR );
 80011cc:	4b60      	ldr	r3, [pc, #384]	; (8001350 <lineTrace+0x1b8>)
 80011ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b5f      	ldr	r3, [pc, #380]	; (8001354 <lineTrace+0x1bc>)
 80011d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011da:	4413      	add	r3, r2
 80011dc:	4a5e      	ldr	r2, [pc, #376]	; (8001358 <lineTrace+0x1c0>)
 80011de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011e2:	441a      	add	r2, r3
 80011e4:	4b5d      	ldr	r3, [pc, #372]	; (800135c <lineTrace+0x1c4>)
 80011e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ea:	4619      	mov	r1, r3
 80011ec:	4b5c      	ldr	r3, [pc, #368]	; (8001360 <lineTrace+0x1c8>)
 80011ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f2:	440b      	add	r3, r1
 80011f4:	495b      	ldr	r1, [pc, #364]	; (8001364 <lineTrace+0x1cc>)
 80011f6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80011fa:	440b      	add	r3, r1
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f934 	bl	800046c <__aeabi_i2d>
 8001204:	4603      	mov	r3, r0
 8001206:	460c      	mov	r4, r1
 8001208:	e9c7 3404 	strd	r3, r4, [r7, #16]

	p = kp * def; //P制御
 800120c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001210:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001214:	f7ff f994 	bl	8000540 <__aeabi_dmul>
 8001218:	4603      	mov	r3, r0
 800121a:	460c      	mov	r4, r1
 800121c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	i += ki * def * DELTA_T; //I制御
 8001220:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001224:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001228:	f7ff f98a 	bl	8000540 <__aeabi_dmul>
 800122c:	4603      	mov	r3, r0
 800122e:	460c      	mov	r4, r1
 8001230:	4618      	mov	r0, r3
 8001232:	4621      	mov	r1, r4
 8001234:	a344      	add	r3, pc, #272	; (adr r3, 8001348 <lineTrace+0x1b0>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	f7ff f981 	bl	8000540 <__aeabi_dmul>
 800123e:	4603      	mov	r3, r0
 8001240:	460c      	mov	r4, r1
 8001242:	4618      	mov	r0, r3
 8001244:	4621      	mov	r1, r4
 8001246:	4b48      	ldr	r3, [pc, #288]	; (8001368 <lineTrace+0x1d0>)
 8001248:	e9d3 3400 	ldrd	r3, r4, [r3]
 800124c:	461a      	mov	r2, r3
 800124e:	4623      	mov	r3, r4
 8001250:	f7fe ffc0 	bl	80001d4 <__adddf3>
 8001254:	4603      	mov	r3, r0
 8001256:	460c      	mov	r4, r1
 8001258:	4a43      	ldr	r2, [pc, #268]	; (8001368 <lineTrace+0x1d0>)
 800125a:	e9c2 3400 	strd	r3, r4, [r2]
	d = kd * (def - pre_def) / DELTA_T; //D制御
 800125e:	4b43      	ldr	r3, [pc, #268]	; (800136c <lineTrace+0x1d4>)
 8001260:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001264:	461a      	mov	r2, r3
 8001266:	4623      	mov	r3, r4
 8001268:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800126c:	f7fe ffb0 	bl	80001d0 <__aeabi_dsub>
 8001270:	4603      	mov	r3, r0
 8001272:	460c      	mov	r4, r1
 8001274:	4618      	mov	r0, r3
 8001276:	4621      	mov	r1, r4
 8001278:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800127c:	f7ff f960 	bl	8000540 <__aeabi_dmul>
 8001280:	4603      	mov	r3, r0
 8001282:	460c      	mov	r4, r1
 8001284:	4618      	mov	r0, r3
 8001286:	4621      	mov	r1, r4
 8001288:	a32f      	add	r3, pc, #188	; (adr r3, 8001348 <lineTrace+0x1b0>)
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	f7ff fa81 	bl	8000794 <__aeabi_ddiv>
 8001292:	4603      	mov	r3, r0
 8001294:	460c      	mov	r4, r1
 8001296:	e9c7 3400 	strd	r3, r4, [r7]

	motor_L = ( p + i + d );
 800129a:	4b33      	ldr	r3, [pc, #204]	; (8001368 <lineTrace+0x1d0>)
 800129c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012a4:	f7fe ff96 	bl	80001d4 <__adddf3>
 80012a8:	4603      	mov	r3, r0
 80012aa:	460c      	mov	r4, r1
 80012ac:	4618      	mov	r0, r3
 80012ae:	4621      	mov	r1, r4
 80012b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012b4:	f7fe ff8e 	bl	80001d4 <__adddf3>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	4618      	mov	r0, r3
 80012be:	4621      	mov	r1, r4
 80012c0:	f7ff fb50 	bl	8000964 <__aeabi_d2iz>
 80012c4:	4603      	mov	r3, r0
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	4b29      	ldr	r3, [pc, #164]	; (8001370 <lineTrace+0x1d8>)
 80012ca:	801a      	strh	r2, [r3, #0]
	motor_R = -( p + i + d );
 80012cc:	4b26      	ldr	r3, [pc, #152]	; (8001368 <lineTrace+0x1d0>)
 80012ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012d6:	f7fe ff7d 	bl	80001d4 <__adddf3>
 80012da:	4603      	mov	r3, r0
 80012dc:	460c      	mov	r4, r1
 80012de:	4618      	mov	r0, r3
 80012e0:	4621      	mov	r1, r4
 80012e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012e6:	f7fe ff75 	bl	80001d4 <__adddf3>
 80012ea:	4603      	mov	r3, r0
 80012ec:	460c      	mov	r4, r1
 80012ee:	461d      	mov	r5, r3
 80012f0:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 80012f4:	4628      	mov	r0, r5
 80012f6:	4631      	mov	r1, r6
 80012f8:	f7ff fb34 	bl	8000964 <__aeabi_d2iz>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b21a      	sxth	r2, r3
 8001300:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <lineTrace+0x1dc>)
 8001302:	801a      	strh	r2, [r3, #0]

	pre_def = def;
 8001304:	4a19      	ldr	r2, [pc, #100]	; (800136c <lineTrace+0x1d4>)
 8001306:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800130a:	e9c2 3400 	strd	r3, r4, [r2]

	mon_def = def;
 800130e:	4a1a      	ldr	r2, [pc, #104]	; (8001378 <lineTrace+0x1e0>)
 8001310:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001314:	e9c2 3400 	strd	r3, r4, [r2]
	mon_pid = p + i + d;
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <lineTrace+0x1d0>)
 800131a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800131e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001322:	f7fe ff57 	bl	80001d4 <__adddf3>
 8001326:	4603      	mov	r3, r0
 8001328:	460c      	mov	r4, r1
 800132a:	4618      	mov	r0, r3
 800132c:	4621      	mov	r1, r4
 800132e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001332:	f7fe ff4f 	bl	80001d4 <__adddf3>
 8001336:	4603      	mov	r3, r0
 8001338:	460c      	mov	r4, r1
 800133a:	4a10      	ldr	r2, [pc, #64]	; (800137c <lineTrace+0x1e4>)
 800133c:	e9c2 3400 	strd	r3, r4, [r2]

}
 8001340:	bf00      	nop
 8001342:	3734      	adds	r7, #52	; 0x34
 8001344:	46bd      	mov	sp, r7
 8001346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001348:	d2f1a9fc 	.word	0xd2f1a9fc
 800134c:	3f50624d 	.word	0x3f50624d
 8001350:	20000118 	.word	0x20000118
 8001354:	20000122 	.word	0x20000122
 8001358:	20000126 	.word	0x20000126
 800135c:	200000b8 	.word	0x200000b8
 8001360:	2000011c 	.word	0x2000011c
 8001364:	20000124 	.word	0x20000124
 8001368:	200000a8 	.word	0x200000a8
 800136c:	200000b0 	.word	0x200000b0
 8001370:	2000011a 	.word	0x2000011a
 8001374:	20000108 	.word	0x20000108
 8001378:	20000100 	.word	0x20000100
 800137c:	20000110 	.word	0x20000110
 8001380:	9999999a 	.word	0x9999999a
 8001384:	3fd99999 	.word	0x3fd99999

08001388 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0e      	ldr	r2, [pc, #56]	; (80013d0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d10a      	bne.n	80013b0 <HAL_TIM_PeriodElapsedCallback+0x28>
		timer++;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3301      	adds	r3, #1
 80013a0:	4a0c      	ldr	r2, [pc, #48]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80013a2:	6013      	str	r3, [r2, #0]
		motorSet();
 80013a4:	f7ff fc86 	bl	8000cb4 <motorSet>
		getAnalogsensor();
 80013a8:	f7ff fdac 	bl	8000f04 <getAnalogsensor>
		lineTrace();
 80013ac:	f7ff fef4 	bl	8001198 <lineTrace>
   }
   if(htim->Instance == TIM7){
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d106      	bne.n	80013c8 <HAL_TIM_PeriodElapsedCallback+0x40>
       timer1++;
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	3301      	adds	r3, #1
 80013c0:	4a06      	ldr	r2, [pc, #24]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80013c2:	6013      	str	r3, [r2, #0]
       storeAdBuffer();
 80013c4:	f7ff fd44 	bl	8000e50 <storeAdBuffer>
   }
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40001000 	.word	0x40001000
 80013d4:	20000140 	.word	0x20000140
 80013d8:	40001400 	.word	0x40001400
 80013dc:	20000398 	.word	0x20000398

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e4:	f001 f99a 	bl	800271c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e8:	f000 f896 	bl	8001518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ec:	f000 fd10 	bl	8001e10 <MX_GPIO_Init>
  MX_DMA_Init();
 80013f0:	f000 fcee 	bl	8001dd0 <MX_DMA_Init>
  MX_ADC1_Init();
 80013f4:	f000 f8fa 	bl	80015ec <MX_ADC1_Init>
  MX_I2C1_Init();
 80013f8:	f000 f9e4 	bl	80017c4 <MX_I2C1_Init>
  MX_TIM2_Init();
 80013fc:	f000 fa46 	bl	800188c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001400:	f000 fab2 	bl	8001968 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001404:	f000 fb04 	bl	8001a10 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001408:	f000 fbc0 	bl	8001b8c <MX_TIM8_Init>
  MX_SPI3_Init();
 800140c:	f000 fa08 	bl	8001820 <MX_SPI3_Init>
  MX_TIM12_Init();
 8001410:	f000 fc64 	bl	8001cdc <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001414:	f000 fcb2 	bl	8001d7c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001418:	f000 fb4e 	bl	8001ab8 <MX_TIM6_Init>
  MX_TIM7_Init();
 800141c:	f000 fb82 	bl	8001b24 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */


  while(1){
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0) {
 8001420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001424:	4835      	ldr	r0, [pc, #212]	; (80014fc <main+0x11c>)
 8001426:	f002 fc1b 	bl	8003c60 <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f7      	bne.n	8001420 <main+0x40>
		  HAL_Delay(500);
 8001430:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001434:	f001 f9e4 	bl	8002800 <HAL_Delay>
		  break;
 8001438:	bf00      	nop
	  }
  }

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800143a:	2100      	movs	r1, #0
 800143c:	4830      	ldr	r0, [pc, #192]	; (8001500 <main+0x120>)
 800143e:	f003 fa93 	bl	8004968 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001442:	2104      	movs	r1, #4
 8001444:	482e      	ldr	r0, [pc, #184]	; (8001500 <main+0x120>)
 8001446:	f003 fa8f 	bl	8004968 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800144a:	2108      	movs	r1, #8
 800144c:	482c      	ldr	r0, [pc, #176]	; (8001500 <main+0x120>)
 800144e:	f003 fa8b 	bl	8004968 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001452:	210c      	movs	r1, #12
 8001454:	482a      	ldr	r0, [pc, #168]	; (8001500 <main+0x120>)
 8001456:	f003 fa87 	bl	8004968 <HAL_TIM_PWM_Start>

  //motor driver wakeup
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, MAX_COUNTER_PERIOD);
 800145a:	4b29      	ldr	r3, [pc, #164]	; (8001500 <main+0x120>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f240 628f 	movw	r2, #1679	; 0x68f
 8001462:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, MAX_COUNTER_PERIOD);
 8001464:	4b26      	ldr	r3, [pc, #152]	; (8001500 <main+0x120>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f240 628f 	movw	r2, #1679	; 0x68f
 800146c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, MAX_COUNTER_PERIOD);
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <main+0x120>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f240 628f 	movw	r2, #1679	; 0x68f
 8001476:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, MAX_COUNTER_PERIOD);
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <main+0x120>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f240 628f 	movw	r2, #1679	; 0x68f
 8001480:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_Delay(500);
 8001482:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001486:	f001 f9bb 	bl	8002800 <HAL_Delay>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog, LINESENSOR_ADC_NUM);
 800148a:	220c      	movs	r2, #12
 800148c:	491d      	ldr	r1, [pc, #116]	; (8001504 <main+0x124>)
 800148e:	481e      	ldr	r0, [pc, #120]	; (8001508 <main+0x128>)
 8001490:	f001 fa1c 	bl	80028cc <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim6);
 8001494:	481d      	ldr	r0, [pc, #116]	; (800150c <main+0x12c>)
 8001496:	f003 fa18 	bl	80048ca <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800149a:	481d      	ldr	r0, [pc, #116]	; (8001510 <main+0x130>)
 800149c:	f003 fa15 	bl	80048ca <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //LED
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a6:	481b      	ldr	r0, [pc, #108]	; (8001514 <main+0x134>)
 80014a8:	f002 fbf2 	bl	8003c90 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80014ac:	2201      	movs	r2, #1
 80014ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014b2:	4818      	ldr	r0, [pc, #96]	; (8001514 <main+0x134>)
 80014b4:	f002 fbec 	bl	8003c90 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80014b8:	2201      	movs	r2, #1
 80014ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014be:	4815      	ldr	r0, [pc, #84]	; (8001514 <main+0x134>)
 80014c0:	f002 fbe6 	bl	8003c90 <HAL_GPIO_WritePin>

	  //motor_L = 900;
	  //motor_R = 500;
	  HAL_Delay(1000);
 80014c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014c8:	f001 f99a 	bl	8002800 <HAL_Delay>

	  //LED
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d2:	4810      	ldr	r0, [pc, #64]	; (8001514 <main+0x134>)
 80014d4:	f002 fbdc 	bl	8003c90 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014de:	480d      	ldr	r0, [pc, #52]	; (8001514 <main+0x134>)
 80014e0:	f002 fbd6 	bl	8003c90 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ea:	480a      	ldr	r0, [pc, #40]	; (8001514 <main+0x134>)
 80014ec:	f002 fbd0 	bl	8003c90 <HAL_GPIO_WritePin>

	  HAL_Delay(1000);
 80014f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f4:	f001 f984 	bl	8002800 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80014f8:	e7d2      	b.n	80014a0 <main+0xc0>
 80014fa:	bf00      	nop
 80014fc:	40020000 	.word	0x40020000
 8001500:	200000bc 	.word	0x200000bc
 8001504:	20000128 	.word	0x20000128
 8001508:	20000270 	.word	0x20000270
 800150c:	20000358 	.word	0x20000358
 8001510:	2000041c 	.word	0x2000041c
 8001514:	40020800 	.word	0x40020800

08001518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b094      	sub	sp, #80	; 0x50
 800151c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151e:	f107 0320 	add.w	r3, r7, #32
 8001522:	2230      	movs	r2, #48	; 0x30
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f004 fc2a 	bl	8005d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <SystemClock_Config+0xcc>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	4a27      	ldr	r2, [pc, #156]	; (80015e4 <SystemClock_Config+0xcc>)
 8001546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154a:	6413      	str	r3, [r2, #64]	; 0x40
 800154c:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <SystemClock_Config+0xcc>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <SystemClock_Config+0xd0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <SystemClock_Config+0xd0>)
 8001562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <SystemClock_Config+0xd0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001574:	2301      	movs	r3, #1
 8001576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157e:	2302      	movs	r3, #2
 8001580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001588:	2306      	movs	r3, #6
 800158a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800158c:	23a8      	movs	r3, #168	; 0xa8
 800158e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001590:	2302      	movs	r3, #2
 8001592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001594:	2307      	movs	r3, #7
 8001596:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001598:	f107 0320 	add.w	r3, r7, #32
 800159c:	4618      	mov	r0, r3
 800159e:	f002 fcc9 	bl	8003f34 <HAL_RCC_OscConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015a8:	f000 fcc4 	bl	8001f34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ac:	230f      	movs	r3, #15
 80015ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b0:	2302      	movs	r3, #2
 80015b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	2105      	movs	r1, #5
 80015ca:	4618      	mov	r0, r3
 80015cc:	f002 ff22 	bl	8004414 <HAL_RCC_ClockConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015d6:	f000 fcad 	bl	8001f34 <Error_Handler>
  }
}
 80015da:	bf00      	nop
 80015dc:	3750      	adds	r7, #80	; 0x50
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40007000 	.word	0x40007000

080015ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015f2:	463b      	mov	r3, r7
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015fe:	4b6e      	ldr	r3, [pc, #440]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 8001600:	4a6e      	ldr	r2, [pc, #440]	; (80017bc <MX_ADC1_Init+0x1d0>)
 8001602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001604:	4b6c      	ldr	r3, [pc, #432]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 8001606:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800160a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800160c:	4b6a      	ldr	r3, [pc, #424]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001612:	4b69      	ldr	r3, [pc, #420]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 8001614:	2201      	movs	r2, #1
 8001616:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001618:	4b67      	ldr	r3, [pc, #412]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 800161a:	2201      	movs	r2, #1
 800161c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800161e:	4b66      	ldr	r3, [pc, #408]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001626:	4b64      	ldr	r3, [pc, #400]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 8001628:	2200      	movs	r2, #0
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800162c:	4b62      	ldr	r3, [pc, #392]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 800162e:	4a64      	ldr	r2, [pc, #400]	; (80017c0 <MX_ADC1_Init+0x1d4>)
 8001630:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001632:	4b61      	ldr	r3, [pc, #388]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 8001638:	4b5f      	ldr	r3, [pc, #380]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 800163a:	220c      	movs	r2, #12
 800163c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800163e:	4b5e      	ldr	r3, [pc, #376]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001646:	4b5c      	ldr	r3, [pc, #368]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 8001648:	2201      	movs	r2, #1
 800164a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800164c:	485a      	ldr	r0, [pc, #360]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 800164e:	f001 f8f9 	bl	8002844 <HAL_ADC_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001658:	f000 fc6c 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001660:	2301      	movs	r3, #1
 8001662:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001664:	2304      	movs	r3, #4
 8001666:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001668:	463b      	mov	r3, r7
 800166a:	4619      	mov	r1, r3
 800166c:	4852      	ldr	r0, [pc, #328]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 800166e:	f001 fa3d 	bl	8002aec <HAL_ADC_ConfigChannel>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001678:	f000 fc5c 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800167c:	2301      	movs	r3, #1
 800167e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001680:	2302      	movs	r3, #2
 8001682:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	4619      	mov	r1, r3
 8001688:	484b      	ldr	r0, [pc, #300]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 800168a:	f001 fa2f 	bl	8002aec <HAL_ADC_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001694:	f000 fc4e 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001698:	2302      	movs	r3, #2
 800169a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800169c:	2303      	movs	r3, #3
 800169e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016a0:	463b      	mov	r3, r7
 80016a2:	4619      	mov	r1, r3
 80016a4:	4844      	ldr	r0, [pc, #272]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 80016a6:	f001 fa21 	bl	8002aec <HAL_ADC_ConfigChannel>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80016b0:	f000 fc40 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80016b4:	2303      	movs	r3, #3
 80016b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80016b8:	2304      	movs	r3, #4
 80016ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016bc:	463b      	mov	r3, r7
 80016be:	4619      	mov	r1, r3
 80016c0:	483d      	ldr	r0, [pc, #244]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 80016c2:	f001 fa13 	bl	8002aec <HAL_ADC_ConfigChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80016cc:	f000 fc32 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016d0:	2304      	movs	r3, #4
 80016d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80016d4:	2305      	movs	r3, #5
 80016d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d8:	463b      	mov	r3, r7
 80016da:	4619      	mov	r1, r3
 80016dc:	4836      	ldr	r0, [pc, #216]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 80016de:	f001 fa05 	bl	8002aec <HAL_ADC_ConfigChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80016e8:	f000 fc24 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80016ec:	2305      	movs	r3, #5
 80016ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80016f0:	2306      	movs	r3, #6
 80016f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016f4:	463b      	mov	r3, r7
 80016f6:	4619      	mov	r1, r3
 80016f8:	482f      	ldr	r0, [pc, #188]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 80016fa:	f001 f9f7 	bl	8002aec <HAL_ADC_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001704:	f000 fc16 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001708:	2306      	movs	r3, #6
 800170a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800170c:	2307      	movs	r3, #7
 800170e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001710:	463b      	mov	r3, r7
 8001712:	4619      	mov	r1, r3
 8001714:	4828      	ldr	r0, [pc, #160]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 8001716:	f001 f9e9 	bl	8002aec <HAL_ADC_ConfigChannel>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001720:	f000 fc08 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001724:	2307      	movs	r3, #7
 8001726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001728:	2308      	movs	r3, #8
 800172a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800172c:	463b      	mov	r3, r7
 800172e:	4619      	mov	r1, r3
 8001730:	4821      	ldr	r0, [pc, #132]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 8001732:	f001 f9db 	bl	8002aec <HAL_ADC_ConfigChannel>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800173c:	f000 fbfa 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001740:	2308      	movs	r3, #8
 8001742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001744:	2309      	movs	r3, #9
 8001746:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001748:	463b      	mov	r3, r7
 800174a:	4619      	mov	r1, r3
 800174c:	481a      	ldr	r0, [pc, #104]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 800174e:	f001 f9cd 	bl	8002aec <HAL_ADC_ConfigChannel>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001758:	f000 fbec 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800175c:	2309      	movs	r3, #9
 800175e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001760:	230a      	movs	r3, #10
 8001762:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001764:	463b      	mov	r3, r7
 8001766:	4619      	mov	r1, r3
 8001768:	4813      	ldr	r0, [pc, #76]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 800176a:	f001 f9bf 	bl	8002aec <HAL_ADC_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001774:	f000 fbde 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001778:	230e      	movs	r3, #14
 800177a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800177c:	230b      	movs	r3, #11
 800177e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001780:	463b      	mov	r3, r7
 8001782:	4619      	mov	r1, r3
 8001784:	480c      	ldr	r0, [pc, #48]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 8001786:	f001 f9b1 	bl	8002aec <HAL_ADC_ConfigChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001790:	f000 fbd0 	bl	8001f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001794:	230f      	movs	r3, #15
 8001796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001798:	230c      	movs	r3, #12
 800179a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800179c:	463b      	mov	r3, r7
 800179e:	4619      	mov	r1, r3
 80017a0:	4805      	ldr	r0, [pc, #20]	; (80017b8 <MX_ADC1_Init+0x1cc>)
 80017a2:	f001 f9a3 	bl	8002aec <HAL_ADC_ConfigChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 80017ac:	f000 fbc2 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000270 	.word	0x20000270
 80017bc:	40012000 	.word	0x40012000
 80017c0:	0f000001 	.word	0x0f000001

080017c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <MX_I2C1_Init+0x50>)
 80017ca:	4a13      	ldr	r2, [pc, #76]	; (8001818 <MX_I2C1_Init+0x54>)
 80017cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_I2C1_Init+0x50>)
 80017d0:	4a12      	ldr	r2, [pc, #72]	; (800181c <MX_I2C1_Init+0x58>)
 80017d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <MX_I2C1_Init+0x50>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_I2C1_Init+0x50>)
 80017dc:	2200      	movs	r2, #0
 80017de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_I2C1_Init+0x50>)
 80017e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <MX_I2C1_Init+0x50>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_I2C1_Init+0x50>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <MX_I2C1_Init+0x50>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_I2C1_Init+0x50>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001800:	4804      	ldr	r0, [pc, #16]	; (8001814 <MX_I2C1_Init+0x50>)
 8001802:	f002 fa5f 	bl	8003cc4 <HAL_I2C_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800180c:	f000 fb92 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000184 	.word	0x20000184
 8001818:	40005400 	.word	0x40005400
 800181c:	000186a0 	.word	0x000186a0

08001820 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001824:	4b17      	ldr	r3, [pc, #92]	; (8001884 <MX_SPI3_Init+0x64>)
 8001826:	4a18      	ldr	r2, [pc, #96]	; (8001888 <MX_SPI3_Init+0x68>)
 8001828:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800182a:	4b16      	ldr	r3, [pc, #88]	; (8001884 <MX_SPI3_Init+0x64>)
 800182c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001830:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <MX_SPI3_Init+0x64>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <MX_SPI3_Init+0x64>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <MX_SPI3_Init+0x64>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <MX_SPI3_Init+0x64>)
 8001846:	2200      	movs	r2, #0
 8001848:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <MX_SPI3_Init+0x64>)
 800184c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001850:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <MX_SPI3_Init+0x64>)
 8001854:	2200      	movs	r2, #0
 8001856:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <MX_SPI3_Init+0x64>)
 800185a:	2200      	movs	r2, #0
 800185c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <MX_SPI3_Init+0x64>)
 8001860:	2200      	movs	r2, #0
 8001862:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <MX_SPI3_Init+0x64>)
 8001866:	2200      	movs	r2, #0
 8001868:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <MX_SPI3_Init+0x64>)
 800186c:	220a      	movs	r2, #10
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001870:	4804      	ldr	r0, [pc, #16]	; (8001884 <MX_SPI3_Init+0x64>)
 8001872:	f002 ff9b 	bl	80047ac <HAL_SPI_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800187c:	f000 fb5a 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000218 	.word	0x20000218
 8001888:	40003c00 	.word	0x40003c00

0800188c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	; 0x28
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001892:	f107 0320 	add.w	r3, r7, #32
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]
 80018aa:	615a      	str	r2, [r3, #20]
 80018ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018ae:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <MX_TIM2_Init+0xd8>)
 80018b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018b6:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <MX_TIM2_Init+0xd8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018bc:	4b29      	ldr	r3, [pc, #164]	; (8001964 <MX_TIM2_Init+0xd8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018c2:	4b28      	ldr	r3, [pc, #160]	; (8001964 <MX_TIM2_Init+0xd8>)
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295
 80018c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <MX_TIM2_Init+0xd8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d0:	4b24      	ldr	r3, [pc, #144]	; (8001964 <MX_TIM2_Init+0xd8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018d6:	4823      	ldr	r0, [pc, #140]	; (8001964 <MX_TIM2_Init+0xd8>)
 80018d8:	f003 f81b 	bl	8004912 <HAL_TIM_PWM_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80018e2:	f000 fb27 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ee:	f107 0320 	add.w	r3, r7, #32
 80018f2:	4619      	mov	r1, r3
 80018f4:	481b      	ldr	r0, [pc, #108]	; (8001964 <MX_TIM2_Init+0xd8>)
 80018f6:	f003 fd73 	bl	80053e0 <HAL_TIMEx_MasterConfigSynchronization>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001900:	f000 fb18 	bl	8001f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001904:	2360      	movs	r3, #96	; 0x60
 8001906:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	2200      	movs	r2, #0
 8001918:	4619      	mov	r1, r3
 800191a:	4812      	ldr	r0, [pc, #72]	; (8001964 <MX_TIM2_Init+0xd8>)
 800191c:	f003 f9fc 	bl	8004d18 <HAL_TIM_PWM_ConfigChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001926:	f000 fb05 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	2208      	movs	r2, #8
 800192e:	4619      	mov	r1, r3
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <MX_TIM2_Init+0xd8>)
 8001932:	f003 f9f1 	bl	8004d18 <HAL_TIM_PWM_ConfigChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800193c:	f000 fafa 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	220c      	movs	r2, #12
 8001944:	4619      	mov	r1, r3
 8001946:	4807      	ldr	r0, [pc, #28]	; (8001964 <MX_TIM2_Init+0xd8>)
 8001948:	f003 f9e6 	bl	8004d18 <HAL_TIM_PWM_ConfigChannel>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001952:	f000 faef 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <MX_TIM2_Init+0xd8>)
 8001958:	f000 fd66 	bl	8002428 <HAL_TIM_MspPostInit>

}
 800195c:	bf00      	nop
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	2000039c 	.word	0x2000039c

08001968 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08c      	sub	sp, #48	; 0x30
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	2224      	movs	r2, #36	; 0x24
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f004 fa02 	bl	8005d80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001984:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <MX_TIM3_Init+0xa0>)
 8001986:	4a21      	ldr	r2, [pc, #132]	; (8001a0c <MX_TIM3_Init+0xa4>)
 8001988:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800198a:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <MX_TIM3_Init+0xa0>)
 800198c:	2200      	movs	r2, #0
 800198e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001990:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <MX_TIM3_Init+0xa0>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001996:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <MX_TIM3_Init+0xa0>)
 8001998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800199c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199e:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <MX_TIM3_Init+0xa0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <MX_TIM3_Init+0xa0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80019aa:	2301      	movs	r3, #1
 80019ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019b2:	2301      	movs	r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019c2:	2301      	movs	r3, #1
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019c6:	2300      	movs	r3, #0
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	4619      	mov	r1, r3
 80019d4:	480c      	ldr	r0, [pc, #48]	; (8001a08 <MX_TIM3_Init+0xa0>)
 80019d6:	f003 f805 	bl	80049e4 <HAL_TIM_Encoder_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80019e0:	f000 faa8 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_TIM3_Init+0xa0>)
 80019f2:	f003 fcf5 	bl	80053e0 <HAL_TIMEx_MasterConfigSynchronization>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80019fc:	f000 fa9a 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	3730      	adds	r7, #48	; 0x30
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200001d8 	.word	0x200001d8
 8001a0c:	40000400 	.word	0x40000400

08001a10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08c      	sub	sp, #48	; 0x30
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	2224      	movs	r2, #36	; 0x24
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f004 f9ae 	bl	8005d80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a2c:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <MX_TIM4_Init+0xa0>)
 8001a2e:	4a21      	ldr	r2, [pc, #132]	; (8001ab4 <MX_TIM4_Init+0xa4>)
 8001a30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a32:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <MX_TIM4_Init+0xa0>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <MX_TIM4_Init+0xa0>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <MX_TIM4_Init+0xa0>)
 8001a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <MX_TIM4_Init+0xa0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <MX_TIM4_Init+0xa0>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <MX_TIM4_Init+0xa0>)
 8001a7e:	f002 ffb1 	bl	80049e4 <HAL_TIM_Encoder_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001a88:	f000 fa54 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_TIM4_Init+0xa0>)
 8001a9a:	f003 fca1 	bl	80053e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001aa4:	f000 fa46 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	3730      	adds	r7, #48	; 0x30
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000144 	.word	0x20000144
 8001ab4:	40000800 	.word	0x40000800

08001ab8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001abe:	463b      	mov	r3, r7
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <MX_TIM6_Init+0x64>)
 8001ac8:	4a15      	ldr	r2, [pc, #84]	; (8001b20 <MX_TIM6_Init+0x68>)
 8001aca:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 41;
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <MX_TIM6_Init+0x64>)
 8001ace:	2229      	movs	r2, #41	; 0x29
 8001ad0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <MX_TIM6_Init+0x64>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8001ad8:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <MX_TIM6_Init+0x64>)
 8001ada:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001ade:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <MX_TIM6_Init+0x64>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ae6:	480d      	ldr	r0, [pc, #52]	; (8001b1c <MX_TIM6_Init+0x64>)
 8001ae8:	f002 fec4 	bl	8004874 <HAL_TIM_Base_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001af2:	f000 fa1f 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001afe:	463b      	mov	r3, r7
 8001b00:	4619      	mov	r1, r3
 8001b02:	4806      	ldr	r0, [pc, #24]	; (8001b1c <MX_TIM6_Init+0x64>)
 8001b04:	f003 fc6c 	bl	80053e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001b0e:	f000 fa11 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000358 	.word	0x20000358
 8001b20:	40001000 	.word	0x40001000

08001b24 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <MX_TIM7_Init+0x60>)
 8001b34:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <MX_TIM7_Init+0x64>)
 8001b36:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 41;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <MX_TIM7_Init+0x60>)
 8001b3a:	2229      	movs	r2, #41	; 0x29
 8001b3c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MX_TIM7_Init+0x60>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 199;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_TIM7_Init+0x60>)
 8001b46:	22c7      	movs	r2, #199	; 0xc7
 8001b48:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <MX_TIM7_Init+0x60>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <MX_TIM7_Init+0x60>)
 8001b52:	f002 fe8f 	bl	8004874 <HAL_TIM_Base_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8001b5c:	f000 f9ea 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b60:	2300      	movs	r3, #0
 8001b62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001b68:	463b      	mov	r3, r7
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4805      	ldr	r0, [pc, #20]	; (8001b84 <MX_TIM7_Init+0x60>)
 8001b6e:	f003 fc37 	bl	80053e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8001b78:	f000 f9dc 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	2000041c 	.word	0x2000041c
 8001b88:	40001400 	.word	0x40001400

08001b8c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b092      	sub	sp, #72	; 0x48
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
 8001bac:	615a      	str	r2, [r3, #20]
 8001bae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f004 f8e2 	bl	8005d80 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001bbc:	4b45      	ldr	r3, [pc, #276]	; (8001cd4 <MX_TIM8_Init+0x148>)
 8001bbe:	4a46      	ldr	r2, [pc, #280]	; (8001cd8 <MX_TIM8_Init+0x14c>)
 8001bc0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001bc2:	4b44      	ldr	r3, [pc, #272]	; (8001cd4 <MX_TIM8_Init+0x148>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc8:	4b42      	ldr	r3, [pc, #264]	; (8001cd4 <MX_TIM8_Init+0x148>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8001bce:	4b41      	ldr	r3, [pc, #260]	; (8001cd4 <MX_TIM8_Init+0x148>)
 8001bd0:	f240 628f 	movw	r2, #1679	; 0x68f
 8001bd4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd6:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <MX_TIM8_Init+0x148>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001bdc:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <MX_TIM8_Init+0x148>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be2:	4b3c      	ldr	r3, [pc, #240]	; (8001cd4 <MX_TIM8_Init+0x148>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001be8:	483a      	ldr	r0, [pc, #232]	; (8001cd4 <MX_TIM8_Init+0x148>)
 8001bea:	f002 fe92 	bl	8004912 <HAL_TIM_PWM_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001bf4:	f000 f99e 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c04:	4619      	mov	r1, r3
 8001c06:	4833      	ldr	r0, [pc, #204]	; (8001cd4 <MX_TIM8_Init+0x148>)
 8001c08:	f003 fbea 	bl	80053e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001c12:	f000 f98f 	bl	8001f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c16:	2360      	movs	r3, #96	; 0x60
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c22:	2300      	movs	r3, #0
 8001c24:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c36:	2200      	movs	r2, #0
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4826      	ldr	r0, [pc, #152]	; (8001cd4 <MX_TIM8_Init+0x148>)
 8001c3c:	f003 f86c 	bl	8004d18 <HAL_TIM_PWM_ConfigChannel>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8001c46:	f000 f975 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4e:	2204      	movs	r2, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	4820      	ldr	r0, [pc, #128]	; (8001cd4 <MX_TIM8_Init+0x148>)
 8001c54:	f003 f860 	bl	8004d18 <HAL_TIM_PWM_ConfigChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8001c5e:	f000 f969 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	2208      	movs	r2, #8
 8001c68:	4619      	mov	r1, r3
 8001c6a:	481a      	ldr	r0, [pc, #104]	; (8001cd4 <MX_TIM8_Init+0x148>)
 8001c6c:	f003 f854 	bl	8004d18 <HAL_TIM_PWM_ConfigChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8001c76:	f000 f95d 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7e:	220c      	movs	r2, #12
 8001c80:	4619      	mov	r1, r3
 8001c82:	4814      	ldr	r0, [pc, #80]	; (8001cd4 <MX_TIM8_Init+0x148>)
 8001c84:	f003 f848 	bl	8004d18 <HAL_TIM_PWM_ConfigChannel>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8001c8e:	f000 f951 	bl	8001f34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001caa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4807      	ldr	r0, [pc, #28]	; (8001cd4 <MX_TIM8_Init+0x148>)
 8001cb6:	f003 fc0f 	bl	80054d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 8001cc0:	f000 f938 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001cc4:	4803      	ldr	r0, [pc, #12]	; (8001cd4 <MX_TIM8_Init+0x148>)
 8001cc6:	f000 fbaf 	bl	8002428 <HAL_TIM_MspPostInit>

}
 8001cca:	bf00      	nop
 8001ccc:	3748      	adds	r7, #72	; 0x48
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200000bc 	.word	0x200000bc
 8001cd8:	40010400 	.word	0x40010400

08001cdc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
 8001cf0:	615a      	str	r2, [r3, #20]
 8001cf2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <MX_TIM12_Init+0x98>)
 8001cf6:	4a20      	ldr	r2, [pc, #128]	; (8001d78 <MX_TIM12_Init+0x9c>)
 8001cf8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <MX_TIM12_Init+0x98>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d00:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <MX_TIM12_Init+0x98>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001d06:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <MX_TIM12_Init+0x98>)
 8001d08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d0c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <MX_TIM12_Init+0x98>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d14:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <MX_TIM12_Init+0x98>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001d1a:	4816      	ldr	r0, [pc, #88]	; (8001d74 <MX_TIM12_Init+0x98>)
 8001d1c:	f002 fdf9 	bl	8004912 <HAL_TIM_PWM_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001d26:	f000 f905 	bl	8001f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d2a:	2360      	movs	r3, #96	; 0x60
 8001d2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <MX_TIM12_Init+0x98>)
 8001d42:	f002 ffe9 	bl	8004d18 <HAL_TIM_PWM_ConfigChannel>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001d4c:	f000 f8f2 	bl	8001f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2204      	movs	r2, #4
 8001d54:	4619      	mov	r1, r3
 8001d56:	4807      	ldr	r0, [pc, #28]	; (8001d74 <MX_TIM12_Init+0x98>)
 8001d58:	f002 ffde 	bl	8004d18 <HAL_TIM_PWM_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001d62:	f000 f8e7 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001d66:	4803      	ldr	r0, [pc, #12]	; (8001d74 <MX_TIM12_Init+0x98>)
 8001d68:	f000 fb5e 	bl	8002428 <HAL_TIM_MspPostInit>

}
 8001d6c:	bf00      	nop
 8001d6e:	3720      	adds	r7, #32
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	200003dc 	.word	0x200003dc
 8001d78:	40001800 	.word	0x40001800

08001d7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <MX_USART1_UART_Init+0x4c>)
 8001d82:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <MX_USART1_UART_Init+0x50>)
 8001d84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <MX_USART1_UART_Init+0x4c>)
 8001d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <MX_USART1_UART_Init+0x4c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <MX_USART1_UART_Init+0x4c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <MX_USART1_UART_Init+0x4c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <MX_USART1_UART_Init+0x4c>)
 8001da2:	220c      	movs	r2, #12
 8001da4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <MX_USART1_UART_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <MX_USART1_UART_Init+0x4c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001db2:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <MX_USART1_UART_Init+0x4c>)
 8001db4:	f003 fbf6 	bl	80055a4 <HAL_UART_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dbe:	f000 f8b9 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200002b8 	.word	0x200002b8
 8001dcc:	40011000 	.word	0x40011000

08001dd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_DMA_Init+0x3c>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <MX_DMA_Init+0x3c>)
 8001de0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_DMA_Init+0x3c>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2100      	movs	r1, #0
 8001df6:	2038      	movs	r0, #56	; 0x38
 8001df8:	f001 f9f3 	bl	80031e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001dfc:	2038      	movs	r0, #56	; 0x38
 8001dfe:	f001 fa0c 	bl	800321a <HAL_NVIC_EnableIRQ>

}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800

08001e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	60da      	str	r2, [r3, #12]
 8001e24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	4b3e      	ldr	r3, [pc, #248]	; (8001f24 <MX_GPIO_Init+0x114>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a3d      	ldr	r2, [pc, #244]	; (8001f24 <MX_GPIO_Init+0x114>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b3b      	ldr	r3, [pc, #236]	; (8001f24 <MX_GPIO_Init+0x114>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <MX_GPIO_Init+0x114>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a36      	ldr	r2, [pc, #216]	; (8001f24 <MX_GPIO_Init+0x114>)
 8001e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b34      	ldr	r3, [pc, #208]	; (8001f24 <MX_GPIO_Init+0x114>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <MX_GPIO_Init+0x114>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a2f      	ldr	r2, [pc, #188]	; (8001f24 <MX_GPIO_Init+0x114>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b2d      	ldr	r3, [pc, #180]	; (8001f24 <MX_GPIO_Init+0x114>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <MX_GPIO_Init+0x114>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a28      	ldr	r2, [pc, #160]	; (8001f24 <MX_GPIO_Init+0x114>)
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <MX_GPIO_Init+0x114>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	603b      	str	r3, [r7, #0]
 8001e9a:	4b22      	ldr	r3, [pc, #136]	; (8001f24 <MX_GPIO_Init+0x114>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a21      	ldr	r2, [pc, #132]	; (8001f24 <MX_GPIO_Init+0x114>)
 8001ea0:	f043 0308 	orr.w	r3, r3, #8
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <MX_GPIO_Init+0x114>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001eb8:	481b      	ldr	r0, [pc, #108]	; (8001f28 <MX_GPIO_Init+0x118>)
 8001eba:	f001 fee9 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2104      	movs	r1, #4
 8001ec2:	481a      	ldr	r0, [pc, #104]	; (8001f2c <MX_GPIO_Init+0x11c>)
 8001ec4:	f001 fee4 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8001ec8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4811      	ldr	r0, [pc, #68]	; (8001f28 <MX_GPIO_Init+0x118>)
 8001ee2:	f001 fd23 	bl	800392c <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH2_Pin SWITCH1_Pin */
  GPIO_InitStruct.Pin = SWITCH2_Pin|SWITCH1_Pin;
 8001ee6:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	4619      	mov	r1, r3
 8001efa:	480d      	ldr	r0, [pc, #52]	; (8001f30 <MX_GPIO_Init+0x120>)
 8001efc:	f001 fd16 	bl	800392c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001f00:	2304      	movs	r3, #4
 8001f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f04:	2301      	movs	r3, #1
 8001f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	4619      	mov	r1, r3
 8001f16:	4805      	ldr	r0, [pc, #20]	; (8001f2c <MX_GPIO_Init+0x11c>)
 8001f18:	f001 fd08 	bl	800392c <HAL_GPIO_Init>

}
 8001f1c:	bf00      	nop
 8001f1e:	3728      	adds	r7, #40	; 0x28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	40020000 	.word	0x40020000

08001f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f38:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <Error_Handler+0x6>

08001f3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	4a0f      	ldr	r2, [pc, #60]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f50:	6453      	str	r3, [r2, #68]	; 0x44
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	603b      	str	r3, [r7, #0]
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a08      	ldr	r2, [pc, #32]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800

08001f8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	; 0x30
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a49      	ldr	r2, [pc, #292]	; (80020d0 <HAL_ADC_MspInit+0x144>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	f040 808c 	bne.w	80020c8 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61bb      	str	r3, [r7, #24]
 8001fb4:	4b47      	ldr	r3, [pc, #284]	; (80020d4 <HAL_ADC_MspInit+0x148>)
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb8:	4a46      	ldr	r2, [pc, #280]	; (80020d4 <HAL_ADC_MspInit+0x148>)
 8001fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbe:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc0:	4b44      	ldr	r3, [pc, #272]	; (80020d4 <HAL_ADC_MspInit+0x148>)
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <HAL_ADC_MspInit+0x148>)
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd4:	4a3f      	ldr	r2, [pc, #252]	; (80020d4 <HAL_ADC_MspInit+0x148>)
 8001fd6:	f043 0304 	orr.w	r3, r3, #4
 8001fda:	6313      	str	r3, [r2, #48]	; 0x30
 8001fdc:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <HAL_ADC_MspInit+0x148>)
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	4b39      	ldr	r3, [pc, #228]	; (80020d4 <HAL_ADC_MspInit+0x148>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	4a38      	ldr	r2, [pc, #224]	; (80020d4 <HAL_ADC_MspInit+0x148>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff8:	4b36      	ldr	r3, [pc, #216]	; (80020d4 <HAL_ADC_MspInit+0x148>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	4b32      	ldr	r3, [pc, #200]	; (80020d4 <HAL_ADC_MspInit+0x148>)
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	4a31      	ldr	r2, [pc, #196]	; (80020d4 <HAL_ADC_MspInit+0x148>)
 800200e:	f043 0302 	orr.w	r3, r3, #2
 8002012:	6313      	str	r3, [r2, #48]	; 0x30
 8002014:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <HAL_ADC_MspInit+0x148>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin|SIDE_MARKER1_Pin|SIDE_MARKER2_Pin|GPIO_PIN_4
 8002020:	233e      	movs	r3, #62	; 0x3e
 8002022:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002024:	2303      	movs	r3, #3
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202c:	f107 031c 	add.w	r3, r7, #28
 8002030:	4619      	mov	r1, r3
 8002032:	4829      	ldr	r0, [pc, #164]	; (80020d8 <HAL_ADC_MspInit+0x14c>)
 8002034:	f001 fc7a 	bl	800392c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002038:	23ff      	movs	r3, #255	; 0xff
 800203a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800203c:	2303      	movs	r3, #3
 800203e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	4619      	mov	r1, r3
 800204a:	4824      	ldr	r0, [pc, #144]	; (80020dc <HAL_ADC_MspInit+0x150>)
 800204c:	f001 fc6e 	bl	800392c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002050:	2303      	movs	r3, #3
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002054:	2303      	movs	r3, #3
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205c:	f107 031c 	add.w	r3, r7, #28
 8002060:	4619      	mov	r1, r3
 8002062:	481f      	ldr	r0, [pc, #124]	; (80020e0 <HAL_ADC_MspInit+0x154>)
 8002064:	f001 fc62 	bl	800392c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002068:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <HAL_ADC_MspInit+0x158>)
 800206a:	4a1f      	ldr	r2, [pc, #124]	; (80020e8 <HAL_ADC_MspInit+0x15c>)
 800206c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800206e:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <HAL_ADC_MspInit+0x158>)
 8002070:	2200      	movs	r2, #0
 8002072:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002074:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_ADC_MspInit+0x158>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800207a:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <HAL_ADC_MspInit+0x158>)
 800207c:	2200      	movs	r2, #0
 800207e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002080:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <HAL_ADC_MspInit+0x158>)
 8002082:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002086:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002088:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <HAL_ADC_MspInit+0x158>)
 800208a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800208e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_ADC_MspInit+0x158>)
 8002092:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002096:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_ADC_MspInit+0x158>)
 800209a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800209e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <HAL_ADC_MspInit+0x158>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020a6:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <HAL_ADC_MspInit+0x158>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020ac:	480d      	ldr	r0, [pc, #52]	; (80020e4 <HAL_ADC_MspInit+0x158>)
 80020ae:	f001 f8cf 	bl	8003250 <HAL_DMA_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80020b8:	f7ff ff3c 	bl	8001f34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a09      	ldr	r2, [pc, #36]	; (80020e4 <HAL_ADC_MspInit+0x158>)
 80020c0:	639a      	str	r2, [r3, #56]	; 0x38
 80020c2:	4a08      	ldr	r2, [pc, #32]	; (80020e4 <HAL_ADC_MspInit+0x158>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020c8:	bf00      	nop
 80020ca:	3730      	adds	r7, #48	; 0x30
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40012000 	.word	0x40012000
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40020800 	.word	0x40020800
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40020400 	.word	0x40020400
 80020e4:	200002f8 	.word	0x200002f8
 80020e8:	40026410 	.word	0x40026410

080020ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a19      	ldr	r2, [pc, #100]	; (8002170 <HAL_I2C_MspInit+0x84>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d12c      	bne.n	8002168 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_I2C_MspInit+0x88>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a17      	ldr	r2, [pc, #92]	; (8002174 <HAL_I2C_MspInit+0x88>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <HAL_I2C_MspInit+0x88>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800212a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800212e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002130:	2312      	movs	r3, #18
 8002132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002134:	2301      	movs	r3, #1
 8002136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800213c:	2304      	movs	r3, #4
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	480c      	ldr	r0, [pc, #48]	; (8002178 <HAL_I2C_MspInit+0x8c>)
 8002148:	f001 fbf0 	bl	800392c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <HAL_I2C_MspInit+0x88>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	4a07      	ldr	r2, [pc, #28]	; (8002174 <HAL_I2C_MspInit+0x88>)
 8002156:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800215a:	6413      	str	r3, [r2, #64]	; 0x40
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_I2C_MspInit+0x88>)
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002168:	bf00      	nop
 800216a:	3728      	adds	r7, #40	; 0x28
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40005400 	.word	0x40005400
 8002174:	40023800 	.word	0x40023800
 8002178:	40020400 	.word	0x40020400

0800217c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08a      	sub	sp, #40	; 0x28
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a19      	ldr	r2, [pc, #100]	; (8002200 <HAL_SPI_MspInit+0x84>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d12c      	bne.n	80021f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_SPI_MspInit+0x88>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	4a17      	ldr	r2, [pc, #92]	; (8002204 <HAL_SPI_MspInit+0x88>)
 80021a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ac:	6413      	str	r3, [r2, #64]	; 0x40
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_SPI_MspInit+0x88>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_SPI_MspInit+0x88>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a10      	ldr	r2, [pc, #64]	; (8002204 <HAL_SPI_MspInit+0x88>)
 80021c4:	f043 0304 	orr.w	r3, r3, #4
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <HAL_SPI_MspInit+0x88>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80021d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e4:	2303      	movs	r3, #3
 80021e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021e8:	2306      	movs	r3, #6
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4619      	mov	r1, r3
 80021f2:	4805      	ldr	r0, [pc, #20]	; (8002208 <HAL_SPI_MspInit+0x8c>)
 80021f4:	f001 fb9a 	bl	800392c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80021f8:	bf00      	nop
 80021fa:	3728      	adds	r7, #40	; 0x28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40003c00 	.word	0x40003c00
 8002204:	40023800 	.word	0x40023800
 8002208:	40020800 	.word	0x40020800

0800220c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800221c:	d10e      	bne.n	800223c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <HAL_TIM_PWM_MspInit+0x8c>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	4a1c      	ldr	r2, [pc, #112]	; (8002298 <HAL_TIM_PWM_MspInit+0x8c>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6413      	str	r3, [r2, #64]	; 0x40
 800222e:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <HAL_TIM_PWM_MspInit+0x8c>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800223a:	e026      	b.n	800228a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a16      	ldr	r2, [pc, #88]	; (800229c <HAL_TIM_PWM_MspInit+0x90>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d10e      	bne.n	8002264 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	4b13      	ldr	r3, [pc, #76]	; (8002298 <HAL_TIM_PWM_MspInit+0x8c>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <HAL_TIM_PWM_MspInit+0x8c>)
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	6453      	str	r3, [r2, #68]	; 0x44
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <HAL_TIM_PWM_MspInit+0x8c>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
}
 8002262:	e012      	b.n	800228a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <HAL_TIM_PWM_MspInit+0x94>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10d      	bne.n	800228a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <HAL_TIM_PWM_MspInit+0x8c>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4a08      	ldr	r2, [pc, #32]	; (8002298 <HAL_TIM_PWM_MspInit+0x8c>)
 8002278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_TIM_PWM_MspInit+0x8c>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
}
 800228a:	bf00      	nop
 800228c:	371c      	adds	r7, #28
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	40010400 	.word	0x40010400
 80022a0:	40001800 	.word	0x40001800

080022a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08c      	sub	sp, #48	; 0x30
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 031c 	add.w	r3, r7, #28
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a32      	ldr	r2, [pc, #200]	; (800238c <HAL_TIM_Encoder_MspInit+0xe8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d12c      	bne.n	8002320 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
 80022ca:	4b31      	ldr	r3, [pc, #196]	; (8002390 <HAL_TIM_Encoder_MspInit+0xec>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a30      	ldr	r2, [pc, #192]	; (8002390 <HAL_TIM_Encoder_MspInit+0xec>)
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b2e      	ldr	r3, [pc, #184]	; (8002390 <HAL_TIM_Encoder_MspInit+0xec>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	61bb      	str	r3, [r7, #24]
 80022e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	4b2a      	ldr	r3, [pc, #168]	; (8002390 <HAL_TIM_Encoder_MspInit+0xec>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a29      	ldr	r2, [pc, #164]	; (8002390 <HAL_TIM_Encoder_MspInit+0xec>)
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b27      	ldr	r3, [pc, #156]	; (8002390 <HAL_TIM_Encoder_MspInit+0xec>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENCODER1_A_Pin|ENCODER1_B_Pin;
 80022fe:	2330      	movs	r3, #48	; 0x30
 8002300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800230e:	2302      	movs	r3, #2
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002312:	f107 031c 	add.w	r3, r7, #28
 8002316:	4619      	mov	r1, r3
 8002318:	481e      	ldr	r0, [pc, #120]	; (8002394 <HAL_TIM_Encoder_MspInit+0xf0>)
 800231a:	f001 fb07 	bl	800392c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800231e:	e030      	b.n	8002382 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a1c      	ldr	r2, [pc, #112]	; (8002398 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d12b      	bne.n	8002382 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_TIM_Encoder_MspInit+0xec>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a17      	ldr	r2, [pc, #92]	; (8002390 <HAL_TIM_Encoder_MspInit+0xec>)
 8002334:	f043 0304 	orr.w	r3, r3, #4
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_TIM_Encoder_MspInit+0xec>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_TIM_Encoder_MspInit+0xec>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a10      	ldr	r2, [pc, #64]	; (8002390 <HAL_TIM_Encoder_MspInit+0xec>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <HAL_TIM_Encoder_MspInit+0xec>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 8002362:	23c0      	movs	r3, #192	; 0xc0
 8002364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	2300      	movs	r3, #0
 8002370:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002372:	2302      	movs	r3, #2
 8002374:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002376:	f107 031c 	add.w	r3, r7, #28
 800237a:	4619      	mov	r1, r3
 800237c:	4805      	ldr	r0, [pc, #20]	; (8002394 <HAL_TIM_Encoder_MspInit+0xf0>)
 800237e:	f001 fad5 	bl	800392c <HAL_GPIO_Init>
}
 8002382:	bf00      	nop
 8002384:	3730      	adds	r7, #48	; 0x30
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40000400 	.word	0x40000400
 8002390:	40023800 	.word	0x40023800
 8002394:	40020400 	.word	0x40020400
 8002398:	40000800 	.word	0x40000800

0800239c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1c      	ldr	r2, [pc, #112]	; (800241c <HAL_TIM_Base_MspInit+0x80>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d116      	bne.n	80023dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_TIM_Base_MspInit+0x84>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	4a1a      	ldr	r2, [pc, #104]	; (8002420 <HAL_TIM_Base_MspInit+0x84>)
 80023b8:	f043 0310 	orr.w	r3, r3, #16
 80023bc:	6413      	str	r3, [r2, #64]	; 0x40
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <HAL_TIM_Base_MspInit+0x84>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2100      	movs	r1, #0
 80023ce:	2036      	movs	r0, #54	; 0x36
 80023d0:	f000 ff07 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023d4:	2036      	movs	r0, #54	; 0x36
 80023d6:	f000 ff20 	bl	800321a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80023da:	e01a      	b.n	8002412 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a10      	ldr	r2, [pc, #64]	; (8002424 <HAL_TIM_Base_MspInit+0x88>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d115      	bne.n	8002412 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <HAL_TIM_Base_MspInit+0x84>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <HAL_TIM_Base_MspInit+0x84>)
 80023f0:	f043 0320 	orr.w	r3, r3, #32
 80023f4:	6413      	str	r3, [r2, #64]	; 0x40
 80023f6:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <HAL_TIM_Base_MspInit+0x84>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f003 0320 	and.w	r3, r3, #32
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2101      	movs	r1, #1
 8002406:	2037      	movs	r0, #55	; 0x37
 8002408:	f000 feeb 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800240c:	2037      	movs	r0, #55	; 0x37
 800240e:	f000 ff04 	bl	800321a <HAL_NVIC_EnableIRQ>
}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40001000 	.word	0x40001000
 8002420:	40023800 	.word	0x40023800
 8002424:	40001400 	.word	0x40001400

08002428 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08c      	sub	sp, #48	; 0x30
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 031c 	add.w	r3, r7, #28
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002448:	d13e      	bne.n	80024c8 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	4b45      	ldr	r3, [pc, #276]	; (8002564 <HAL_TIM_MspPostInit+0x13c>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a44      	ldr	r2, [pc, #272]	; (8002564 <HAL_TIM_MspPostInit+0x13c>)
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b42      	ldr	r3, [pc, #264]	; (8002564 <HAL_TIM_MspPostInit+0x13c>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	4b3e      	ldr	r3, [pc, #248]	; (8002564 <HAL_TIM_MspPostInit+0x13c>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a3d      	ldr	r2, [pc, #244]	; (8002564 <HAL_TIM_MspPostInit+0x13c>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b3b      	ldr	r3, [pc, #236]	; (8002564 <HAL_TIM_MspPostInit+0x13c>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = DRONE_MOTOR_PWM1_Pin|DRONE_MOTOR_PWM2_Pin;
 8002482:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002494:	2301      	movs	r3, #1
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002498:	f107 031c 	add.w	r3, r7, #28
 800249c:	4619      	mov	r1, r3
 800249e:	4832      	ldr	r0, [pc, #200]	; (8002568 <HAL_TIM_MspPostInit+0x140>)
 80024a0:	f001 fa44 	bl	800392c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FAN_MOTOR_PWM_Pin;
 80024a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024aa:	2302      	movs	r3, #2
 80024ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024b6:	2301      	movs	r3, #1
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(FAN_MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f107 031c 	add.w	r3, r7, #28
 80024be:	4619      	mov	r1, r3
 80024c0:	482a      	ldr	r0, [pc, #168]	; (800256c <HAL_TIM_MspPostInit+0x144>)
 80024c2:	f001 fa33 	bl	800392c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80024c6:	e048      	b.n	800255a <HAL_TIM_MspPostInit+0x132>
  else if(htim->Instance==TIM8)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a28      	ldr	r2, [pc, #160]	; (8002570 <HAL_TIM_MspPostInit+0x148>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d11f      	bne.n	8002512 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	4b23      	ldr	r3, [pc, #140]	; (8002564 <HAL_TIM_MspPostInit+0x13c>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a22      	ldr	r2, [pc, #136]	; (8002564 <HAL_TIM_MspPostInit+0x13c>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b20      	ldr	r3, [pc, #128]	; (8002564 <HAL_TIM_MspPostInit+0x13c>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DRIVE_MOTOR1_PWM2_Pin|DRIVE_MOTOR1_PWM1_Pin|DRIVE_MOTOR2_PWM2_Pin|DRIVE_MOTOR2_PWM1_Pin;
 80024ee:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80024f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002500:	2303      	movs	r3, #3
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002504:	f107 031c 	add.w	r3, r7, #28
 8002508:	4619      	mov	r1, r3
 800250a:	481a      	ldr	r0, [pc, #104]	; (8002574 <HAL_TIM_MspPostInit+0x14c>)
 800250c:	f001 fa0e 	bl	800392c <HAL_GPIO_Init>
}
 8002510:	e023      	b.n	800255a <HAL_TIM_MspPostInit+0x132>
  else if(htim->Instance==TIM12)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a18      	ldr	r2, [pc, #96]	; (8002578 <HAL_TIM_MspPostInit+0x150>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d11e      	bne.n	800255a <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	4b10      	ldr	r3, [pc, #64]	; (8002564 <HAL_TIM_MspPostInit+0x13c>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <HAL_TIM_MspPostInit+0x13c>)
 8002526:	f043 0302 	orr.w	r3, r3, #2
 800252a:	6313      	str	r3, [r2, #48]	; 0x30
 800252c:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <HAL_TIM_MspPostInit+0x13c>)
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DRONE_MOTOR_PWM4_Pin|DRONE_MOTOR_PWM3_Pin;
 8002538:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800253c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253e:	2302      	movs	r3, #2
 8002540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002546:	2300      	movs	r3, #0
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800254a:	2309      	movs	r3, #9
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254e:	f107 031c 	add.w	r3, r7, #28
 8002552:	4619      	mov	r1, r3
 8002554:	4804      	ldr	r0, [pc, #16]	; (8002568 <HAL_TIM_MspPostInit+0x140>)
 8002556:	f001 f9e9 	bl	800392c <HAL_GPIO_Init>
}
 800255a:	bf00      	nop
 800255c:	3730      	adds	r7, #48	; 0x30
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800
 8002568:	40020400 	.word	0x40020400
 800256c:	40020000 	.word	0x40020000
 8002570:	40010400 	.word	0x40010400
 8002574:	40020800 	.word	0x40020800
 8002578:	40001800 	.word	0x40001800

0800257c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	; 0x28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a19      	ldr	r2, [pc, #100]	; (8002600 <HAL_UART_MspInit+0x84>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d12c      	bne.n	80025f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <HAL_UART_MspInit+0x88>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a17      	ldr	r2, [pc, #92]	; (8002604 <HAL_UART_MspInit+0x88>)
 80025a8:	f043 0310 	orr.w	r3, r3, #16
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_UART_MspInit+0x88>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_UART_MspInit+0x88>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a10      	ldr	r2, [pc, #64]	; (8002604 <HAL_UART_MspInit+0x88>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_UART_MspInit+0x88>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e4:	2303      	movs	r3, #3
 80025e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025e8:	2307      	movs	r3, #7
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	4619      	mov	r1, r3
 80025f2:	4805      	ldr	r0, [pc, #20]	; (8002608 <HAL_UART_MspInit+0x8c>)
 80025f4:	f001 f99a 	bl	800392c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025f8:	bf00      	nop
 80025fa:	3728      	adds	r7, #40	; 0x28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40011000 	.word	0x40011000
 8002604:	40023800 	.word	0x40023800
 8002608:	40020000 	.word	0x40020000

0800260c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002610:	e7fe      	b.n	8002610 <NMI_Handler+0x4>

08002612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002616:	e7fe      	b.n	8002616 <HardFault_Handler+0x4>

08002618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800261c:	e7fe      	b.n	800261c <MemManage_Handler+0x4>

0800261e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002622:	e7fe      	b.n	8002622 <BusFault_Handler+0x4>

08002624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002628:	e7fe      	b.n	8002628 <UsageFault_Handler+0x4>

0800262a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002658:	f000 f8b2 	bl	80027c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800265c:	bf00      	nop
 800265e:	bd80      	pop	{r7, pc}

08002660 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <TIM6_DAC_IRQHandler+0x10>)
 8002666:	f002 fa4f 	bl	8004b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000358 	.word	0x20000358

08002674 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <TIM7_IRQHandler+0x10>)
 800267a:	f002 fa45 	bl	8004b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2000041c 	.word	0x2000041c

08002688 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <DMA2_Stream0_IRQHandler+0x10>)
 800268e:	f000 fee5 	bl	800345c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200002f8 	.word	0x200002f8

0800269c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <SystemInit+0x28>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <SystemInit+0x28>)
 80026a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <SystemInit+0x28>)
 80026b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026b6:	609a      	str	r2, [r3, #8]
#endif
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002700 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026ce:	e003      	b.n	80026d8 <LoopCopyDataInit>

080026d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026d6:	3104      	adds	r1, #4

080026d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026d8:	480b      	ldr	r0, [pc, #44]	; (8002708 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026da:	4b0c      	ldr	r3, [pc, #48]	; (800270c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026e0:	d3f6      	bcc.n	80026d0 <CopyDataInit>
  ldr  r2, =_sbss
 80026e2:	4a0b      	ldr	r2, [pc, #44]	; (8002710 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026e4:	e002      	b.n	80026ec <LoopFillZerobss>

080026e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026e8:	f842 3b04 	str.w	r3, [r2], #4

080026ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026f0:	d3f9      	bcc.n	80026e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026f2:	f7ff ffd3 	bl	800269c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026f6:	f003 fb1f 	bl	8005d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026fa:	f7fe fe71 	bl	80013e0 <main>
  bx  lr    
 80026fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002700:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002704:	08005dd8 	.word	0x08005dd8
  ldr  r0, =_sdata
 8002708:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800270c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002710:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002714:	20000460 	.word	0x20000460

08002718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002718:	e7fe      	b.n	8002718 <ADC_IRQHandler>
	...

0800271c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <HAL_Init+0x40>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0d      	ldr	r2, [pc, #52]	; (800275c <HAL_Init+0x40>)
 8002726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800272a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_Init+0x40>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0a      	ldr	r2, [pc, #40]	; (800275c <HAL_Init+0x40>)
 8002732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002736:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_Init+0x40>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a07      	ldr	r2, [pc, #28]	; (800275c <HAL_Init+0x40>)
 800273e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002742:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002744:	2003      	movs	r0, #3
 8002746:	f000 fd41 	bl	80031cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800274a:	2000      	movs	r0, #0
 800274c:	f000 f808 	bl	8002760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002750:	f7ff fbf4 	bl	8001f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40023c00 	.word	0x40023c00

08002760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_InitTick+0x54>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_InitTick+0x58>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	4619      	mov	r1, r3
 8002772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002776:	fbb3 f3f1 	udiv	r3, r3, r1
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fd59 	bl	8003236 <HAL_SYSTICK_Config>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e00e      	b.n	80027ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b0f      	cmp	r3, #15
 8002792:	d80a      	bhi.n	80027aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002794:	2200      	movs	r2, #0
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	f04f 30ff 	mov.w	r0, #4294967295
 800279c:	f000 fd21 	bl	80031e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a0:	4a06      	ldr	r2, [pc, #24]	; (80027bc <HAL_InitTick+0x5c>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	e000      	b.n	80027ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000000 	.word	0x20000000
 80027b8:	20000008 	.word	0x20000008
 80027bc:	20000004 	.word	0x20000004

080027c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_IncTick+0x20>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_IncTick+0x24>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4413      	add	r3, r2
 80027d0:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <HAL_IncTick+0x24>)
 80027d2:	6013      	str	r3, [r2, #0]
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	20000008 	.word	0x20000008
 80027e4:	2000045c 	.word	0x2000045c

080027e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return uwTick;
 80027ec:	4b03      	ldr	r3, [pc, #12]	; (80027fc <HAL_GetTick+0x14>)
 80027ee:	681b      	ldr	r3, [r3, #0]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	2000045c 	.word	0x2000045c

08002800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002808:	f7ff ffee 	bl	80027e8 <HAL_GetTick>
 800280c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002818:	d005      	beq.n	8002826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_Delay+0x40>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4413      	add	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002826:	bf00      	nop
 8002828:	f7ff ffde 	bl	80027e8 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	429a      	cmp	r2, r3
 8002836:	d8f7      	bhi.n	8002828 <HAL_Delay+0x28>
  {
  }
}
 8002838:	bf00      	nop
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000008 	.word	0x20000008

08002844 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e033      	b.n	80028c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff fb92 	bl	8001f8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	2b00      	cmp	r3, #0
 8002880:	d118      	bne.n	80028b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800288a:	f023 0302 	bic.w	r3, r3, #2
 800288e:	f043 0202 	orr.w	r2, r3, #2
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fa4a 	bl	8002d30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f023 0303 	bic.w	r3, r3, #3
 80028aa:	f043 0201 	orr.w	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
 80028b2:	e001      	b.n	80028b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_ADC_Start_DMA+0x1e>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e0cc      	b.n	8002a84 <HAL_ADC_Start_DMA+0x1b8>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d018      	beq.n	8002932 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002910:	4b5e      	ldr	r3, [pc, #376]	; (8002a8c <HAL_ADC_Start_DMA+0x1c0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a5e      	ldr	r2, [pc, #376]	; (8002a90 <HAL_ADC_Start_DMA+0x1c4>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	0c9a      	lsrs	r2, r3, #18
 800291c:	4613      	mov	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002924:	e002      	b.n	800292c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	3b01      	subs	r3, #1
 800292a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f9      	bne.n	8002926 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b01      	cmp	r3, #1
 800293e:	f040 80a0 	bne.w	8002a82 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800294a:	f023 0301 	bic.w	r3, r3, #1
 800294e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800296c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800297c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002980:	d106      	bne.n	8002990 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	f023 0206 	bic.w	r2, r3, #6
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	645a      	str	r2, [r3, #68]	; 0x44
 800298e:	e002      	b.n	8002996 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800299e:	4b3d      	ldr	r3, [pc, #244]	; (8002a94 <HAL_ADC_Start_DMA+0x1c8>)
 80029a0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	4a3c      	ldr	r2, [pc, #240]	; (8002a98 <HAL_ADC_Start_DMA+0x1cc>)
 80029a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ae:	4a3b      	ldr	r2, [pc, #236]	; (8002a9c <HAL_ADC_Start_DMA+0x1d0>)
 80029b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	4a3a      	ldr	r2, [pc, #232]	; (8002aa0 <HAL_ADC_Start_DMA+0x1d4>)
 80029b8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80029d2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	334c      	adds	r3, #76	; 0x4c
 80029ee:	4619      	mov	r1, r3
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f000 fcda 	bl	80033ac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d12a      	bne.n	8002a5a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a26      	ldr	r2, [pc, #152]	; (8002aa4 <HAL_ADC_Start_DMA+0x1d8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d015      	beq.n	8002a3a <HAL_ADC_Start_DMA+0x16e>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a25      	ldr	r2, [pc, #148]	; (8002aa8 <HAL_ADC_Start_DMA+0x1dc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d105      	bne.n	8002a24 <HAL_ADC_Start_DMA+0x158>
 8002a18:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <HAL_ADC_Start_DMA+0x1c8>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a20      	ldr	r2, [pc, #128]	; (8002aac <HAL_ADC_Start_DMA+0x1e0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d129      	bne.n	8002a82 <HAL_ADC_Start_DMA+0x1b6>
 8002a2e:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_ADC_Start_DMA+0x1c8>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	2b0f      	cmp	r3, #15
 8002a38:	d823      	bhi.n	8002a82 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d11c      	bne.n	8002a82 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	e013      	b.n	8002a82 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a11      	ldr	r2, [pc, #68]	; (8002aa4 <HAL_ADC_Start_DMA+0x1d8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d10e      	bne.n	8002a82 <HAL_ADC_Start_DMA+0x1b6>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d107      	bne.n	8002a82 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a80:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	431bde83 	.word	0x431bde83
 8002a94:	40012300 	.word	0x40012300
 8002a98:	08002f29 	.word	0x08002f29
 8002a9c:	08002fe3 	.word	0x08002fe3
 8002aa0:	08002fff 	.word	0x08002fff
 8002aa4:	40012000 	.word	0x40012000
 8002aa8:	40012100 	.word	0x40012100
 8002aac:	40012200 	.word	0x40012200

08002ab0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x1c>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e105      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x228>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b09      	cmp	r3, #9
 8002b16:	d925      	bls.n	8002b64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68d9      	ldr	r1, [r3, #12]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	4613      	mov	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3b1e      	subs	r3, #30
 8002b2e:	2207      	movs	r2, #7
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43da      	mvns	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	400a      	ands	r2, r1
 8002b3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68d9      	ldr	r1, [r3, #12]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	4618      	mov	r0, r3
 8002b50:	4603      	mov	r3, r0
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	4403      	add	r3, r0
 8002b56:	3b1e      	subs	r3, #30
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	e022      	b.n	8002baa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6919      	ldr	r1, [r3, #16]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	4613      	mov	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4413      	add	r3, r2
 8002b78:	2207      	movs	r2, #7
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	400a      	ands	r2, r1
 8002b86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6919      	ldr	r1, [r3, #16]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	4618      	mov	r0, r3
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4403      	add	r3, r0
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d824      	bhi.n	8002bfc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3b05      	subs	r3, #5
 8002bc4:	221f      	movs	r2, #31
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	4618      	mov	r0, r3
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	3b05      	subs	r3, #5
 8002bee:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	635a      	str	r2, [r3, #52]	; 0x34
 8002bfa:	e04c      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b0c      	cmp	r3, #12
 8002c02:	d824      	bhi.n	8002c4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	3b23      	subs	r3, #35	; 0x23
 8002c16:	221f      	movs	r2, #31
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	400a      	ands	r2, r1
 8002c24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	4618      	mov	r0, r3
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3b23      	subs	r3, #35	; 0x23
 8002c40:	fa00 f203 	lsl.w	r2, r0, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c4c:	e023      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3b41      	subs	r3, #65	; 0x41
 8002c60:	221f      	movs	r2, #31
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43da      	mvns	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	400a      	ands	r2, r1
 8002c6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	3b41      	subs	r3, #65	; 0x41
 8002c8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c96:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <HAL_ADC_ConfigChannel+0x234>)
 8002c98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a21      	ldr	r2, [pc, #132]	; (8002d24 <HAL_ADC_ConfigChannel+0x238>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d109      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x1cc>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b12      	cmp	r3, #18
 8002caa:	d105      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a19      	ldr	r2, [pc, #100]	; (8002d24 <HAL_ADC_ConfigChannel+0x238>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d123      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x21e>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d003      	beq.n	8002cd2 <HAL_ADC_ConfigChannel+0x1e6>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b11      	cmp	r3, #17
 8002cd0:	d11b      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b10      	cmp	r3, #16
 8002ce4:	d111      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_ADC_ConfigChannel+0x23c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a10      	ldr	r2, [pc, #64]	; (8002d2c <HAL_ADC_ConfigChannel+0x240>)
 8002cec:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf0:	0c9a      	lsrs	r2, r3, #18
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cfc:	e002      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f9      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	40012300 	.word	0x40012300
 8002d24:	40012000 	.word	0x40012000
 8002d28:	20000000 	.word	0x20000000
 8002d2c:	431bde83 	.word	0x431bde83

08002d30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d38:	4b79      	ldr	r3, [pc, #484]	; (8002f20 <ADC_Init+0x1f0>)
 8002d3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	431a      	orrs	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	021a      	lsls	r2, r3, #8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002daa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6899      	ldr	r1, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	4a58      	ldr	r2, [pc, #352]	; (8002f24 <ADC_Init+0x1f4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d022      	beq.n	8002e0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6899      	ldr	r1, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002df8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6899      	ldr	r1, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	e00f      	b.n	8002e2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0202 	bic.w	r2, r2, #2
 8002e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6899      	ldr	r1, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7e1b      	ldrb	r3, [r3, #24]
 8002e48:	005a      	lsls	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01b      	beq.n	8002e94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6859      	ldr	r1, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	3b01      	subs	r3, #1
 8002e88:	035a      	lsls	r2, r3, #13
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	e007      	b.n	8002ea4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	051a      	lsls	r2, r3, #20
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ed8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6899      	ldr	r1, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ee6:	025a      	lsls	r2, r3, #9
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6899      	ldr	r1, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	029a      	lsls	r2, r3, #10
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	609a      	str	r2, [r3, #8]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	40012300 	.word	0x40012300
 8002f24:	0f000001 	.word	0x0f000001

08002f28 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d13c      	bne.n	8002fbc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d12b      	bne.n	8002fb4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d127      	bne.n	8002fb4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d006      	beq.n	8002f80 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d119      	bne.n	8002fb4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0220 	bic.w	r2, r2, #32
 8002f8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d105      	bne.n	8002fb4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	f043 0201 	orr.w	r2, r3, #1
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f7ff fd7b 	bl	8002ab0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fba:	e00e      	b.n	8002fda <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f7ff fd85 	bl	8002ad8 <HAL_ADC_ErrorCallback>
}
 8002fce:	e004      	b.n	8002fda <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	4798      	blx	r3
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f7ff fd67 	bl	8002ac4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ff6:	bf00      	nop
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2240      	movs	r2, #64	; 0x40
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	f043 0204 	orr.w	r2, r3, #4
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f7ff fd5a 	bl	8002ad8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305e:	4a04      	ldr	r2, [pc, #16]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	60d3      	str	r3, [r2, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db0b      	blt.n	80030ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	4907      	ldr	r1, [pc, #28]	; (80030c8 <__NVIC_EnableIRQ+0x38>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2001      	movs	r0, #1
 80030b2:	fa00 f202 	lsl.w	r2, r0, r2
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	e000e100 	.word	0xe000e100

080030cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	db0a      	blt.n	80030f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	490c      	ldr	r1, [pc, #48]	; (8003118 <__NVIC_SetPriority+0x4c>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	440b      	add	r3, r1
 80030f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f4:	e00a      	b.n	800310c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4908      	ldr	r1, [pc, #32]	; (800311c <__NVIC_SetPriority+0x50>)
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	3b04      	subs	r3, #4
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	440b      	add	r3, r1
 800310a:	761a      	strb	r2, [r3, #24]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000e100 	.word	0xe000e100
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003120:	b480      	push	{r7}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f1c3 0307 	rsb	r3, r3, #7
 800313a:	2b04      	cmp	r3, #4
 800313c:	bf28      	it	cs
 800313e:	2304      	movcs	r3, #4
 8003140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3304      	adds	r3, #4
 8003146:	2b06      	cmp	r3, #6
 8003148:	d902      	bls.n	8003150 <NVIC_EncodePriority+0x30>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3b03      	subs	r3, #3
 800314e:	e000      	b.n	8003152 <NVIC_EncodePriority+0x32>
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003154:	f04f 32ff 	mov.w	r2, #4294967295
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	401a      	ands	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003168:	f04f 31ff 	mov.w	r1, #4294967295
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	43d9      	mvns	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	4313      	orrs	r3, r2
         );
}
 800317a:	4618      	mov	r0, r3
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003198:	d301      	bcc.n	800319e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800319a:	2301      	movs	r3, #1
 800319c:	e00f      	b.n	80031be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800319e:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <SysTick_Config+0x40>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031a6:	210f      	movs	r1, #15
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ac:	f7ff ff8e 	bl	80030cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <SysTick_Config+0x40>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031b6:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <SysTick_Config+0x40>)
 80031b8:	2207      	movs	r2, #7
 80031ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	e000e010 	.word	0xe000e010

080031cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ff29 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031f4:	f7ff ff3e 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	6978      	ldr	r0, [r7, #20]
 8003200:	f7ff ff8e 	bl	8003120 <NVIC_EncodePriority>
 8003204:	4602      	mov	r2, r0
 8003206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff5d 	bl	80030cc <__NVIC_SetPriority>
}
 8003212:	bf00      	nop
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	4603      	mov	r3, r0
 8003222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff31 	bl	8003090 <__NVIC_EnableIRQ>
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff ffa2 	bl	8003188 <SysTick_Config>
 8003244:	4603      	mov	r3, r0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800325c:	f7ff fac4 	bl	80027e8 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e099      	b.n	80033a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800328c:	e00f      	b.n	80032ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800328e:	f7ff faab 	bl	80027e8 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b05      	cmp	r3, #5
 800329a:	d908      	bls.n	80032ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2203      	movs	r2, #3
 80032a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e078      	b.n	80033a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e8      	bne.n	800328e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	4b38      	ldr	r3, [pc, #224]	; (80033a8 <HAL_DMA_Init+0x158>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	2b04      	cmp	r3, #4
 8003306:	d107      	bne.n	8003318 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	4313      	orrs	r3, r2
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f023 0307 	bic.w	r3, r3, #7
 800332e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4313      	orrs	r3, r2
 8003338:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	2b04      	cmp	r3, #4
 8003340:	d117      	bne.n	8003372 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00e      	beq.n	8003372 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 fa6f 	bl	8003838 <DMA_CheckFifoParam>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2240      	movs	r2, #64	; 0x40
 8003364:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800336e:	2301      	movs	r3, #1
 8003370:	e016      	b.n	80033a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fa26 	bl	80037cc <DMA_CalcBaseAndBitshift>
 8003380:	4603      	mov	r3, r0
 8003382:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003388:	223f      	movs	r2, #63	; 0x3f
 800338a:	409a      	lsls	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	f010803f 	.word	0xf010803f

080033ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_DMA_Start_IT+0x26>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e040      	b.n	8003454 <HAL_DMA_Start_IT+0xa8>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d12f      	bne.n	8003446 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2202      	movs	r2, #2
 80033ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	68b9      	ldr	r1, [r7, #8]
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 f9b8 	bl	8003770 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003404:	223f      	movs	r2, #63	; 0x3f
 8003406:	409a      	lsls	r2, r3
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0216 	orr.w	r2, r2, #22
 800341a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	2b00      	cmp	r3, #0
 8003422:	d007      	beq.n	8003434 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0208 	orr.w	r2, r2, #8
 8003432:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	e005      	b.n	8003452 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800344e:	2302      	movs	r3, #2
 8003450:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003452:	7dfb      	ldrb	r3, [r7, #23]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003468:	4b92      	ldr	r3, [pc, #584]	; (80036b4 <HAL_DMA_IRQHandler+0x258>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a92      	ldr	r2, [pc, #584]	; (80036b8 <HAL_DMA_IRQHandler+0x25c>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	0a9b      	lsrs	r3, r3, #10
 8003474:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	2208      	movs	r2, #8
 8003488:	409a      	lsls	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4013      	ands	r3, r2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d01a      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d013      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0204 	bic.w	r2, r2, #4
 80034ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b4:	2208      	movs	r2, #8
 80034b6:	409a      	lsls	r2, r3
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c0:	f043 0201 	orr.w	r2, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034cc:	2201      	movs	r2, #1
 80034ce:	409a      	lsls	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d012      	beq.n	80034fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ea:	2201      	movs	r2, #1
 80034ec:	409a      	lsls	r2, r3
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f6:	f043 0202 	orr.w	r2, r3, #2
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003502:	2204      	movs	r2, #4
 8003504:	409a      	lsls	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d012      	beq.n	8003534 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00b      	beq.n	8003534 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003520:	2204      	movs	r2, #4
 8003522:	409a      	lsls	r2, r3
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352c:	f043 0204 	orr.w	r2, r3, #4
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003538:	2210      	movs	r2, #16
 800353a:	409a      	lsls	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d043      	beq.n	80035cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d03c      	beq.n	80035cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003556:	2210      	movs	r2, #16
 8003558:	409a      	lsls	r2, r3
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d018      	beq.n	800359e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d108      	bne.n	800358c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d024      	beq.n	80035cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
 800358a:	e01f      	b.n	80035cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01b      	beq.n	80035cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
 800359c:	e016      	b.n	80035cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d107      	bne.n	80035bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0208 	bic.w	r2, r2, #8
 80035ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	2220      	movs	r2, #32
 80035d2:	409a      	lsls	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 808e 	beq.w	80036fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0310 	and.w	r3, r3, #16
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8086 	beq.w	80036fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f2:	2220      	movs	r2, #32
 80035f4:	409a      	lsls	r2, r3
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b05      	cmp	r3, #5
 8003604:	d136      	bne.n	8003674 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0216 	bic.w	r2, r2, #22
 8003614:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003624:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d103      	bne.n	8003636 <HAL_DMA_IRQHandler+0x1da>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003632:	2b00      	cmp	r3, #0
 8003634:	d007      	beq.n	8003646 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0208 	bic.w	r2, r2, #8
 8003644:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364a:	223f      	movs	r2, #63	; 0x3f
 800364c:	409a      	lsls	r2, r3
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003666:	2b00      	cmp	r3, #0
 8003668:	d07d      	beq.n	8003766 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
        }
        return;
 8003672:	e078      	b.n	8003766 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01c      	beq.n	80036bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d108      	bne.n	80036a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003694:	2b00      	cmp	r3, #0
 8003696:	d030      	beq.n	80036fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4798      	blx	r3
 80036a0:	e02b      	b.n	80036fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d027      	beq.n	80036fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	4798      	blx	r3
 80036b2:	e022      	b.n	80036fa <HAL_DMA_IRQHandler+0x29e>
 80036b4:	20000000 	.word	0x20000000
 80036b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10f      	bne.n	80036ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0210 	bic.w	r2, r2, #16
 80036d8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d032      	beq.n	8003768 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d022      	beq.n	8003754 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2205      	movs	r2, #5
 8003712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	3301      	adds	r3, #1
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	429a      	cmp	r2, r3
 8003730:	d307      	bcc.n	8003742 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f2      	bne.n	8003726 <HAL_DMA_IRQHandler+0x2ca>
 8003740:	e000      	b.n	8003744 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003742:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
 8003764:	e000      	b.n	8003768 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003766:	bf00      	nop
    }
  }
}
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop

08003770 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800378c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b40      	cmp	r3, #64	; 0x40
 800379c:	d108      	bne.n	80037b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037ae:	e007      	b.n	80037c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	60da      	str	r2, [r3, #12]
}
 80037c0:	bf00      	nop
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	3b10      	subs	r3, #16
 80037dc:	4a14      	ldr	r2, [pc, #80]	; (8003830 <DMA_CalcBaseAndBitshift+0x64>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	091b      	lsrs	r3, r3, #4
 80037e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037e6:	4a13      	ldr	r2, [pc, #76]	; (8003834 <DMA_CalcBaseAndBitshift+0x68>)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d909      	bls.n	800380e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003802:	f023 0303 	bic.w	r3, r3, #3
 8003806:	1d1a      	adds	r2, r3, #4
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	659a      	str	r2, [r3, #88]	; 0x58
 800380c:	e007      	b.n	800381e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003816:	f023 0303 	bic.w	r3, r3, #3
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	aaaaaaab 	.word	0xaaaaaaab
 8003834:	08005dc0 	.word	0x08005dc0

08003838 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d11f      	bne.n	8003892 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b03      	cmp	r3, #3
 8003856:	d855      	bhi.n	8003904 <DMA_CheckFifoParam+0xcc>
 8003858:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <DMA_CheckFifoParam+0x28>)
 800385a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385e:	bf00      	nop
 8003860:	08003871 	.word	0x08003871
 8003864:	08003883 	.word	0x08003883
 8003868:	08003871 	.word	0x08003871
 800386c:	08003905 	.word	0x08003905
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d045      	beq.n	8003908 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003880:	e042      	b.n	8003908 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800388a:	d13f      	bne.n	800390c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003890:	e03c      	b.n	800390c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800389a:	d121      	bne.n	80038e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d836      	bhi.n	8003910 <DMA_CheckFifoParam+0xd8>
 80038a2:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <DMA_CheckFifoParam+0x70>)
 80038a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a8:	080038b9 	.word	0x080038b9
 80038ac:	080038bf 	.word	0x080038bf
 80038b0:	080038b9 	.word	0x080038b9
 80038b4:	080038d1 	.word	0x080038d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
      break;
 80038bc:	e02f      	b.n	800391e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d024      	beq.n	8003914 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ce:	e021      	b.n	8003914 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038d8:	d11e      	bne.n	8003918 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038de:	e01b      	b.n	8003918 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d902      	bls.n	80038ec <DMA_CheckFifoParam+0xb4>
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d003      	beq.n	80038f2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038ea:	e018      	b.n	800391e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
      break;
 80038f0:	e015      	b.n	800391e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00e      	beq.n	800391c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
      break;
 8003902:	e00b      	b.n	800391c <DMA_CheckFifoParam+0xe4>
      break;
 8003904:	bf00      	nop
 8003906:	e00a      	b.n	800391e <DMA_CheckFifoParam+0xe6>
      break;
 8003908:	bf00      	nop
 800390a:	e008      	b.n	800391e <DMA_CheckFifoParam+0xe6>
      break;
 800390c:	bf00      	nop
 800390e:	e006      	b.n	800391e <DMA_CheckFifoParam+0xe6>
      break;
 8003910:	bf00      	nop
 8003912:	e004      	b.n	800391e <DMA_CheckFifoParam+0xe6>
      break;
 8003914:	bf00      	nop
 8003916:	e002      	b.n	800391e <DMA_CheckFifoParam+0xe6>
      break;   
 8003918:	bf00      	nop
 800391a:	e000      	b.n	800391e <DMA_CheckFifoParam+0xe6>
      break;
 800391c:	bf00      	nop
    }
  } 
  
  return status; 
 800391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800392c:	b480      	push	{r7}
 800392e:	b089      	sub	sp, #36	; 0x24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	e16b      	b.n	8003c20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003948:	2201      	movs	r2, #1
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4013      	ands	r3, r2
 800395a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	429a      	cmp	r2, r3
 8003962:	f040 815a 	bne.w	8003c1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d00b      	beq.n	8003986 <HAL_GPIO_Init+0x5a>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d007      	beq.n	8003986 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800397a:	2b11      	cmp	r3, #17
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b12      	cmp	r3, #18
 8003984:	d130      	bne.n	80039e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	2203      	movs	r2, #3
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039bc:	2201      	movs	r2, #1
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	091b      	lsrs	r3, r3, #4
 80039d2:	f003 0201 	and.w	r2, r3, #1
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	2203      	movs	r2, #3
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4013      	ands	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d003      	beq.n	8003a28 <HAL_GPIO_Init+0xfc>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b12      	cmp	r3, #18
 8003a26:	d123      	bne.n	8003a70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	08da      	lsrs	r2, r3, #3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3208      	adds	r2, #8
 8003a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	220f      	movs	r2, #15
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	08da      	lsrs	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3208      	adds	r2, #8
 8003a6a:	69b9      	ldr	r1, [r7, #24]
 8003a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 0203 	and.w	r2, r3, #3
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80b4 	beq.w	8003c1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	4b5f      	ldr	r3, [pc, #380]	; (8003c34 <HAL_GPIO_Init+0x308>)
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	4a5e      	ldr	r2, [pc, #376]	; (8003c34 <HAL_GPIO_Init+0x308>)
 8003abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ac2:	4b5c      	ldr	r3, [pc, #368]	; (8003c34 <HAL_GPIO_Init+0x308>)
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ace:	4a5a      	ldr	r2, [pc, #360]	; (8003c38 <HAL_GPIO_Init+0x30c>)
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	089b      	lsrs	r3, r3, #2
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	220f      	movs	r2, #15
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	43db      	mvns	r3, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4013      	ands	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a51      	ldr	r2, [pc, #324]	; (8003c3c <HAL_GPIO_Init+0x310>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d02b      	beq.n	8003b52 <HAL_GPIO_Init+0x226>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a50      	ldr	r2, [pc, #320]	; (8003c40 <HAL_GPIO_Init+0x314>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d025      	beq.n	8003b4e <HAL_GPIO_Init+0x222>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a4f      	ldr	r2, [pc, #316]	; (8003c44 <HAL_GPIO_Init+0x318>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d01f      	beq.n	8003b4a <HAL_GPIO_Init+0x21e>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a4e      	ldr	r2, [pc, #312]	; (8003c48 <HAL_GPIO_Init+0x31c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d019      	beq.n	8003b46 <HAL_GPIO_Init+0x21a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a4d      	ldr	r2, [pc, #308]	; (8003c4c <HAL_GPIO_Init+0x320>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <HAL_GPIO_Init+0x216>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a4c      	ldr	r2, [pc, #304]	; (8003c50 <HAL_GPIO_Init+0x324>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00d      	beq.n	8003b3e <HAL_GPIO_Init+0x212>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a4b      	ldr	r2, [pc, #300]	; (8003c54 <HAL_GPIO_Init+0x328>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d007      	beq.n	8003b3a <HAL_GPIO_Init+0x20e>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a4a      	ldr	r2, [pc, #296]	; (8003c58 <HAL_GPIO_Init+0x32c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d101      	bne.n	8003b36 <HAL_GPIO_Init+0x20a>
 8003b32:	2307      	movs	r3, #7
 8003b34:	e00e      	b.n	8003b54 <HAL_GPIO_Init+0x228>
 8003b36:	2308      	movs	r3, #8
 8003b38:	e00c      	b.n	8003b54 <HAL_GPIO_Init+0x228>
 8003b3a:	2306      	movs	r3, #6
 8003b3c:	e00a      	b.n	8003b54 <HAL_GPIO_Init+0x228>
 8003b3e:	2305      	movs	r3, #5
 8003b40:	e008      	b.n	8003b54 <HAL_GPIO_Init+0x228>
 8003b42:	2304      	movs	r3, #4
 8003b44:	e006      	b.n	8003b54 <HAL_GPIO_Init+0x228>
 8003b46:	2303      	movs	r3, #3
 8003b48:	e004      	b.n	8003b54 <HAL_GPIO_Init+0x228>
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	e002      	b.n	8003b54 <HAL_GPIO_Init+0x228>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <HAL_GPIO_Init+0x228>
 8003b52:	2300      	movs	r3, #0
 8003b54:	69fa      	ldr	r2, [r7, #28]
 8003b56:	f002 0203 	and.w	r2, r2, #3
 8003b5a:	0092      	lsls	r2, r2, #2
 8003b5c:	4093      	lsls	r3, r2
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b64:	4934      	ldr	r1, [pc, #208]	; (8003c38 <HAL_GPIO_Init+0x30c>)
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	089b      	lsrs	r3, r3, #2
 8003b6a:	3302      	adds	r3, #2
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b72:	4b3a      	ldr	r3, [pc, #232]	; (8003c5c <HAL_GPIO_Init+0x330>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b96:	4a31      	ldr	r2, [pc, #196]	; (8003c5c <HAL_GPIO_Init+0x330>)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b9c:	4b2f      	ldr	r3, [pc, #188]	; (8003c5c <HAL_GPIO_Init+0x330>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bc0:	4a26      	ldr	r2, [pc, #152]	; (8003c5c <HAL_GPIO_Init+0x330>)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bc6:	4b25      	ldr	r3, [pc, #148]	; (8003c5c <HAL_GPIO_Init+0x330>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bea:	4a1c      	ldr	r2, [pc, #112]	; (8003c5c <HAL_GPIO_Init+0x330>)
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bf0:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <HAL_GPIO_Init+0x330>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c14:	4a11      	ldr	r2, [pc, #68]	; (8003c5c <HAL_GPIO_Init+0x330>)
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	61fb      	str	r3, [r7, #28]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	2b0f      	cmp	r3, #15
 8003c24:	f67f ae90 	bls.w	8003948 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c28:	bf00      	nop
 8003c2a:	3724      	adds	r7, #36	; 0x24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	40023800 	.word	0x40023800
 8003c38:	40013800 	.word	0x40013800
 8003c3c:	40020000 	.word	0x40020000
 8003c40:	40020400 	.word	0x40020400
 8003c44:	40020800 	.word	0x40020800
 8003c48:	40020c00 	.word	0x40020c00
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	40021400 	.word	0x40021400
 8003c54:	40021800 	.word	0x40021800
 8003c58:	40021c00 	.word	0x40021c00
 8003c5c:	40013c00 	.word	0x40013c00

08003c60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	887b      	ldrh	r3, [r7, #2]
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
 8003c7c:	e001      	b.n	8003c82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	807b      	strh	r3, [r7, #2]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ca0:	787b      	ldrb	r3, [r7, #1]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ca6:	887a      	ldrh	r2, [r7, #2]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cac:	e003      	b.n	8003cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cae:	887b      	ldrh	r3, [r7, #2]
 8003cb0:	041a      	lsls	r2, r3, #16
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	619a      	str	r2, [r3, #24]
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e11f      	b.n	8003f16 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fe f9fe 	bl	80020ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2224      	movs	r2, #36	; 0x24
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d28:	f000 fd18 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 8003d2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4a7b      	ldr	r2, [pc, #492]	; (8003f20 <HAL_I2C_Init+0x25c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d807      	bhi.n	8003d48 <HAL_I2C_Init+0x84>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4a7a      	ldr	r2, [pc, #488]	; (8003f24 <HAL_I2C_Init+0x260>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	bf94      	ite	ls
 8003d40:	2301      	movls	r3, #1
 8003d42:	2300      	movhi	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	e006      	b.n	8003d56 <HAL_I2C_Init+0x92>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4a77      	ldr	r2, [pc, #476]	; (8003f28 <HAL_I2C_Init+0x264>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	bf94      	ite	ls
 8003d50:	2301      	movls	r3, #1
 8003d52:	2300      	movhi	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0db      	b.n	8003f16 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a72      	ldr	r2, [pc, #456]	; (8003f2c <HAL_I2C_Init+0x268>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	0c9b      	lsrs	r3, r3, #18
 8003d68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4a64      	ldr	r2, [pc, #400]	; (8003f20 <HAL_I2C_Init+0x25c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d802      	bhi.n	8003d98 <HAL_I2C_Init+0xd4>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	3301      	adds	r3, #1
 8003d96:	e009      	b.n	8003dac <HAL_I2C_Init+0xe8>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	4a63      	ldr	r2, [pc, #396]	; (8003f30 <HAL_I2C_Init+0x26c>)
 8003da4:	fba2 2303 	umull	r2, r3, r2, r3
 8003da8:	099b      	lsrs	r3, r3, #6
 8003daa:	3301      	adds	r3, #1
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	430b      	orrs	r3, r1
 8003db2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003dbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	4956      	ldr	r1, [pc, #344]	; (8003f20 <HAL_I2C_Init+0x25c>)
 8003dc8:	428b      	cmp	r3, r1
 8003dca:	d80d      	bhi.n	8003de8 <HAL_I2C_Init+0x124>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1e59      	subs	r1, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dda:	3301      	adds	r3, #1
 8003ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	bf38      	it	cc
 8003de4:	2304      	movcc	r3, #4
 8003de6:	e04f      	b.n	8003e88 <HAL_I2C_Init+0x1c4>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d111      	bne.n	8003e14 <HAL_I2C_Init+0x150>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1e58      	subs	r0, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6859      	ldr	r1, [r3, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	440b      	add	r3, r1
 8003dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e02:	3301      	adds	r3, #1
 8003e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	bf0c      	ite	eq
 8003e0c:	2301      	moveq	r3, #1
 8003e0e:	2300      	movne	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	e012      	b.n	8003e3a <HAL_I2C_Init+0x176>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1e58      	subs	r0, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6859      	ldr	r1, [r3, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	0099      	lsls	r1, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	bf0c      	ite	eq
 8003e34:	2301      	moveq	r3, #1
 8003e36:	2300      	movne	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_Init+0x17e>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e022      	b.n	8003e88 <HAL_I2C_Init+0x1c4>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10e      	bne.n	8003e68 <HAL_I2C_Init+0x1a4>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1e58      	subs	r0, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6859      	ldr	r1, [r3, #4]
 8003e52:	460b      	mov	r3, r1
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	440b      	add	r3, r1
 8003e58:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e66:	e00f      	b.n	8003e88 <HAL_I2C_Init+0x1c4>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1e58      	subs	r0, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6859      	ldr	r1, [r3, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	0099      	lsls	r1, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	6809      	ldr	r1, [r1, #0]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69da      	ldr	r2, [r3, #28]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003eb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6911      	ldr	r1, [r2, #16]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68d2      	ldr	r2, [r2, #12]
 8003ec2:	4311      	orrs	r1, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	000186a0 	.word	0x000186a0
 8003f24:	001e847f 	.word	0x001e847f
 8003f28:	003d08ff 	.word	0x003d08ff
 8003f2c:	431bde83 	.word	0x431bde83
 8003f30:	10624dd3 	.word	0x10624dd3

08003f34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e25b      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d075      	beq.n	800403e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f52:	4ba3      	ldr	r3, [pc, #652]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d00c      	beq.n	8003f78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f5e:	4ba0      	ldr	r3, [pc, #640]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d112      	bne.n	8003f90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f6a:	4b9d      	ldr	r3, [pc, #628]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f76:	d10b      	bne.n	8003f90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f78:	4b99      	ldr	r3, [pc, #612]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d05b      	beq.n	800403c <HAL_RCC_OscConfig+0x108>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d157      	bne.n	800403c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e236      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f98:	d106      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x74>
 8003f9a:	4b91      	ldr	r3, [pc, #580]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a90      	ldr	r2, [pc, #576]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	e01d      	b.n	8003fe4 <HAL_RCC_OscConfig+0xb0>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fb0:	d10c      	bne.n	8003fcc <HAL_RCC_OscConfig+0x98>
 8003fb2:	4b8b      	ldr	r3, [pc, #556]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a8a      	ldr	r2, [pc, #552]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	4b88      	ldr	r3, [pc, #544]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a87      	ldr	r2, [pc, #540]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	e00b      	b.n	8003fe4 <HAL_RCC_OscConfig+0xb0>
 8003fcc:	4b84      	ldr	r3, [pc, #528]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a83      	ldr	r2, [pc, #524]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	4b81      	ldr	r3, [pc, #516]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a80      	ldr	r2, [pc, #512]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d013      	beq.n	8004014 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fe fbfc 	bl	80027e8 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff4:	f7fe fbf8 	bl	80027e8 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	; 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e1fb      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004006:	4b76      	ldr	r3, [pc, #472]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0xc0>
 8004012:	e014      	b.n	800403e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004014:	f7fe fbe8 	bl	80027e8 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800401c:	f7fe fbe4 	bl	80027e8 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b64      	cmp	r3, #100	; 0x64
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e1e7      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402e:	4b6c      	ldr	r3, [pc, #432]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0xe8>
 800403a:	e000      	b.n	800403e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d063      	beq.n	8004112 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800404a:	4b65      	ldr	r3, [pc, #404]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00b      	beq.n	800406e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004056:	4b62      	ldr	r3, [pc, #392]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800405e:	2b08      	cmp	r3, #8
 8004060:	d11c      	bne.n	800409c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004062:	4b5f      	ldr	r3, [pc, #380]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d116      	bne.n	800409c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406e:	4b5c      	ldr	r3, [pc, #368]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <HAL_RCC_OscConfig+0x152>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d001      	beq.n	8004086 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e1bb      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004086:	4b56      	ldr	r3, [pc, #344]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4952      	ldr	r1, [pc, #328]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004096:	4313      	orrs	r3, r2
 8004098:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409a:	e03a      	b.n	8004112 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d020      	beq.n	80040e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a4:	4b4f      	ldr	r3, [pc, #316]	; (80041e4 <HAL_RCC_OscConfig+0x2b0>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040aa:	f7fe fb9d 	bl	80027e8 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040b2:	f7fe fb99 	bl	80027e8 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e19c      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c4:	4b46      	ldr	r3, [pc, #280]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0f0      	beq.n	80040b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d0:	4b43      	ldr	r3, [pc, #268]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	4940      	ldr	r1, [pc, #256]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	600b      	str	r3, [r1, #0]
 80040e4:	e015      	b.n	8004112 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e6:	4b3f      	ldr	r3, [pc, #252]	; (80041e4 <HAL_RCC_OscConfig+0x2b0>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fe fb7c 	bl	80027e8 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f4:	f7fe fb78 	bl	80027e8 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e17b      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004106:	4b36      	ldr	r3, [pc, #216]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d030      	beq.n	8004180 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d016      	beq.n	8004154 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004126:	4b30      	ldr	r3, [pc, #192]	; (80041e8 <HAL_RCC_OscConfig+0x2b4>)
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fe fb5c 	bl	80027e8 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004134:	f7fe fb58 	bl	80027e8 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e15b      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004146:	4b26      	ldr	r3, [pc, #152]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x200>
 8004152:	e015      	b.n	8004180 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004154:	4b24      	ldr	r3, [pc, #144]	; (80041e8 <HAL_RCC_OscConfig+0x2b4>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800415a:	f7fe fb45 	bl	80027e8 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004162:	f7fe fb41 	bl	80027e8 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e144      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004174:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f0      	bne.n	8004162 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 80a0 	beq.w	80042ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800418e:	2300      	movs	r3, #0
 8004190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004192:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10f      	bne.n	80041be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800419e:	2300      	movs	r3, #0
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	4a0e      	ldr	r2, [pc, #56]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 80041a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ac:	6413      	str	r3, [r2, #64]	; 0x40
 80041ae:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b6:	60bb      	str	r3, [r7, #8]
 80041b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ba:	2301      	movs	r3, #1
 80041bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <HAL_RCC_OscConfig+0x2b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d121      	bne.n	800420e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ca:	4b08      	ldr	r3, [pc, #32]	; (80041ec <HAL_RCC_OscConfig+0x2b8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a07      	ldr	r2, [pc, #28]	; (80041ec <HAL_RCC_OscConfig+0x2b8>)
 80041d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d6:	f7fe fb07 	bl	80027e8 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041dc:	e011      	b.n	8004202 <HAL_RCC_OscConfig+0x2ce>
 80041de:	bf00      	nop
 80041e0:	40023800 	.word	0x40023800
 80041e4:	42470000 	.word	0x42470000
 80041e8:	42470e80 	.word	0x42470e80
 80041ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f0:	f7fe fafa 	bl	80027e8 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e0fd      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004202:	4b81      	ldr	r3, [pc, #516]	; (8004408 <HAL_RCC_OscConfig+0x4d4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f0      	beq.n	80041f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d106      	bne.n	8004224 <HAL_RCC_OscConfig+0x2f0>
 8004216:	4b7d      	ldr	r3, [pc, #500]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	4a7c      	ldr	r2, [pc, #496]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	6713      	str	r3, [r2, #112]	; 0x70
 8004222:	e01c      	b.n	800425e <HAL_RCC_OscConfig+0x32a>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b05      	cmp	r3, #5
 800422a:	d10c      	bne.n	8004246 <HAL_RCC_OscConfig+0x312>
 800422c:	4b77      	ldr	r3, [pc, #476]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	4a76      	ldr	r2, [pc, #472]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 8004232:	f043 0304 	orr.w	r3, r3, #4
 8004236:	6713      	str	r3, [r2, #112]	; 0x70
 8004238:	4b74      	ldr	r3, [pc, #464]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	4a73      	ldr	r2, [pc, #460]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	6713      	str	r3, [r2, #112]	; 0x70
 8004244:	e00b      	b.n	800425e <HAL_RCC_OscConfig+0x32a>
 8004246:	4b71      	ldr	r3, [pc, #452]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	4a70      	ldr	r2, [pc, #448]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	6713      	str	r3, [r2, #112]	; 0x70
 8004252:	4b6e      	ldr	r3, [pc, #440]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	4a6d      	ldr	r2, [pc, #436]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 8004258:	f023 0304 	bic.w	r3, r3, #4
 800425c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d015      	beq.n	8004292 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004266:	f7fe fabf 	bl	80027e8 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426c:	e00a      	b.n	8004284 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800426e:	f7fe fabb 	bl	80027e8 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	f241 3288 	movw	r2, #5000	; 0x1388
 800427c:	4293      	cmp	r3, r2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e0bc      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004284:	4b61      	ldr	r3, [pc, #388]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0ee      	beq.n	800426e <HAL_RCC_OscConfig+0x33a>
 8004290:	e014      	b.n	80042bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004292:	f7fe faa9 	bl	80027e8 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004298:	e00a      	b.n	80042b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800429a:	f7fe faa5 	bl	80027e8 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e0a6      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b0:	4b56      	ldr	r3, [pc, #344]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 80042b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1ee      	bne.n	800429a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d105      	bne.n	80042ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c2:	4b52      	ldr	r3, [pc, #328]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	4a51      	ldr	r2, [pc, #324]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 80042c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 8092 	beq.w	80043fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042d8:	4b4c      	ldr	r3, [pc, #304]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 030c 	and.w	r3, r3, #12
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d05c      	beq.n	800439e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d141      	bne.n	8004370 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ec:	4b48      	ldr	r3, [pc, #288]	; (8004410 <HAL_RCC_OscConfig+0x4dc>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f2:	f7fe fa79 	bl	80027e8 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042fa:	f7fe fa75 	bl	80027e8 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e078      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430c:	4b3f      	ldr	r3, [pc, #252]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f0      	bne.n	80042fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69da      	ldr	r2, [r3, #28]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	019b      	lsls	r3, r3, #6
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432e:	085b      	lsrs	r3, r3, #1
 8004330:	3b01      	subs	r3, #1
 8004332:	041b      	lsls	r3, r3, #16
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433a:	061b      	lsls	r3, r3, #24
 800433c:	4933      	ldr	r1, [pc, #204]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 800433e:	4313      	orrs	r3, r2
 8004340:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004342:	4b33      	ldr	r3, [pc, #204]	; (8004410 <HAL_RCC_OscConfig+0x4dc>)
 8004344:	2201      	movs	r2, #1
 8004346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fe fa4e 	bl	80027e8 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004350:	f7fe fa4a 	bl	80027e8 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e04d      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004362:	4b2a      	ldr	r3, [pc, #168]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0x41c>
 800436e:	e045      	b.n	80043fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004370:	4b27      	ldr	r3, [pc, #156]	; (8004410 <HAL_RCC_OscConfig+0x4dc>)
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004376:	f7fe fa37 	bl	80027e8 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437e:	f7fe fa33 	bl	80027e8 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e036      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004390:	4b1e      	ldr	r3, [pc, #120]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f0      	bne.n	800437e <HAL_RCC_OscConfig+0x44a>
 800439c:	e02e      	b.n	80043fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d101      	bne.n	80043aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e029      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043aa:	4b18      	ldr	r3, [pc, #96]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d11c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d115      	bne.n	80043f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043d2:	4013      	ands	r3, r2
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043d8:	4293      	cmp	r3, r2
 80043da:	d10d      	bne.n	80043f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d106      	bne.n	80043f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d001      	beq.n	80043fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40007000 	.word	0x40007000
 800440c:	40023800 	.word	0x40023800
 8004410:	42470060 	.word	0x42470060

08004414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0cc      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004428:	4b68      	ldr	r3, [pc, #416]	; (80045cc <HAL_RCC_ClockConfig+0x1b8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d90c      	bls.n	8004450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004436:	4b65      	ldr	r3, [pc, #404]	; (80045cc <HAL_RCC_ClockConfig+0x1b8>)
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800443e:	4b63      	ldr	r3, [pc, #396]	; (80045cc <HAL_RCC_ClockConfig+0x1b8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d001      	beq.n	8004450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0b8      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d020      	beq.n	800449e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004468:	4b59      	ldr	r3, [pc, #356]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	4a58      	ldr	r2, [pc, #352]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004480:	4b53      	ldr	r3, [pc, #332]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	4a52      	ldr	r2, [pc, #328]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800448a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800448c:	4b50      	ldr	r3, [pc, #320]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	494d      	ldr	r1, [pc, #308]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	4313      	orrs	r3, r2
 800449c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d044      	beq.n	8004534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d107      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b2:	4b47      	ldr	r3, [pc, #284]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d119      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e07f      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d003      	beq.n	80044d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d2:	4b3f      	ldr	r3, [pc, #252]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e06f      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e2:	4b3b      	ldr	r3, [pc, #236]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e067      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044f2:	4b37      	ldr	r3, [pc, #220]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f023 0203 	bic.w	r2, r3, #3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	4934      	ldr	r1, [pc, #208]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	4313      	orrs	r3, r2
 8004502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004504:	f7fe f970 	bl	80027e8 <HAL_GetTick>
 8004508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450a:	e00a      	b.n	8004522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800450c:	f7fe f96c 	bl	80027e8 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	; 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e04f      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004522:	4b2b      	ldr	r3, [pc, #172]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 020c 	and.w	r2, r3, #12
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	429a      	cmp	r2, r3
 8004532:	d1eb      	bne.n	800450c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004534:	4b25      	ldr	r3, [pc, #148]	; (80045cc <HAL_RCC_ClockConfig+0x1b8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d20c      	bcs.n	800455c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004542:	4b22      	ldr	r3, [pc, #136]	; (80045cc <HAL_RCC_ClockConfig+0x1b8>)
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800454a:	4b20      	ldr	r3, [pc, #128]	; (80045cc <HAL_RCC_ClockConfig+0x1b8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d001      	beq.n	800455c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e032      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004568:	4b19      	ldr	r3, [pc, #100]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	4916      	ldr	r1, [pc, #88]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004586:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	490e      	ldr	r1, [pc, #56]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	4313      	orrs	r3, r2
 8004598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800459a:	f000 f821 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 800459e:	4601      	mov	r1, r0
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	4a0a      	ldr	r2, [pc, #40]	; (80045d4 <HAL_RCC_ClockConfig+0x1c0>)
 80045ac:	5cd3      	ldrb	r3, [r2, r3]
 80045ae:	fa21 f303 	lsr.w	r3, r1, r3
 80045b2:	4a09      	ldr	r2, [pc, #36]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 80045b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045b6:	4b09      	ldr	r3, [pc, #36]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe f8d0 	bl	8002760 <HAL_InitTick>

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40023c00 	.word	0x40023c00
 80045d0:	40023800 	.word	0x40023800
 80045d4:	08005da8 	.word	0x08005da8
 80045d8:	20000000 	.word	0x20000000
 80045dc:	20000004 	.word	0x20000004

080045e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	607b      	str	r3, [r7, #4]
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	2300      	movs	r3, #0
 80045f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045f6:	4b50      	ldr	r3, [pc, #320]	; (8004738 <HAL_RCC_GetSysClockFreq+0x158>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d007      	beq.n	8004612 <HAL_RCC_GetSysClockFreq+0x32>
 8004602:	2b08      	cmp	r3, #8
 8004604:	d008      	beq.n	8004618 <HAL_RCC_GetSysClockFreq+0x38>
 8004606:	2b00      	cmp	r3, #0
 8004608:	f040 808d 	bne.w	8004726 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800460c:	4b4b      	ldr	r3, [pc, #300]	; (800473c <HAL_RCC_GetSysClockFreq+0x15c>)
 800460e:	60bb      	str	r3, [r7, #8]
       break;
 8004610:	e08c      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004612:	4b4b      	ldr	r3, [pc, #300]	; (8004740 <HAL_RCC_GetSysClockFreq+0x160>)
 8004614:	60bb      	str	r3, [r7, #8]
      break;
 8004616:	e089      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004618:	4b47      	ldr	r3, [pc, #284]	; (8004738 <HAL_RCC_GetSysClockFreq+0x158>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004620:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004622:	4b45      	ldr	r3, [pc, #276]	; (8004738 <HAL_RCC_GetSysClockFreq+0x158>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d023      	beq.n	8004676 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800462e:	4b42      	ldr	r3, [pc, #264]	; (8004738 <HAL_RCC_GetSysClockFreq+0x158>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	099b      	lsrs	r3, r3, #6
 8004634:	f04f 0400 	mov.w	r4, #0
 8004638:	f240 11ff 	movw	r1, #511	; 0x1ff
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	ea03 0501 	and.w	r5, r3, r1
 8004644:	ea04 0602 	and.w	r6, r4, r2
 8004648:	4a3d      	ldr	r2, [pc, #244]	; (8004740 <HAL_RCC_GetSysClockFreq+0x160>)
 800464a:	fb02 f106 	mul.w	r1, r2, r6
 800464e:	2200      	movs	r2, #0
 8004650:	fb02 f205 	mul.w	r2, r2, r5
 8004654:	440a      	add	r2, r1
 8004656:	493a      	ldr	r1, [pc, #232]	; (8004740 <HAL_RCC_GetSysClockFreq+0x160>)
 8004658:	fba5 0101 	umull	r0, r1, r5, r1
 800465c:	1853      	adds	r3, r2, r1
 800465e:	4619      	mov	r1, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f04f 0400 	mov.w	r4, #0
 8004666:	461a      	mov	r2, r3
 8004668:	4623      	mov	r3, r4
 800466a:	f7fc f9a3 	bl	80009b4 <__aeabi_uldivmod>
 800466e:	4603      	mov	r3, r0
 8004670:	460c      	mov	r4, r1
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	e049      	b.n	800470a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004676:	4b30      	ldr	r3, [pc, #192]	; (8004738 <HAL_RCC_GetSysClockFreq+0x158>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	099b      	lsrs	r3, r3, #6
 800467c:	f04f 0400 	mov.w	r4, #0
 8004680:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	ea03 0501 	and.w	r5, r3, r1
 800468c:	ea04 0602 	and.w	r6, r4, r2
 8004690:	4629      	mov	r1, r5
 8004692:	4632      	mov	r2, r6
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	f04f 0400 	mov.w	r4, #0
 800469c:	0154      	lsls	r4, r2, #5
 800469e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80046a2:	014b      	lsls	r3, r1, #5
 80046a4:	4619      	mov	r1, r3
 80046a6:	4622      	mov	r2, r4
 80046a8:	1b49      	subs	r1, r1, r5
 80046aa:	eb62 0206 	sbc.w	r2, r2, r6
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	f04f 0400 	mov.w	r4, #0
 80046b6:	0194      	lsls	r4, r2, #6
 80046b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046bc:	018b      	lsls	r3, r1, #6
 80046be:	1a5b      	subs	r3, r3, r1
 80046c0:	eb64 0402 	sbc.w	r4, r4, r2
 80046c4:	f04f 0100 	mov.w	r1, #0
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	00e2      	lsls	r2, r4, #3
 80046ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046d2:	00d9      	lsls	r1, r3, #3
 80046d4:	460b      	mov	r3, r1
 80046d6:	4614      	mov	r4, r2
 80046d8:	195b      	adds	r3, r3, r5
 80046da:	eb44 0406 	adc.w	r4, r4, r6
 80046de:	f04f 0100 	mov.w	r1, #0
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	02a2      	lsls	r2, r4, #10
 80046e8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80046ec:	0299      	lsls	r1, r3, #10
 80046ee:	460b      	mov	r3, r1
 80046f0:	4614      	mov	r4, r2
 80046f2:	4618      	mov	r0, r3
 80046f4:	4621      	mov	r1, r4
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f04f 0400 	mov.w	r4, #0
 80046fc:	461a      	mov	r2, r3
 80046fe:	4623      	mov	r3, r4
 8004700:	f7fc f958 	bl	80009b4 <__aeabi_uldivmod>
 8004704:	4603      	mov	r3, r0
 8004706:	460c      	mov	r4, r1
 8004708:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800470a:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <HAL_RCC_GetSysClockFreq+0x158>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	0c1b      	lsrs	r3, r3, #16
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	3301      	adds	r3, #1
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004722:	60bb      	str	r3, [r7, #8]
      break;
 8004724:	e002      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004726:	4b05      	ldr	r3, [pc, #20]	; (800473c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004728:	60bb      	str	r3, [r7, #8]
      break;
 800472a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800472c:	68bb      	ldr	r3, [r7, #8]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004736:	bf00      	nop
 8004738:	40023800 	.word	0x40023800
 800473c:	00f42400 	.word	0x00f42400
 8004740:	00b71b00 	.word	0x00b71b00

08004744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004748:	4b03      	ldr	r3, [pc, #12]	; (8004758 <HAL_RCC_GetHCLKFreq+0x14>)
 800474a:	681b      	ldr	r3, [r3, #0]
}
 800474c:	4618      	mov	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	20000000 	.word	0x20000000

0800475c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004760:	f7ff fff0 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 8004764:	4601      	mov	r1, r0
 8004766:	4b05      	ldr	r3, [pc, #20]	; (800477c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	0a9b      	lsrs	r3, r3, #10
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	4a03      	ldr	r2, [pc, #12]	; (8004780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004772:	5cd3      	ldrb	r3, [r2, r3]
 8004774:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004778:	4618      	mov	r0, r3
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40023800 	.word	0x40023800
 8004780:	08005db8 	.word	0x08005db8

08004784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004788:	f7ff ffdc 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 800478c:	4601      	mov	r1, r0
 800478e:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	0b5b      	lsrs	r3, r3, #13
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	4a03      	ldr	r2, [pc, #12]	; (80047a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800479a:	5cd3      	ldrb	r3, [r2, r3]
 800479c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40023800 	.word	0x40023800
 80047a8:	08005db8 	.word	0x08005db8

080047ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e056      	b.n	800486c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d106      	bne.n	80047de <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7fd fccf 	bl	800217c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2202      	movs	r2, #2
 80047e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	ea42 0103 	orr.w	r1, r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	0c1b      	lsrs	r3, r3, #16
 800483c:	f003 0104 	and.w	r1, r3, #4
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69da      	ldr	r2, [r3, #28]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800485a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e01d      	b.n	80048c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fd fd7e 	bl	800239c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3304      	adds	r3, #4
 80048b0:	4619      	mov	r1, r3
 80048b2:	4610      	mov	r0, r2
 80048b4:	f000 fb1e 	bl	8004ef4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b085      	sub	sp, #20
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0201 	orr.w	r2, r2, #1
 80048e0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b06      	cmp	r3, #6
 80048f2:	d007      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e01d      	b.n	8004960 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d106      	bne.n	800493e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7fd fc67 	bl	800220c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2202      	movs	r2, #2
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3304      	adds	r3, #4
 800494e:	4619      	mov	r1, r3
 8004950:	4610      	mov	r0, r2
 8004952:	f000 facf 	bl	8004ef4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2201      	movs	r2, #1
 8004978:	6839      	ldr	r1, [r7, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fd0a 	bl	8005394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a15      	ldr	r2, [pc, #84]	; (80049dc <HAL_TIM_PWM_Start+0x74>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d004      	beq.n	8004994 <HAL_TIM_PWM_Start+0x2c>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a14      	ldr	r2, [pc, #80]	; (80049e0 <HAL_TIM_PWM_Start+0x78>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d101      	bne.n	8004998 <HAL_TIM_PWM_Start+0x30>
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <HAL_TIM_PWM_Start+0x32>
 8004998:	2300      	movs	r3, #0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2b06      	cmp	r3, #6
 80049be:	d007      	beq.n	80049d0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40010000 	.word	0x40010000
 80049e0:	40010400 	.word	0x40010400

080049e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e083      	b.n	8004b00 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7fd fc49 	bl	80022a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2202      	movs	r2, #2
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6812      	ldr	r2, [r2, #0]
 8004a24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a28:	f023 0307 	bic.w	r3, r3, #7
 8004a2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3304      	adds	r3, #4
 8004a36:	4619      	mov	r1, r3
 8004a38:	4610      	mov	r0, r2
 8004a3a:	f000 fa5b 	bl	8004ef4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a66:	f023 0303 	bic.w	r3, r3, #3
 8004a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	4313      	orrs	r3, r2
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a84:	f023 030c 	bic.w	r3, r3, #12
 8004a88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	011a      	lsls	r2, r3, #4
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	031b      	lsls	r3, r3, #12
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004ac2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004aca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d122      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d11b      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f06f 0202 	mvn.w	r2, #2
 8004b34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f9b4 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 8004b50:	e005      	b.n	8004b5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f9a6 	bl	8004ea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f9b7 	bl	8004ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d122      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d11b      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0204 	mvn.w	r2, #4
 8004b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f98a 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 8004ba4:	e005      	b.n	8004bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f97c 	bl	8004ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f98d 	bl	8004ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d122      	bne.n	8004c0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d11b      	bne.n	8004c0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0208 	mvn.w	r2, #8
 8004bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2204      	movs	r2, #4
 8004be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f960 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 8004bf8:	e005      	b.n	8004c06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f952 	bl	8004ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f963 	bl	8004ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0310 	and.w	r3, r3, #16
 8004c16:	2b10      	cmp	r3, #16
 8004c18:	d122      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	d11b      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0210 	mvn.w	r2, #16
 8004c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2208      	movs	r2, #8
 8004c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f936 	bl	8004eb8 <HAL_TIM_IC_CaptureCallback>
 8004c4c:	e005      	b.n	8004c5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f928 	bl	8004ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f939 	bl	8004ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d10e      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d107      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0201 	mvn.w	r2, #1
 8004c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7fc fb7e 	bl	8001388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c96:	2b80      	cmp	r3, #128	; 0x80
 8004c98:	d10e      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca4:	2b80      	cmp	r3, #128	; 0x80
 8004ca6:	d107      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fc6c 	bl	8005590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc2:	2b40      	cmp	r3, #64	; 0x40
 8004cc4:	d10e      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd0:	2b40      	cmp	r3, #64	; 0x40
 8004cd2:	d107      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f8fe 	bl	8004ee0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d10e      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0320 	and.w	r3, r3, #32
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d107      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0220 	mvn.w	r2, #32
 8004d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fc36 	bl	800557c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d10:	bf00      	nop
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e0b4      	b.n	8004e9c <HAL_TIM_PWM_ConfigChannel+0x184>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b0c      	cmp	r3, #12
 8004d46:	f200 809f 	bhi.w	8004e88 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004d4a:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d50:	08004d85 	.word	0x08004d85
 8004d54:	08004e89 	.word	0x08004e89
 8004d58:	08004e89 	.word	0x08004e89
 8004d5c:	08004e89 	.word	0x08004e89
 8004d60:	08004dc5 	.word	0x08004dc5
 8004d64:	08004e89 	.word	0x08004e89
 8004d68:	08004e89 	.word	0x08004e89
 8004d6c:	08004e89 	.word	0x08004e89
 8004d70:	08004e07 	.word	0x08004e07
 8004d74:	08004e89 	.word	0x08004e89
 8004d78:	08004e89 	.word	0x08004e89
 8004d7c:	08004e89 	.word	0x08004e89
 8004d80:	08004e47 	.word	0x08004e47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 f952 	bl	8005034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0208 	orr.w	r2, r2, #8
 8004d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0204 	bic.w	r2, r2, #4
 8004dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6999      	ldr	r1, [r3, #24]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	619a      	str	r2, [r3, #24]
      break;
 8004dc2:	e062      	b.n	8004e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68b9      	ldr	r1, [r7, #8]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 f9a2 	bl	8005114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6999      	ldr	r1, [r3, #24]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	021a      	lsls	r2, r3, #8
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	619a      	str	r2, [r3, #24]
      break;
 8004e04:	e041      	b.n	8004e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68b9      	ldr	r1, [r7, #8]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 f9f7 	bl	8005200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69da      	ldr	r2, [r3, #28]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0208 	orr.w	r2, r2, #8
 8004e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0204 	bic.w	r2, r2, #4
 8004e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69d9      	ldr	r1, [r3, #28]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	61da      	str	r2, [r3, #28]
      break;
 8004e44:	e021      	b.n	8004e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fa4b 	bl	80052e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69da      	ldr	r2, [r3, #28]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69d9      	ldr	r1, [r3, #28]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	021a      	lsls	r2, r3, #8
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	61da      	str	r2, [r3, #28]
      break;
 8004e86:	e000      	b.n	8004e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004e88:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a40      	ldr	r2, [pc, #256]	; (8005008 <TIM_Base_SetConfig+0x114>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d013      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f12:	d00f      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a3d      	ldr	r2, [pc, #244]	; (800500c <TIM_Base_SetConfig+0x118>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00b      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a3c      	ldr	r2, [pc, #240]	; (8005010 <TIM_Base_SetConfig+0x11c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d007      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a3b      	ldr	r2, [pc, #236]	; (8005014 <TIM_Base_SetConfig+0x120>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d003      	beq.n	8004f34 <TIM_Base_SetConfig+0x40>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a3a      	ldr	r2, [pc, #232]	; (8005018 <TIM_Base_SetConfig+0x124>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d108      	bne.n	8004f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a2f      	ldr	r2, [pc, #188]	; (8005008 <TIM_Base_SetConfig+0x114>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d02b      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f54:	d027      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a2c      	ldr	r2, [pc, #176]	; (800500c <TIM_Base_SetConfig+0x118>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d023      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a2b      	ldr	r2, [pc, #172]	; (8005010 <TIM_Base_SetConfig+0x11c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d01f      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a2a      	ldr	r2, [pc, #168]	; (8005014 <TIM_Base_SetConfig+0x120>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d01b      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a29      	ldr	r2, [pc, #164]	; (8005018 <TIM_Base_SetConfig+0x124>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d017      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a28      	ldr	r2, [pc, #160]	; (800501c <TIM_Base_SetConfig+0x128>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d013      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a27      	ldr	r2, [pc, #156]	; (8005020 <TIM_Base_SetConfig+0x12c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00f      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a26      	ldr	r2, [pc, #152]	; (8005024 <TIM_Base_SetConfig+0x130>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00b      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a25      	ldr	r2, [pc, #148]	; (8005028 <TIM_Base_SetConfig+0x134>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d007      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a24      	ldr	r2, [pc, #144]	; (800502c <TIM_Base_SetConfig+0x138>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d003      	beq.n	8004fa6 <TIM_Base_SetConfig+0xb2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a23      	ldr	r2, [pc, #140]	; (8005030 <TIM_Base_SetConfig+0x13c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d108      	bne.n	8004fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a0a      	ldr	r2, [pc, #40]	; (8005008 <TIM_Base_SetConfig+0x114>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d003      	beq.n	8004fec <TIM_Base_SetConfig+0xf8>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a0c      	ldr	r2, [pc, #48]	; (8005018 <TIM_Base_SetConfig+0x124>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d103      	bne.n	8004ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	615a      	str	r2, [r3, #20]
}
 8004ffa:	bf00      	nop
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40010000 	.word	0x40010000
 800500c:	40000400 	.word	0x40000400
 8005010:	40000800 	.word	0x40000800
 8005014:	40000c00 	.word	0x40000c00
 8005018:	40010400 	.word	0x40010400
 800501c:	40014000 	.word	0x40014000
 8005020:	40014400 	.word	0x40014400
 8005024:	40014800 	.word	0x40014800
 8005028:	40001800 	.word	0x40001800
 800502c:	40001c00 	.word	0x40001c00
 8005030:	40002000 	.word	0x40002000

08005034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	f023 0201 	bic.w	r2, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0303 	bic.w	r3, r3, #3
 800506a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f023 0302 	bic.w	r3, r3, #2
 800507c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a20      	ldr	r2, [pc, #128]	; (800510c <TIM_OC1_SetConfig+0xd8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d003      	beq.n	8005098 <TIM_OC1_SetConfig+0x64>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a1f      	ldr	r2, [pc, #124]	; (8005110 <TIM_OC1_SetConfig+0xdc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d10c      	bne.n	80050b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 0308 	bic.w	r3, r3, #8
 800509e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f023 0304 	bic.w	r3, r3, #4
 80050b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a15      	ldr	r2, [pc, #84]	; (800510c <TIM_OC1_SetConfig+0xd8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d003      	beq.n	80050c2 <TIM_OC1_SetConfig+0x8e>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a14      	ldr	r2, [pc, #80]	; (8005110 <TIM_OC1_SetConfig+0xdc>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d111      	bne.n	80050e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	621a      	str	r2, [r3, #32]
}
 8005100:	bf00      	nop
 8005102:	371c      	adds	r7, #28
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	40010000 	.word	0x40010000
 8005110:	40010400 	.word	0x40010400

08005114 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	f023 0210 	bic.w	r2, r3, #16
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	021b      	lsls	r3, r3, #8
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f023 0320 	bic.w	r3, r3, #32
 800515e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a22      	ldr	r2, [pc, #136]	; (80051f8 <TIM_OC2_SetConfig+0xe4>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d003      	beq.n	800517c <TIM_OC2_SetConfig+0x68>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a21      	ldr	r2, [pc, #132]	; (80051fc <TIM_OC2_SetConfig+0xe8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d10d      	bne.n	8005198 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005196:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a17      	ldr	r2, [pc, #92]	; (80051f8 <TIM_OC2_SetConfig+0xe4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d003      	beq.n	80051a8 <TIM_OC2_SetConfig+0x94>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a16      	ldr	r2, [pc, #88]	; (80051fc <TIM_OC2_SetConfig+0xe8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d113      	bne.n	80051d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	621a      	str	r2, [r3, #32]
}
 80051ea:	bf00      	nop
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40010000 	.word	0x40010000
 80051fc:	40010400 	.word	0x40010400

08005200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0303 	bic.w	r3, r3, #3
 8005236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a21      	ldr	r2, [pc, #132]	; (80052e0 <TIM_OC3_SetConfig+0xe0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d003      	beq.n	8005266 <TIM_OC3_SetConfig+0x66>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a20      	ldr	r2, [pc, #128]	; (80052e4 <TIM_OC3_SetConfig+0xe4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d10d      	bne.n	8005282 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800526c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	021b      	lsls	r3, r3, #8
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	4313      	orrs	r3, r2
 8005278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a16      	ldr	r2, [pc, #88]	; (80052e0 <TIM_OC3_SetConfig+0xe0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d003      	beq.n	8005292 <TIM_OC3_SetConfig+0x92>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a15      	ldr	r2, [pc, #84]	; (80052e4 <TIM_OC3_SetConfig+0xe4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d113      	bne.n	80052ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	621a      	str	r2, [r3, #32]
}
 80052d4:	bf00      	nop
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	40010000 	.word	0x40010000
 80052e4:	40010400 	.word	0x40010400

080052e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800531e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	021b      	lsls	r3, r3, #8
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	031b      	lsls	r3, r3, #12
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a12      	ldr	r2, [pc, #72]	; (800538c <TIM_OC4_SetConfig+0xa4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d003      	beq.n	8005350 <TIM_OC4_SetConfig+0x68>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a11      	ldr	r2, [pc, #68]	; (8005390 <TIM_OC4_SetConfig+0xa8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d109      	bne.n	8005364 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005356:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	019b      	lsls	r3, r3, #6
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	621a      	str	r2, [r3, #32]
}
 800537e:	bf00      	nop
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40010000 	.word	0x40010000
 8005390:	40010400 	.word	0x40010400

08005394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f003 031f 	and.w	r3, r3, #31
 80053a6:	2201      	movs	r2, #1
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a1a      	ldr	r2, [r3, #32]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	43db      	mvns	r3, r3
 80053b6:	401a      	ands	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6a1a      	ldr	r2, [r3, #32]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f003 031f 	and.w	r3, r3, #31
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	fa01 f303 	lsl.w	r3, r1, r3
 80053cc:	431a      	orrs	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
	...

080053e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e05a      	b.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a21      	ldr	r2, [pc, #132]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d022      	beq.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005444:	d01d      	beq.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1d      	ldr	r2, [pc, #116]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d018      	beq.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1b      	ldr	r2, [pc, #108]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d013      	beq.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1a      	ldr	r2, [pc, #104]	; (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00e      	beq.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a18      	ldr	r2, [pc, #96]	; (80054cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d009      	beq.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a17      	ldr	r2, [pc, #92]	; (80054d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d004      	beq.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a15      	ldr	r2, [pc, #84]	; (80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d10c      	bne.n	800549c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	4313      	orrs	r3, r2
 8005492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40010000 	.word	0x40010000
 80054c0:	40000400 	.word	0x40000400
 80054c4:	40000800 	.word	0x40000800
 80054c8:	40000c00 	.word	0x40000c00
 80054cc:	40010400 	.word	0x40010400
 80054d0:	40014000 	.word	0x40014000
 80054d4:	40001800 	.word	0x40001800

080054d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d101      	bne.n	80054f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e03d      	b.n	8005570 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	4313      	orrs	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e03f      	b.n	8005636 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d106      	bne.n	80055d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fc ffd6 	bl	800257c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2224      	movs	r2, #36	; 0x24
 80055d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f829 	bl	8005640 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695a      	ldr	r2, [r3, #20]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800560c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800561c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
	...

08005640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	4313      	orrs	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005682:	f023 030c 	bic.w	r3, r3, #12
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	68f9      	ldr	r1, [r7, #12]
 800568c:	430b      	orrs	r3, r1
 800568e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ae:	f040 818b 	bne.w	80059c8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4ac1      	ldr	r2, [pc, #772]	; (80059bc <UART_SetConfig+0x37c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d005      	beq.n	80056c8 <UART_SetConfig+0x88>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4abf      	ldr	r2, [pc, #764]	; (80059c0 <UART_SetConfig+0x380>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	f040 80bd 	bne.w	8005842 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056c8:	f7ff f85c 	bl	8004784 <HAL_RCC_GetPCLK2Freq>
 80056cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	461d      	mov	r5, r3
 80056d2:	f04f 0600 	mov.w	r6, #0
 80056d6:	46a8      	mov	r8, r5
 80056d8:	46b1      	mov	r9, r6
 80056da:	eb18 0308 	adds.w	r3, r8, r8
 80056de:	eb49 0409 	adc.w	r4, r9, r9
 80056e2:	4698      	mov	r8, r3
 80056e4:	46a1      	mov	r9, r4
 80056e6:	eb18 0805 	adds.w	r8, r8, r5
 80056ea:	eb49 0906 	adc.w	r9, r9, r6
 80056ee:	f04f 0100 	mov.w	r1, #0
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80056fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80056fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005702:	4688      	mov	r8, r1
 8005704:	4691      	mov	r9, r2
 8005706:	eb18 0005 	adds.w	r0, r8, r5
 800570a:	eb49 0106 	adc.w	r1, r9, r6
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	461d      	mov	r5, r3
 8005714:	f04f 0600 	mov.w	r6, #0
 8005718:	196b      	adds	r3, r5, r5
 800571a:	eb46 0406 	adc.w	r4, r6, r6
 800571e:	461a      	mov	r2, r3
 8005720:	4623      	mov	r3, r4
 8005722:	f7fb f947 	bl	80009b4 <__aeabi_uldivmod>
 8005726:	4603      	mov	r3, r0
 8005728:	460c      	mov	r4, r1
 800572a:	461a      	mov	r2, r3
 800572c:	4ba5      	ldr	r3, [pc, #660]	; (80059c4 <UART_SetConfig+0x384>)
 800572e:	fba3 2302 	umull	r2, r3, r3, r2
 8005732:	095b      	lsrs	r3, r3, #5
 8005734:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	461d      	mov	r5, r3
 800573c:	f04f 0600 	mov.w	r6, #0
 8005740:	46a9      	mov	r9, r5
 8005742:	46b2      	mov	sl, r6
 8005744:	eb19 0309 	adds.w	r3, r9, r9
 8005748:	eb4a 040a 	adc.w	r4, sl, sl
 800574c:	4699      	mov	r9, r3
 800574e:	46a2      	mov	sl, r4
 8005750:	eb19 0905 	adds.w	r9, r9, r5
 8005754:	eb4a 0a06 	adc.w	sl, sl, r6
 8005758:	f04f 0100 	mov.w	r1, #0
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005764:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005768:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800576c:	4689      	mov	r9, r1
 800576e:	4692      	mov	sl, r2
 8005770:	eb19 0005 	adds.w	r0, r9, r5
 8005774:	eb4a 0106 	adc.w	r1, sl, r6
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	461d      	mov	r5, r3
 800577e:	f04f 0600 	mov.w	r6, #0
 8005782:	196b      	adds	r3, r5, r5
 8005784:	eb46 0406 	adc.w	r4, r6, r6
 8005788:	461a      	mov	r2, r3
 800578a:	4623      	mov	r3, r4
 800578c:	f7fb f912 	bl	80009b4 <__aeabi_uldivmod>
 8005790:	4603      	mov	r3, r0
 8005792:	460c      	mov	r4, r1
 8005794:	461a      	mov	r2, r3
 8005796:	4b8b      	ldr	r3, [pc, #556]	; (80059c4 <UART_SetConfig+0x384>)
 8005798:	fba3 1302 	umull	r1, r3, r3, r2
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	2164      	movs	r1, #100	; 0x64
 80057a0:	fb01 f303 	mul.w	r3, r1, r3
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	3332      	adds	r3, #50	; 0x32
 80057aa:	4a86      	ldr	r2, [pc, #536]	; (80059c4 <UART_SetConfig+0x384>)
 80057ac:	fba2 2303 	umull	r2, r3, r2, r3
 80057b0:	095b      	lsrs	r3, r3, #5
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057b8:	4498      	add	r8, r3
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	461d      	mov	r5, r3
 80057be:	f04f 0600 	mov.w	r6, #0
 80057c2:	46a9      	mov	r9, r5
 80057c4:	46b2      	mov	sl, r6
 80057c6:	eb19 0309 	adds.w	r3, r9, r9
 80057ca:	eb4a 040a 	adc.w	r4, sl, sl
 80057ce:	4699      	mov	r9, r3
 80057d0:	46a2      	mov	sl, r4
 80057d2:	eb19 0905 	adds.w	r9, r9, r5
 80057d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80057da:	f04f 0100 	mov.w	r1, #0
 80057de:	f04f 0200 	mov.w	r2, #0
 80057e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057ee:	4689      	mov	r9, r1
 80057f0:	4692      	mov	sl, r2
 80057f2:	eb19 0005 	adds.w	r0, r9, r5
 80057f6:	eb4a 0106 	adc.w	r1, sl, r6
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	461d      	mov	r5, r3
 8005800:	f04f 0600 	mov.w	r6, #0
 8005804:	196b      	adds	r3, r5, r5
 8005806:	eb46 0406 	adc.w	r4, r6, r6
 800580a:	461a      	mov	r2, r3
 800580c:	4623      	mov	r3, r4
 800580e:	f7fb f8d1 	bl	80009b4 <__aeabi_uldivmod>
 8005812:	4603      	mov	r3, r0
 8005814:	460c      	mov	r4, r1
 8005816:	461a      	mov	r2, r3
 8005818:	4b6a      	ldr	r3, [pc, #424]	; (80059c4 <UART_SetConfig+0x384>)
 800581a:	fba3 1302 	umull	r1, r3, r3, r2
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	2164      	movs	r1, #100	; 0x64
 8005822:	fb01 f303 	mul.w	r3, r1, r3
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	3332      	adds	r3, #50	; 0x32
 800582c:	4a65      	ldr	r2, [pc, #404]	; (80059c4 <UART_SetConfig+0x384>)
 800582e:	fba2 2303 	umull	r2, r3, r2, r3
 8005832:	095b      	lsrs	r3, r3, #5
 8005834:	f003 0207 	and.w	r2, r3, #7
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4442      	add	r2, r8
 800583e:	609a      	str	r2, [r3, #8]
 8005840:	e26f      	b.n	8005d22 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005842:	f7fe ff8b 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 8005846:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	461d      	mov	r5, r3
 800584c:	f04f 0600 	mov.w	r6, #0
 8005850:	46a8      	mov	r8, r5
 8005852:	46b1      	mov	r9, r6
 8005854:	eb18 0308 	adds.w	r3, r8, r8
 8005858:	eb49 0409 	adc.w	r4, r9, r9
 800585c:	4698      	mov	r8, r3
 800585e:	46a1      	mov	r9, r4
 8005860:	eb18 0805 	adds.w	r8, r8, r5
 8005864:	eb49 0906 	adc.w	r9, r9, r6
 8005868:	f04f 0100 	mov.w	r1, #0
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005874:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005878:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800587c:	4688      	mov	r8, r1
 800587e:	4691      	mov	r9, r2
 8005880:	eb18 0005 	adds.w	r0, r8, r5
 8005884:	eb49 0106 	adc.w	r1, r9, r6
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	461d      	mov	r5, r3
 800588e:	f04f 0600 	mov.w	r6, #0
 8005892:	196b      	adds	r3, r5, r5
 8005894:	eb46 0406 	adc.w	r4, r6, r6
 8005898:	461a      	mov	r2, r3
 800589a:	4623      	mov	r3, r4
 800589c:	f7fb f88a 	bl	80009b4 <__aeabi_uldivmod>
 80058a0:	4603      	mov	r3, r0
 80058a2:	460c      	mov	r4, r1
 80058a4:	461a      	mov	r2, r3
 80058a6:	4b47      	ldr	r3, [pc, #284]	; (80059c4 <UART_SetConfig+0x384>)
 80058a8:	fba3 2302 	umull	r2, r3, r3, r2
 80058ac:	095b      	lsrs	r3, r3, #5
 80058ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	461d      	mov	r5, r3
 80058b6:	f04f 0600 	mov.w	r6, #0
 80058ba:	46a9      	mov	r9, r5
 80058bc:	46b2      	mov	sl, r6
 80058be:	eb19 0309 	adds.w	r3, r9, r9
 80058c2:	eb4a 040a 	adc.w	r4, sl, sl
 80058c6:	4699      	mov	r9, r3
 80058c8:	46a2      	mov	sl, r4
 80058ca:	eb19 0905 	adds.w	r9, r9, r5
 80058ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80058d2:	f04f 0100 	mov.w	r1, #0
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058e6:	4689      	mov	r9, r1
 80058e8:	4692      	mov	sl, r2
 80058ea:	eb19 0005 	adds.w	r0, r9, r5
 80058ee:	eb4a 0106 	adc.w	r1, sl, r6
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	461d      	mov	r5, r3
 80058f8:	f04f 0600 	mov.w	r6, #0
 80058fc:	196b      	adds	r3, r5, r5
 80058fe:	eb46 0406 	adc.w	r4, r6, r6
 8005902:	461a      	mov	r2, r3
 8005904:	4623      	mov	r3, r4
 8005906:	f7fb f855 	bl	80009b4 <__aeabi_uldivmod>
 800590a:	4603      	mov	r3, r0
 800590c:	460c      	mov	r4, r1
 800590e:	461a      	mov	r2, r3
 8005910:	4b2c      	ldr	r3, [pc, #176]	; (80059c4 <UART_SetConfig+0x384>)
 8005912:	fba3 1302 	umull	r1, r3, r3, r2
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	2164      	movs	r1, #100	; 0x64
 800591a:	fb01 f303 	mul.w	r3, r1, r3
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	3332      	adds	r3, #50	; 0x32
 8005924:	4a27      	ldr	r2, [pc, #156]	; (80059c4 <UART_SetConfig+0x384>)
 8005926:	fba2 2303 	umull	r2, r3, r2, r3
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005932:	4498      	add	r8, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	461d      	mov	r5, r3
 8005938:	f04f 0600 	mov.w	r6, #0
 800593c:	46a9      	mov	r9, r5
 800593e:	46b2      	mov	sl, r6
 8005940:	eb19 0309 	adds.w	r3, r9, r9
 8005944:	eb4a 040a 	adc.w	r4, sl, sl
 8005948:	4699      	mov	r9, r3
 800594a:	46a2      	mov	sl, r4
 800594c:	eb19 0905 	adds.w	r9, r9, r5
 8005950:	eb4a 0a06 	adc.w	sl, sl, r6
 8005954:	f04f 0100 	mov.w	r1, #0
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005960:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005964:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005968:	4689      	mov	r9, r1
 800596a:	4692      	mov	sl, r2
 800596c:	eb19 0005 	adds.w	r0, r9, r5
 8005970:	eb4a 0106 	adc.w	r1, sl, r6
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	461d      	mov	r5, r3
 800597a:	f04f 0600 	mov.w	r6, #0
 800597e:	196b      	adds	r3, r5, r5
 8005980:	eb46 0406 	adc.w	r4, r6, r6
 8005984:	461a      	mov	r2, r3
 8005986:	4623      	mov	r3, r4
 8005988:	f7fb f814 	bl	80009b4 <__aeabi_uldivmod>
 800598c:	4603      	mov	r3, r0
 800598e:	460c      	mov	r4, r1
 8005990:	461a      	mov	r2, r3
 8005992:	4b0c      	ldr	r3, [pc, #48]	; (80059c4 <UART_SetConfig+0x384>)
 8005994:	fba3 1302 	umull	r1, r3, r3, r2
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	2164      	movs	r1, #100	; 0x64
 800599c:	fb01 f303 	mul.w	r3, r1, r3
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	3332      	adds	r3, #50	; 0x32
 80059a6:	4a07      	ldr	r2, [pc, #28]	; (80059c4 <UART_SetConfig+0x384>)
 80059a8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ac:	095b      	lsrs	r3, r3, #5
 80059ae:	f003 0207 	and.w	r2, r3, #7
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4442      	add	r2, r8
 80059b8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80059ba:	e1b2      	b.n	8005d22 <UART_SetConfig+0x6e2>
 80059bc:	40011000 	.word	0x40011000
 80059c0:	40011400 	.word	0x40011400
 80059c4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4ad7      	ldr	r2, [pc, #860]	; (8005d2c <UART_SetConfig+0x6ec>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d005      	beq.n	80059de <UART_SetConfig+0x39e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4ad6      	ldr	r2, [pc, #856]	; (8005d30 <UART_SetConfig+0x6f0>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	f040 80d1 	bne.w	8005b80 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80059de:	f7fe fed1 	bl	8004784 <HAL_RCC_GetPCLK2Freq>
 80059e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	469a      	mov	sl, r3
 80059e8:	f04f 0b00 	mov.w	fp, #0
 80059ec:	46d0      	mov	r8, sl
 80059ee:	46d9      	mov	r9, fp
 80059f0:	eb18 0308 	adds.w	r3, r8, r8
 80059f4:	eb49 0409 	adc.w	r4, r9, r9
 80059f8:	4698      	mov	r8, r3
 80059fa:	46a1      	mov	r9, r4
 80059fc:	eb18 080a 	adds.w	r8, r8, sl
 8005a00:	eb49 090b 	adc.w	r9, r9, fp
 8005a04:	f04f 0100 	mov.w	r1, #0
 8005a08:	f04f 0200 	mov.w	r2, #0
 8005a0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a18:	4688      	mov	r8, r1
 8005a1a:	4691      	mov	r9, r2
 8005a1c:	eb1a 0508 	adds.w	r5, sl, r8
 8005a20:	eb4b 0609 	adc.w	r6, fp, r9
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	f04f 0200 	mov.w	r2, #0
 8005a2e:	f04f 0300 	mov.w	r3, #0
 8005a32:	f04f 0400 	mov.w	r4, #0
 8005a36:	0094      	lsls	r4, r2, #2
 8005a38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a3c:	008b      	lsls	r3, r1, #2
 8005a3e:	461a      	mov	r2, r3
 8005a40:	4623      	mov	r3, r4
 8005a42:	4628      	mov	r0, r5
 8005a44:	4631      	mov	r1, r6
 8005a46:	f7fa ffb5 	bl	80009b4 <__aeabi_uldivmod>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	460c      	mov	r4, r1
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4bb8      	ldr	r3, [pc, #736]	; (8005d34 <UART_SetConfig+0x6f4>)
 8005a52:	fba3 2302 	umull	r2, r3, r3, r2
 8005a56:	095b      	lsrs	r3, r3, #5
 8005a58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	469b      	mov	fp, r3
 8005a60:	f04f 0c00 	mov.w	ip, #0
 8005a64:	46d9      	mov	r9, fp
 8005a66:	46e2      	mov	sl, ip
 8005a68:	eb19 0309 	adds.w	r3, r9, r9
 8005a6c:	eb4a 040a 	adc.w	r4, sl, sl
 8005a70:	4699      	mov	r9, r3
 8005a72:	46a2      	mov	sl, r4
 8005a74:	eb19 090b 	adds.w	r9, r9, fp
 8005a78:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a7c:	f04f 0100 	mov.w	r1, #0
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a90:	4689      	mov	r9, r1
 8005a92:	4692      	mov	sl, r2
 8005a94:	eb1b 0509 	adds.w	r5, fp, r9
 8005a98:	eb4c 060a 	adc.w	r6, ip, sl
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	f04f 0200 	mov.w	r2, #0
 8005aa6:	f04f 0300 	mov.w	r3, #0
 8005aaa:	f04f 0400 	mov.w	r4, #0
 8005aae:	0094      	lsls	r4, r2, #2
 8005ab0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ab4:	008b      	lsls	r3, r1, #2
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	4623      	mov	r3, r4
 8005aba:	4628      	mov	r0, r5
 8005abc:	4631      	mov	r1, r6
 8005abe:	f7fa ff79 	bl	80009b4 <__aeabi_uldivmod>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	4b9a      	ldr	r3, [pc, #616]	; (8005d34 <UART_SetConfig+0x6f4>)
 8005aca:	fba3 1302 	umull	r1, r3, r3, r2
 8005ace:	095b      	lsrs	r3, r3, #5
 8005ad0:	2164      	movs	r1, #100	; 0x64
 8005ad2:	fb01 f303 	mul.w	r3, r1, r3
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	3332      	adds	r3, #50	; 0x32
 8005adc:	4a95      	ldr	r2, [pc, #596]	; (8005d34 <UART_SetConfig+0x6f4>)
 8005ade:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae2:	095b      	lsrs	r3, r3, #5
 8005ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ae8:	4498      	add	r8, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	469b      	mov	fp, r3
 8005aee:	f04f 0c00 	mov.w	ip, #0
 8005af2:	46d9      	mov	r9, fp
 8005af4:	46e2      	mov	sl, ip
 8005af6:	eb19 0309 	adds.w	r3, r9, r9
 8005afa:	eb4a 040a 	adc.w	r4, sl, sl
 8005afe:	4699      	mov	r9, r3
 8005b00:	46a2      	mov	sl, r4
 8005b02:	eb19 090b 	adds.w	r9, r9, fp
 8005b06:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b0a:	f04f 0100 	mov.w	r1, #0
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b1e:	4689      	mov	r9, r1
 8005b20:	4692      	mov	sl, r2
 8005b22:	eb1b 0509 	adds.w	r5, fp, r9
 8005b26:	eb4c 060a 	adc.w	r6, ip, sl
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	4619      	mov	r1, r3
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	f04f 0400 	mov.w	r4, #0
 8005b3c:	0094      	lsls	r4, r2, #2
 8005b3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b42:	008b      	lsls	r3, r1, #2
 8005b44:	461a      	mov	r2, r3
 8005b46:	4623      	mov	r3, r4
 8005b48:	4628      	mov	r0, r5
 8005b4a:	4631      	mov	r1, r6
 8005b4c:	f7fa ff32 	bl	80009b4 <__aeabi_uldivmod>
 8005b50:	4603      	mov	r3, r0
 8005b52:	460c      	mov	r4, r1
 8005b54:	461a      	mov	r2, r3
 8005b56:	4b77      	ldr	r3, [pc, #476]	; (8005d34 <UART_SetConfig+0x6f4>)
 8005b58:	fba3 1302 	umull	r1, r3, r3, r2
 8005b5c:	095b      	lsrs	r3, r3, #5
 8005b5e:	2164      	movs	r1, #100	; 0x64
 8005b60:	fb01 f303 	mul.w	r3, r1, r3
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	3332      	adds	r3, #50	; 0x32
 8005b6a:	4a72      	ldr	r2, [pc, #456]	; (8005d34 <UART_SetConfig+0x6f4>)
 8005b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	f003 020f 	and.w	r2, r3, #15
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4442      	add	r2, r8
 8005b7c:	609a      	str	r2, [r3, #8]
 8005b7e:	e0d0      	b.n	8005d22 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b80:	f7fe fdec 	bl	800475c <HAL_RCC_GetPCLK1Freq>
 8005b84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	469a      	mov	sl, r3
 8005b8a:	f04f 0b00 	mov.w	fp, #0
 8005b8e:	46d0      	mov	r8, sl
 8005b90:	46d9      	mov	r9, fp
 8005b92:	eb18 0308 	adds.w	r3, r8, r8
 8005b96:	eb49 0409 	adc.w	r4, r9, r9
 8005b9a:	4698      	mov	r8, r3
 8005b9c:	46a1      	mov	r9, r4
 8005b9e:	eb18 080a 	adds.w	r8, r8, sl
 8005ba2:	eb49 090b 	adc.w	r9, r9, fp
 8005ba6:	f04f 0100 	mov.w	r1, #0
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005bb2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005bb6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005bba:	4688      	mov	r8, r1
 8005bbc:	4691      	mov	r9, r2
 8005bbe:	eb1a 0508 	adds.w	r5, sl, r8
 8005bc2:	eb4b 0609 	adc.w	r6, fp, r9
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	4619      	mov	r1, r3
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	f04f 0400 	mov.w	r4, #0
 8005bd8:	0094      	lsls	r4, r2, #2
 8005bda:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bde:	008b      	lsls	r3, r1, #2
 8005be0:	461a      	mov	r2, r3
 8005be2:	4623      	mov	r3, r4
 8005be4:	4628      	mov	r0, r5
 8005be6:	4631      	mov	r1, r6
 8005be8:	f7fa fee4 	bl	80009b4 <__aeabi_uldivmod>
 8005bec:	4603      	mov	r3, r0
 8005bee:	460c      	mov	r4, r1
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4b50      	ldr	r3, [pc, #320]	; (8005d34 <UART_SetConfig+0x6f4>)
 8005bf4:	fba3 2302 	umull	r2, r3, r3, r2
 8005bf8:	095b      	lsrs	r3, r3, #5
 8005bfa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	469b      	mov	fp, r3
 8005c02:	f04f 0c00 	mov.w	ip, #0
 8005c06:	46d9      	mov	r9, fp
 8005c08:	46e2      	mov	sl, ip
 8005c0a:	eb19 0309 	adds.w	r3, r9, r9
 8005c0e:	eb4a 040a 	adc.w	r4, sl, sl
 8005c12:	4699      	mov	r9, r3
 8005c14:	46a2      	mov	sl, r4
 8005c16:	eb19 090b 	adds.w	r9, r9, fp
 8005c1a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c1e:	f04f 0100 	mov.w	r1, #0
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c32:	4689      	mov	r9, r1
 8005c34:	4692      	mov	sl, r2
 8005c36:	eb1b 0509 	adds.w	r5, fp, r9
 8005c3a:	eb4c 060a 	adc.w	r6, ip, sl
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	4619      	mov	r1, r3
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	f04f 0400 	mov.w	r4, #0
 8005c50:	0094      	lsls	r4, r2, #2
 8005c52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c56:	008b      	lsls	r3, r1, #2
 8005c58:	461a      	mov	r2, r3
 8005c5a:	4623      	mov	r3, r4
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	4631      	mov	r1, r6
 8005c60:	f7fa fea8 	bl	80009b4 <__aeabi_uldivmod>
 8005c64:	4603      	mov	r3, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4b32      	ldr	r3, [pc, #200]	; (8005d34 <UART_SetConfig+0x6f4>)
 8005c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	2164      	movs	r1, #100	; 0x64
 8005c74:	fb01 f303 	mul.w	r3, r1, r3
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	3332      	adds	r3, #50	; 0x32
 8005c7e:	4a2d      	ldr	r2, [pc, #180]	; (8005d34 <UART_SetConfig+0x6f4>)
 8005c80:	fba2 2303 	umull	r2, r3, r2, r3
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c8a:	4498      	add	r8, r3
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	469b      	mov	fp, r3
 8005c90:	f04f 0c00 	mov.w	ip, #0
 8005c94:	46d9      	mov	r9, fp
 8005c96:	46e2      	mov	sl, ip
 8005c98:	eb19 0309 	adds.w	r3, r9, r9
 8005c9c:	eb4a 040a 	adc.w	r4, sl, sl
 8005ca0:	4699      	mov	r9, r3
 8005ca2:	46a2      	mov	sl, r4
 8005ca4:	eb19 090b 	adds.w	r9, r9, fp
 8005ca8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005cac:	f04f 0100 	mov.w	r1, #0
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cc0:	4689      	mov	r9, r1
 8005cc2:	4692      	mov	sl, r2
 8005cc4:	eb1b 0509 	adds.w	r5, fp, r9
 8005cc8:	eb4c 060a 	adc.w	r6, ip, sl
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	f04f 0200 	mov.w	r2, #0
 8005cd6:	f04f 0300 	mov.w	r3, #0
 8005cda:	f04f 0400 	mov.w	r4, #0
 8005cde:	0094      	lsls	r4, r2, #2
 8005ce0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ce4:	008b      	lsls	r3, r1, #2
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	4623      	mov	r3, r4
 8005cea:	4628      	mov	r0, r5
 8005cec:	4631      	mov	r1, r6
 8005cee:	f7fa fe61 	bl	80009b4 <__aeabi_uldivmod>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	460c      	mov	r4, r1
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <UART_SetConfig+0x6f4>)
 8005cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	2164      	movs	r1, #100	; 0x64
 8005d02:	fb01 f303 	mul.w	r3, r1, r3
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	3332      	adds	r3, #50	; 0x32
 8005d0c:	4a09      	ldr	r2, [pc, #36]	; (8005d34 <UART_SetConfig+0x6f4>)
 8005d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d12:	095b      	lsrs	r3, r3, #5
 8005d14:	f003 020f 	and.w	r2, r3, #15
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4442      	add	r2, r8
 8005d1e:	609a      	str	r2, [r3, #8]
}
 8005d20:	e7ff      	b.n	8005d22 <UART_SetConfig+0x6e2>
 8005d22:	bf00      	nop
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d2c:	40011000 	.word	0x40011000
 8005d30:	40011400 	.word	0x40011400
 8005d34:	51eb851f 	.word	0x51eb851f

08005d38 <__libc_init_array>:
 8005d38:	b570      	push	{r4, r5, r6, lr}
 8005d3a:	4e0d      	ldr	r6, [pc, #52]	; (8005d70 <__libc_init_array+0x38>)
 8005d3c:	4c0d      	ldr	r4, [pc, #52]	; (8005d74 <__libc_init_array+0x3c>)
 8005d3e:	1ba4      	subs	r4, r4, r6
 8005d40:	10a4      	asrs	r4, r4, #2
 8005d42:	2500      	movs	r5, #0
 8005d44:	42a5      	cmp	r5, r4
 8005d46:	d109      	bne.n	8005d5c <__libc_init_array+0x24>
 8005d48:	4e0b      	ldr	r6, [pc, #44]	; (8005d78 <__libc_init_array+0x40>)
 8005d4a:	4c0c      	ldr	r4, [pc, #48]	; (8005d7c <__libc_init_array+0x44>)
 8005d4c:	f000 f820 	bl	8005d90 <_init>
 8005d50:	1ba4      	subs	r4, r4, r6
 8005d52:	10a4      	asrs	r4, r4, #2
 8005d54:	2500      	movs	r5, #0
 8005d56:	42a5      	cmp	r5, r4
 8005d58:	d105      	bne.n	8005d66 <__libc_init_array+0x2e>
 8005d5a:	bd70      	pop	{r4, r5, r6, pc}
 8005d5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d60:	4798      	blx	r3
 8005d62:	3501      	adds	r5, #1
 8005d64:	e7ee      	b.n	8005d44 <__libc_init_array+0xc>
 8005d66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d6a:	4798      	blx	r3
 8005d6c:	3501      	adds	r5, #1
 8005d6e:	e7f2      	b.n	8005d56 <__libc_init_array+0x1e>
 8005d70:	08005dd0 	.word	0x08005dd0
 8005d74:	08005dd0 	.word	0x08005dd0
 8005d78:	08005dd0 	.word	0x08005dd0
 8005d7c:	08005dd4 	.word	0x08005dd4

08005d80 <memset>:
 8005d80:	4402      	add	r2, r0
 8005d82:	4603      	mov	r3, r0
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d100      	bne.n	8005d8a <memset+0xa>
 8005d88:	4770      	bx	lr
 8005d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d8e:	e7f9      	b.n	8005d84 <memset+0x4>

08005d90 <_init>:
 8005d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d92:	bf00      	nop
 8005d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d96:	bc08      	pop	{r3}
 8005d98:	469e      	mov	lr, r3
 8005d9a:	4770      	bx	lr

08005d9c <_fini>:
 8005d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9e:	bf00      	nop
 8005da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da2:	bc08      	pop	{r3}
 8005da4:	469e      	mov	lr, r3
 8005da6:	4770      	bx	lr
